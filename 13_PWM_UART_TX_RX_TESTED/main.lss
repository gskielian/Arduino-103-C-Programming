
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011c  0080011c  000003f8  2**0
                  ALLOC
  3 .stab         00000e10  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000878  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c5  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000040d  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000022a  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000351  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ca  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001bd  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000043  00000000  00000000  000028f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  9e:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
  stdout = &uart_output;
  stdin  = &uart_input;

}

void uart_putchar(char c, FILE *stream) {
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
  if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  }
  loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putchar+0xe>
  UDR0 = c;
  bc:	10 93 c6 00 	sts	0x00C6, r17
}
  c0:	1f 91       	pop	r17
  c2:	08 95       	ret

000000c4 <uart_getchar>:


char uart_getchar(FILE *stream) {
  loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <uart_getchar>
  return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6
}
  d0:	08 95       	ret

000000d2 <io_init>:
*/


void io_init (void) {
  //1 = output, 0 = input
  DDRB = _BV(PUL) | _BV(DIR) | _BV(ENA) | _BV(LED);
  d2:	8c e3       	ldi	r24, 0x3C	; 60
  d4:	84 b9       	out	0x04, r24	; 4
  //     PUL-Portb2 DIR-Portb3 ENA-Portb4 LED-light port 5 (13)
  DDRD = _BV(OPTO);
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	8a b9       	out	0x0a, r24	; 10
  //     Pin 2 of the arduino
  //     */
}
  da:	08 95       	ret

000000dc <pwm_init>:

void pwm_init(void) {
  TCCR1A = _BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	80 93 80 00 	sts	0x0080, r24

  //  (0x81) TCCR1B ICNC1 ICES1 – WGM13 WGM12 CS12 CS11 CS10 136
  //  (0x80) TCCR1A COM1A1 COM1A0 COM1B1 COM1B0 – – WGM11 WGM10 134

  OCR1AH = 0x00; //this controls the higher half of the 16 bit "TOP" value
  e2:	10 92 89 00 	sts	0x0089, r1


  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	80 93 81 00 	sts	0x0081, r24
  1 0 0 clkI/O/256 (From prescaler)
  1 0 1 clkI/O/1024 (From prescaler)
  1 1 0 External clock source on T1 pin. Clock on falling edge.
  1 1 1 External clock source on T1 pin. Clock on rising edgputchar
  */
}
  ec:	08 95       	ret

000000ee <shake_sequence>:
     }
     */
  return 0;
}

void shake_sequence(uint8_t number) {
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  uint8_t i;
  uint8_t j;

  pwm_init();
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	0e 94 6e 00 	call	0xdc	; 0xdc <pwm_init>

  OCR1AH = 0x50;
  fe:	90 e5       	ldi	r25, 0x50	; 80
 100:	90 93 89 00 	sts	0x0089, r25
  OCR1AL = 0xff;
 104:	9f ef       	ldi	r25, 0xFF	; 255
 106:	90 93 88 00 	sts	0x0088, r25

  PORTB |= _BV(ENA); // ON the enable bit
 10a:	2c 9a       	sbi	0x05, 4	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	90 e0       	ldi	r25, 0x00	; 0
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 114:	68 e0       	ldi	r22, 0x08	; 8

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 116:	23 c0       	rjmp	.+70     	; 0x15e <shake_sequence+0x70>
 118:	4f ef       	ldi	r20, 0xFF	; 255
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
 11a:	40 93 89 00 	sts	0x0089, r20
      for (i = i_high; i > i_low ; i--) {
 11e:	5f ef       	ldi	r21, 0xFF	; 255
        OCR1AL = i;
 120:	50 93 88 00 	sts	0x0088, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	75 e3       	ldi	r23, 0x35	; 53
 126:	7a 95       	dec	r23
 128:	f1 f7       	brne	.-4      	; 0x126 <shake_sequence+0x38>
 12a:	00 00       	nop
  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
      for (i = i_high; i > i_low ; i--) {
 12c:	51 50       	subi	r21, 0x01	; 1
 12e:	c1 f7       	brne	.-16     	; 0x120 <shake_sequence+0x32>
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
 130:	41 50       	subi	r20, 0x01	; 1
 132:	42 33       	cpi	r20, 0x32	; 50
 134:	91 f7       	brne	.-28     	; 0x11a <shake_sequence+0x2c>
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
 136:	40 93 89 00 	sts	0x0089, r20
      for (i = i_low; i < i_high; i++) {
 13a:	50 e0       	ldi	r21, 0x00	; 0
        OCR1AL = i;
 13c:	50 93 88 00 	sts	0x0088, r21
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	ea 95       	dec	r30
 144:	f1 f7       	brne	.-4      	; 0x142 <shake_sequence+0x54>
 146:	00 00       	nop
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
      for (i = i_low; i < i_high; i++) {
 148:	5f 5f       	subi	r21, 0xFF	; 255
 14a:	5f 3f       	cpi	r21, 0xFF	; 255
 14c:	b9 f7       	brne	.-18     	; 0x13c <shake_sequence+0x4e>
      for (i = i_high; i > i_low ; i--) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
 14e:	4f 5f       	subi	r20, 0xFF	; 255
 150:	4f 3f       	cpi	r20, 0xFF	; 255
 152:	89 f7       	brne	.-30     	; 0x136 <shake_sequence+0x48>
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 154:	45 b1       	in	r20, 0x05	; 5
 156:	46 27       	eor	r20, r22
 158:	45 b9       	out	0x05, r20	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	28 17       	cp	r18, r24
 160:	39 07       	cpc	r19, r25
 162:	d4 f2       	brlt	.-76     	; 0x118 <shake_sequence+0x2a>
      }
    }
    PORTB ^= _BV(DIR);

  }
  PORTD &= ~_BV(ENA);// OFF the enable bit
 164:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 166:	80 91 80 00 	lds	r24, 0x0080
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	80 93 80 00 	sts	0x0080, r24
}
 170:	0f 90       	pop	r0
 172:	cf 91       	pop	r28
 174:	df 91       	pop	r29
 176:	08 95       	ret

00000178 <set_baud>:
  */
}


void set_baud(void) {
  UBRR0H = (BRC >> 8);
 178:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = BRC;
 17c:	87 e6       	ldi	r24, 0x67	; 103
 17e:	80 93 c4 00 	sts	0x00C4, r24

  //enables rx and tx, page 183 example from documentation
  UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0 ) | (1 << TXCIE0);
 182:	88 ed       	ldi	r24, 0xD8	; 216
 184:	80 93 c1 00 	sts	0x00C1, r24

  //198 of documentation, these two bits make it 8-bit
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	80 93 c2 00 	sts	0x00C2, r24

  //since we don't use 2x
  UCSR0A &= ~(_BV(U2X0));
 18e:	e0 ec       	ldi	r30, 0xC0	; 192
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	80 83       	st	Z, r24

  //redirecting standard out and in to UART -- very clever tuupola
  stdout = &uart_output;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	90 93 27 01 	sts	0x0127, r25
 1a0:	80 93 26 01 	sts	0x0126, r24
  stdin  = &uart_input;
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	90 93 25 01 	sts	0x0125, r25
 1ac:	80 93 24 01 	sts	0x0124, r24

}
 1b0:	08 95       	ret

000001b2 <main>:
//void demo_centrifuge_stage(void); // TODO add control method for customization
//void demo_full_sequence(void); // TODO align sequence in a function
//======================

int main (void) {
  io_init(); //Setup IO pins and defaults
 1b2:	0e 94 69 00 	call	0xd2	; 0xd2 <io_init>
  set_baud();
 1b6:	0e 94 bc 00 	call	0x178	; 0x178 <set_baud>

  char input;

  while (1) {

    input = getchar();
 1ba:	80 91 24 01 	lds	r24, 0x0124
 1be:	90 91 25 01 	lds	r25, 0x0125
 1c2:	0e 94 34 01 	call	0x268	; 0x268 <fgetc>

    //first stage will be a simple switch case`


    switch (input) {
 1c6:	83 33       	cpi	r24, 0x33	; 51
 1c8:	21 f1       	breq	.+72     	; 0x212 <main+0x60>
 1ca:	84 33       	cpi	r24, 0x34	; 52
 1cc:	30 f4       	brcc	.+12     	; 0x1da <main+0x28>
 1ce:	81 33       	cpi	r24, 0x31	; 49
 1d0:	59 f0       	breq	.+22     	; 0x1e8 <main+0x36>
 1d2:	82 33       	cpi	r24, 0x32	; 50
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <main+0x26>
 1d6:	3f c0       	rjmp	.+126    	; 0x256 <main+0xa4>
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <main+0x4e>
 1da:	85 33       	cpi	r24, 0x35	; 53
 1dc:	61 f1       	breq	.+88     	; 0x236 <main+0x84>
 1de:	85 33       	cpi	r24, 0x35	; 53
 1e0:	08 f1       	brcs	.+66     	; 0x224 <main+0x72>
 1e2:	86 33       	cpi	r24, 0x36	; 54
 1e4:	c1 f5       	brne	.+112    	; 0x256 <main+0xa4>
 1e6:	2f c0       	rjmp	.+94     	; 0x246 <main+0x94>
      case '1':
        //shake sequence
        PORTB |= _BV(ENA); // ON the enable bit
 1e8:	2c 9a       	sbi	0x05, 4	; 5
        shake_sequence(2); // TODO shake twice -- can mod this later for custom shakes
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 77 00 	call	0xee	; 0xee <shake_sequence>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 1f0:	2c 98       	cbi	0x05, 4	; 5
        putchar('1');
 1f2:	60 91 26 01 	lds	r22, 0x0126
 1f6:	70 91 27 01 	lds	r23, 0x0127
 1fa:	81 e3       	ldi	r24, 0x31	; 49
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	31 c0       	rjmp	.+98     	; 0x262 <main+0xb0>
        break;
      case '2':
        //ramp sequence
        PORTB |= _BV(ENA); // ON the enable bit
 200:	2c 9a       	sbi	0x05, 4	; 5
        //demo_centrifuge_stage(); // TODO add control method for customization
        PORTB &= ~_BV(ENA);// OFF the enable bit
 202:	2c 98       	cbi	0x05, 4	; 5
        putchar('2');
 204:	60 91 26 01 	lds	r22, 0x0126
 208:	70 91 27 01 	lds	r23, 0x0127
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	28 c0       	rjmp	.+80     	; 0x262 <main+0xb0>
        break;
      case '3':
        //recording_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 212:	2c 9a       	sbi	0x05, 4	; 5
        //find_first_well(); // TODO find the pwm speed for Servo.h 
        //and emulate to avoid needing to perform trial and error
        PORTB &= ~_BV(ENA);// OFF the enable bit
 214:	2c 98       	cbi	0x05, 4	; 5
        putchar('3');
 216:	60 91 26 01 	lds	r22, 0x0126
 21a:	70 91 27 01 	lds	r23, 0x0127
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	1f c0       	rjmp	.+62     	; 0x262 <main+0xb0>
        break;
      case '4':
        //full_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 224:	2c 9a       	sbi	0x05, 4	; 5
        //demo_full_sequence();// TODO create full sequence
        PORTB &= ~_BV(ENA);// OFF the enable bit
 226:	2c 98       	cbi	0x05, 4	; 5
        putchar('4');
 228:	60 91 26 01 	lds	r22, 0x0126
 22c:	70 91 27 01 	lds	r23, 0x0127
 230:	84 e3       	ldi	r24, 0x34	; 52
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	16 c0       	rjmp	.+44     	; 0x262 <main+0xb0>
        break;
      case '5':
        //LED ON
        PORTB |= _BV(LED); // TODO Test LED ON
 236:	2d 9a       	sbi	0x05, 5	; 5
        putchar('5');
 238:	60 91 26 01 	lds	r22, 0x0126
 23c:	70 91 27 01 	lds	r23, 0x0127
 240:	85 e3       	ldi	r24, 0x35	; 53
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e c0       	rjmp	.+28     	; 0x262 <main+0xb0>
        break;
      case '6':
        //LED OFF
        PORTB &= ~_BV(LED); // TODO Test LED OFF
 246:	2d 98       	cbi	0x05, 5	; 5
        putchar('6');
 248:	60 91 26 01 	lds	r22, 0x0126
 24c:	70 91 27 01 	lds	r23, 0x0127
 250:	86 e3       	ldi	r24, 0x36	; 54
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	06 c0       	rjmp	.+12     	; 0x262 <main+0xb0>
        break;
      default:
        putchar('0');
 256:	60 91 26 01 	lds	r22, 0x0126
 25a:	70 91 27 01 	lds	r23, 0x0127
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 76 01 	call	0x2ec	; 0x2ec <fputc>
 266:	a9 cf       	rjmp	.-174    	; 0x1ba <main+0x8>

00000268 <fgetc>:
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
 26e:	3b 81       	ldd	r19, Y+3	; 0x03
 270:	30 ff       	sbrs	r19, 0
 272:	36 c0       	rjmp	.+108    	; 0x2e0 <fgetc+0x78>
 274:	36 ff       	sbrs	r19, 6
 276:	09 c0       	rjmp	.+18     	; 0x28a <fgetc+0x22>
 278:	3f 7b       	andi	r19, 0xBF	; 191
 27a:	3b 83       	std	Y+3, r19	; 0x03
 27c:	8e 81       	ldd	r24, Y+6	; 0x06
 27e:	9f 81       	ldd	r25, Y+7	; 0x07
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	9f 83       	std	Y+7, r25	; 0x07
 284:	8e 83       	std	Y+6, r24	; 0x06
 286:	2a 81       	ldd	r18, Y+2	; 0x02
 288:	29 c0       	rjmp	.+82     	; 0x2dc <fgetc+0x74>
 28a:	32 ff       	sbrs	r19, 2
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <fgetc+0x44>
 28e:	e8 81       	ld	r30, Y
 290:	f9 81       	ldd	r31, Y+1	; 0x01
 292:	80 81       	ld	r24, Z
 294:	99 27       	eor	r25, r25
 296:	87 fd       	sbrc	r24, 7
 298:	90 95       	com	r25
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	19 f4       	brne	.+6      	; 0x2a4 <fgetc+0x3c>
 29e:	30 62       	ori	r19, 0x20	; 32
 2a0:	3b 83       	std	Y+3, r19	; 0x03
 2a2:	1e c0       	rjmp	.+60     	; 0x2e0 <fgetc+0x78>
 2a4:	31 96       	adiw	r30, 0x01	; 1
 2a6:	f9 83       	std	Y+1, r31	; 0x01
 2a8:	e8 83       	st	Y, r30
 2aa:	11 c0       	rjmp	.+34     	; 0x2ce <fgetc+0x66>
 2ac:	ea 85       	ldd	r30, Y+10	; 0x0a
 2ae:	fb 85       	ldd	r31, Y+11	; 0x0b
 2b0:	ce 01       	movw	r24, r28
 2b2:	09 95       	icall
 2b4:	97 ff       	sbrs	r25, 7
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <fgetc+0x66>
 2b8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ba:	3f ef       	ldi	r19, 0xFF	; 255
 2bc:	8f 3f       	cpi	r24, 0xFF	; 255
 2be:	93 07       	cpc	r25, r19
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <fgetc+0x5e>
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <fgetc+0x60>
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	82 2b       	or	r24, r18
 2ca:	8b 83       	std	Y+3, r24	; 0x03
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <fgetc+0x78>
 2ce:	2e 81       	ldd	r18, Y+6	; 0x06
 2d0:	3f 81       	ldd	r19, Y+7	; 0x07
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	3f 83       	std	Y+7, r19	; 0x07
 2d8:	2e 83       	std	Y+6, r18	; 0x06
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <fgetc+0x7c>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	3f ef       	ldi	r19, 0xFF	; 255
 2e4:	c9 01       	movw	r24, r18
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <fputc>:
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	8c 01       	movw	r16, r24
 2f6:	eb 01       	movw	r28, r22
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	81 ff       	sbrs	r24, 1
 2fc:	1b c0       	rjmp	.+54     	; 0x334 <fputc+0x48>
 2fe:	82 ff       	sbrs	r24, 2
 300:	0d c0       	rjmp	.+26     	; 0x31c <fputc+0x30>
 302:	2e 81       	ldd	r18, Y+6	; 0x06
 304:	3f 81       	ldd	r19, Y+7	; 0x07
 306:	8c 81       	ldd	r24, Y+4	; 0x04
 308:	9d 81       	ldd	r25, Y+5	; 0x05
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	64 f4       	brge	.+24     	; 0x328 <fputc+0x3c>
 310:	e8 81       	ld	r30, Y
 312:	f9 81       	ldd	r31, Y+1	; 0x01
 314:	01 93       	st	Z+, r16
 316:	f9 83       	std	Y+1, r31	; 0x01
 318:	e8 83       	st	Y, r30
 31a:	06 c0       	rjmp	.+12     	; 0x328 <fputc+0x3c>
 31c:	e8 85       	ldd	r30, Y+8	; 0x08
 31e:	f9 85       	ldd	r31, Y+9	; 0x09
 320:	80 2f       	mov	r24, r16
 322:	09 95       	icall
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	31 f4       	brne	.+12     	; 0x334 <fputc+0x48>
 328:	8e 81       	ldd	r24, Y+6	; 0x06
 32a:	9f 81       	ldd	r25, Y+7	; 0x07
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	9f 83       	std	Y+7, r25	; 0x07
 330:	8e 83       	std	Y+6, r24	; 0x06
 332:	02 c0       	rjmp	.+4      	; 0x338 <fputc+0x4c>
 334:	0f ef       	ldi	r16, 0xFF	; 255
 336:	1f ef       	ldi	r17, 0xFF	; 255
 338:	c8 01       	movw	r24, r16
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
