
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000009b0  00000a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800132  00800132  00000a76  2**0
                  ALLOC
  3 .stab         0000204c  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cfd  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000037c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000f3  00000000  00000000  000037e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000637  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000290  00000000  00000000  00003f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000481  00000000  00000000  0000419b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  0000461c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ff  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f0  00000000  00000000  000048bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000043  00000000  00000000  00004aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  9e:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
  stdout = &uart_output;
  stdin  = &uart_input;

}

void uart_putchar(char c, FILE *stream) {
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
  if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  }
  loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putchar+0xe>
  UDR0 = c;
  bc:	10 93 c6 00 	sts	0x00C6, r17
}
  c0:	1f 91       	pop	r17
  c2:	08 95       	ret

000000c4 <uart_getchar>:


char uart_getchar(FILE *stream) {
  loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <uart_getchar>
  return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6
}
  d0:	08 95       	ret

000000d2 <io_init>:
//void demo_full_sequence(); ()// TODO align sequence in a function


void io_init (void) {
  //1 = output, 0 = input5
  DDRB = _BV(PUL) | _BV(DIR) | _BV(ENA) | _BV(LED);
  d2:	8c e3       	ldi	r24, 0x3C	; 60
  d4:	84 b9       	out	0x04, r24	; 4
  //     PUL-Portb2 DIR-Portb3 ENA-Portb4 LED-light port 5 (13)
  DDRD = _BV(OPTO);
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	8a b9       	out	0x0a, r24	; 10
  //     Pin 2 of the arduino
  //     */
}
  da:	08 95       	ret

000000dc <pwm_init>:

void pwm_init(void) {
  TCCR1A = _BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	80 93 80 00 	sts	0x0080, r24

  //  (0x81) TCCR1B ICNC1 ICES1 – WGM13 WGM12 CS12 CS11 CS10 136
  //  (0x80) TCCR1A COM1A1 COM1A0 COM1B1 COM1B0 – – WGM11 WGM10 134

  OCR1AH = 0x00; //this controls the higher half of the 16 bit "TOP" value
  e2:	10 92 89 00 	sts	0x0089, r1


  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	80 93 81 00 	sts	0x0081, r24
  1 0 0 clkI/O/256 (From prescaler)
  1 0 1 clkI/O/1024 (From prescaler)
  1 1 0 External clock source on T1 pin. Clock on falling edge.
  1 1 1 External clock source on T1 pin. Clock on rising edgputchar
  */
}
  ec:	08 95       	ret

000000ee <find_first_well>:

}

  // TODO add control method for customization

void find_first_well() {
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  // TODO find the pwm speed for Servo.h

  uint8_t i;
  uint8_t j;

  pwm_init();
  fa:	0e 94 6e 00 	call	0xdc	; 0xdc <pwm_init>

  OCR1AH = 0x50;
  fe:	09 e8       	ldi	r16, 0x89	; 137
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	80 e5       	ldi	r24, 0x50	; 80
 104:	d8 01       	movw	r26, r16
 106:	8c 93       	st	X, r24
  OCR1AL = 0xff;
 108:	c8 e8       	ldi	r28, 0x88	; 136
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	88 83       	st	Y, r24

  PORTB |= _BV(ENA); // ON the enable bit
 110:	2c 9a       	sbi	0x05, 4	; 5
  uint8_t j_high = 77;
  uint8_t j_low  = 0;
  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  TCCR1B = _BV(WGM02) | _BV(CS11); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
 112:	81 e8       	ldi	r24, 0x81	; 129
 114:	e8 2e       	mov	r14, r24
 116:	f1 2c       	mov	r15, r1
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	f7 01       	movw	r30, r14
 11c:	80 83       	st	Z, r24

    OCR1AH = 78;
 11e:	8e e4       	ldi	r24, 0x4E	; 78
 120:	8c 93       	st	X, r24
    OCR1AL = 30;
 122:	8e e1       	ldi	r24, 0x1E	; 30
 124:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8a ea       	ldi	r24, 0xAA	; 170
 128:	96 ee       	ldi	r25, 0xE6	; 230
 12a:	a6 e9       	ldi	r26, 0x96	; 150
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	a0 40       	sbci	r26, 0x00	; 0
 134:	b0 40       	sbci	r27, 0x00	; 0
 136:	d9 f7       	brne	.-10     	; 0x12e <find_first_well+0x40>
 138:	00 00       	nop
      _delay_ms(time_delay);
      printf("Speed is j=%u  i=%u \n", j, i);
 13a:	00 d0       	rcall	.+0      	; 0x13c <find_first_well+0x4e>
 13c:	00 d0       	rcall	.+0      	; 0x13e <find_first_well+0x50>
 13e:	00 d0       	rcall	.+0      	; 0x140 <find_first_well+0x52>
 140:	ed b7       	in	r30, 0x3d	; 61
 142:	fe b7       	in	r31, 0x3e	; 62
 144:	31 96       	adiw	r30, 0x01	; 1
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	ad b7       	in	r26, 0x3d	; 61
 14c:	be b7       	in	r27, 0x3e	; 62
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	9c 93       	st	X, r25
 152:	8e 93       	st	-X, r24
 154:	11 97       	sbiw	r26, 0x01	; 1
 156:	12 82       	std	Z+2, r1	; 0x02
 158:	13 82       	std	Z+3, r1	; 0x03
 15a:	14 82       	std	Z+4, r1	; 0x04
 15c:	15 82       	std	Z+5, r1	; 0x05
 15e:	0e 94 2f 02 	call	0x45e	; 0x45e <printf>
  
  OCR1AH = j_high;
 162:	8d e4       	ldi	r24, 0x4D	; 77
 164:	f8 01       	movw	r30, r16
 166:	80 83       	st	Z, r24
  OCR1AL = 120;
 168:	88 e7       	ldi	r24, 0x78	; 120
 16a:	88 83       	st	Y, r24
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	9f e4       	ldi	r25, 0x4F	; 79
 170:	a3 ec       	ldi	r26, 0xC3	; 195
 172:	81 50       	subi	r24, 0x01	; 1
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	a0 40       	sbci	r26, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <find_first_well+0x84>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <find_first_well+0x8e>
 17c:	00 00       	nop
  _delay_ms(4000);
  PORTD &= ~_BV(ENA);// OFF the enable bit
 17e:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 180:	e0 e8       	ldi	r30, 0x80	; 128
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	80 83       	st	Z, r24

  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	d7 01       	movw	r26, r14
 18e:	8c 93       	st	X, r24
 190:	ed b7       	in	r30, 0x3d	; 61
 192:	fe b7       	in	r31, 0x3e	; 62
 194:	36 96       	adiw	r30, 0x06	; 6
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	fe bf       	out	0x3e, r31	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	ed bf       	out	0x3d, r30	; 61

  }
*/


}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <demo_centrifuge_stage>:

void demo_centrifuge_stage() {
  uint8_t i;
  uint8_t j;

  pwm_init();
 1ae:	0e 94 6e 00 	call	0xdc	; 0xdc <pwm_init>

  OCR1AH = 0x50;
 1b2:	80 e5       	ldi	r24, 0x50	; 80
 1b4:	80 93 89 00 	sts	0x0089, r24
  OCR1AL = 0xff;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	80 93 88 00 	sts	0x0088, r24

  PORTB |= _BV(ENA); // ON the enable bit
 1be:	2c 9a       	sbi	0x05, 4	; 5
  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for (j = j_high ; j > j_low ; j--) {
    OCR1AH = j;
 1c0:	80 93 89 00 	sts	0x0089, r24
    for (i = i_high; i > i_low ; i--) {
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
      OCR1AL = i;
 1c6:	90 93 88 00 	sts	0x0088, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	a7 ec       	ldi	r26, 0xC7	; 199
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	11 97       	sbiw	r26, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <demo_centrifuge_stage+0x20>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <demo_centrifuge_stage+0x26>
 1d4:	00 00       	nop
  uint8_t i_low  = 0;

  int times;
  for (j = j_high ; j > j_low ; j--) {
    OCR1AH = j;
    for (i = i_high; i > i_low ; i--) {
 1d6:	91 50       	subi	r25, 0x01	; 1
 1d8:	b1 f7       	brne	.-20     	; 0x1c6 <demo_centrifuge_stage+0x18>

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for (j = j_high ; j > j_low ; j--) {
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	88 32       	cpi	r24, 0x28	; 40
 1de:	81 f7       	brne	.-32     	; 0x1c0 <demo_centrifuge_stage+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	9f e4       	ldi	r25, 0x4F	; 79
 1e4:	a3 ec       	ldi	r26, 0xC3	; 195
 1e6:	81 50       	subi	r24, 0x01	; 1
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	a0 40       	sbci	r26, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <demo_centrifuge_stage+0x38>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <demo_centrifuge_stage+0x42>
 1f0:	00 00       	nop
      OCR1AL = i;
      _delay_us(time_delay);
    }
  }
  _delay_ms(4000);
  PORTD &= ~_BV(ENA);// OFF the enable bit
 1f2:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 1f4:	80 91 80 00 	lds	r24, 0x0080
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	80 93 80 00 	sts	0x0080, r24

}
 1fe:	08 95       	ret

00000200 <shake_sequence>:
     }
     */
  return 0;
}

void shake_sequence(uint8_t number) {
 200:	df 93       	push	r29
 202:	cf 93       	push	r28
 204:	0f 92       	push	r0
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
  uint8_t i;
  uint8_t j;

  pwm_init();
 20a:	89 83       	std	Y+1, r24	; 0x01
 20c:	0e 94 6e 00 	call	0xdc	; 0xdc <pwm_init>

  OCR1AH = 0x50;
 210:	90 e5       	ldi	r25, 0x50	; 80
 212:	90 93 89 00 	sts	0x0089, r25
  OCR1AL = 0xff;
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	90 93 88 00 	sts	0x0088, r25

  PORTB |= _BV(ENA); // ON the enable bit
 21c:	2c 9a       	sbi	0x05, 4	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	90 e0       	ldi	r25, 0x00	; 0
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 226:	68 e0       	ldi	r22, 0x08	; 8

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 228:	23 c0       	rjmp	.+70     	; 0x270 <shake_sequence+0x70>
 22a:	4f ef       	ldi	r20, 0xFF	; 255
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
 22c:	40 93 89 00 	sts	0x0089, r20
      for (i = i_high; i > i_low ; i--) {
 230:	5f ef       	ldi	r21, 0xFF	; 255
        OCR1AL = i;
 232:	50 93 88 00 	sts	0x0088, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	75 e3       	ldi	r23, 0x35	; 53
 238:	7a 95       	dec	r23
 23a:	f1 f7       	brne	.-4      	; 0x238 <shake_sequence+0x38>
 23c:	00 00       	nop
  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
      for (i = i_high; i > i_low ; i--) {
 23e:	51 50       	subi	r21, 0x01	; 1
 240:	c1 f7       	brne	.-16     	; 0x232 <shake_sequence+0x32>
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
 242:	41 50       	subi	r20, 0x01	; 1
 244:	42 33       	cpi	r20, 0x32	; 50
 246:	91 f7       	brne	.-28     	; 0x22c <shake_sequence+0x2c>
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
 248:	40 93 89 00 	sts	0x0089, r20
      for (i = i_low; i < i_high; i++) {
 24c:	50 e0       	ldi	r21, 0x00	; 0
        OCR1AL = i;
 24e:	50 93 88 00 	sts	0x0088, r21
 252:	e5 e3       	ldi	r30, 0x35	; 53
 254:	ea 95       	dec	r30
 256:	f1 f7       	brne	.-4      	; 0x254 <shake_sequence+0x54>
 258:	00 00       	nop
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
      for (i = i_low; i < i_high; i++) {
 25a:	5f 5f       	subi	r21, 0xFF	; 255
 25c:	5f 3f       	cpi	r21, 0xFF	; 255
 25e:	b9 f7       	brne	.-18     	; 0x24e <shake_sequence+0x4e>
      for (i = i_high; i > i_low ; i--) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	4f 3f       	cpi	r20, 0xFF	; 255
 264:	89 f7       	brne	.-30     	; 0x248 <shake_sequence+0x48>
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 266:	45 b1       	in	r20, 0x05	; 5
 268:	46 27       	eor	r20, r22
 26a:	45 b9       	out	0x05, r20	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 26c:	2f 5f       	subi	r18, 0xFF	; 255
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	28 17       	cp	r18, r24
 272:	39 07       	cpc	r19, r25
 274:	d4 f2       	brlt	.-76     	; 0x22a <shake_sequence+0x2a>
      }
    }
    PORTB ^= _BV(DIR);

  }
  PORTD &= ~_BV(ENA);// OFF the enable bit
 276:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 278:	80 91 80 00 	lds	r24, 0x0080
 27c:	8f 7e       	andi	r24, 0xEF	; 239
 27e:	80 93 80 00 	sts	0x0080, r24
}
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <set_baud>:
  */
}


void set_baud(void) {
  UBRR0H = (BRC >> 8);
 28a:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = BRC;
 28e:	87 e6       	ldi	r24, 0x67	; 103
 290:	80 93 c4 00 	sts	0x00C4, r24

  //enables rx and tx, page 183 example from documentation
  UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0 ) | (1 << TXCIE0);
 294:	88 ed       	ldi	r24, 0xD8	; 216
 296:	80 93 c1 00 	sts	0x00C1, r24

  //198 of documentation, these two bits make it 8-bit
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	80 93 c2 00 	sts	0x00C2, r24

  //since we don't use 2x
  UCSR0A &= ~(_BV(U2X0));
 2a0:	e0 ec       	ldi	r30, 0xC0	; 192
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	80 83       	st	Z, r24

  //redirecting standard out and in to UART -- very clever tuupola
  stdout = &uart_output;
 2aa:	86 e1       	ldi	r24, 0x16	; 22
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	90 93 3d 01 	sts	0x013D, r25
 2b2:	80 93 3c 01 	sts	0x013C, r24
  stdin  = &uart_input;
 2b6:	84 e2       	ldi	r24, 0x24	; 36
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	90 93 3b 01 	sts	0x013B, r25
 2be:	80 93 3a 01 	sts	0x013A, r24

}
 2c2:	08 95       	ret

000002c4 <main>:
void demo_centrifuge_stage(void); // TODO add control method for customization
//void demo_full_sequence(void); // TODO align sequence in a function
//======================

int main (void) {
  io_init(); //Setup IO pins and defaults
 2c4:	0e 94 69 00 	call	0xd2	; 0xd2 <io_init>
  set_baud();
 2c8:	0e 94 45 01 	call	0x28a	; 0x28a <set_baud>

  char input;

  while (1) {

    input = getchar();
 2cc:	80 91 3a 01 	lds	r24, 0x013A
 2d0:	90 91 3b 01 	lds	r25, 0x013B
 2d4:	0e 94 c1 01 	call	0x382	; 0x382 <fgetc>

    //first stage will be a simple switch case`


    switch (input) {
 2d8:	83 33       	cpi	r24, 0x33	; 51
 2da:	31 f1       	breq	.+76     	; 0x328 <main+0x64>
 2dc:	84 33       	cpi	r24, 0x34	; 52
 2de:	30 f4       	brcc	.+12     	; 0x2ec <main+0x28>
 2e0:	81 33       	cpi	r24, 0x31	; 49
 2e2:	59 f0       	breq	.+22     	; 0x2fa <main+0x36>
 2e4:	82 33       	cpi	r24, 0x32	; 50
 2e6:	09 f0       	breq	.+2      	; 0x2ea <main+0x26>
 2e8:	43 c0       	rjmp	.+134    	; 0x370 <main+0xac>
 2ea:	13 c0       	rjmp	.+38     	; 0x312 <main+0x4e>
 2ec:	85 33       	cpi	r24, 0x35	; 53
 2ee:	81 f1       	breq	.+96     	; 0x350 <main+0x8c>
 2f0:	85 33       	cpi	r24, 0x35	; 53
 2f2:	28 f1       	brcs	.+74     	; 0x33e <main+0x7a>
 2f4:	86 33       	cpi	r24, 0x36	; 54
 2f6:	e1 f5       	brne	.+120    	; 0x370 <main+0xac>
 2f8:	33 c0       	rjmp	.+102    	; 0x360 <main+0x9c>
      case '1':
        //shake sequence
        PORTB |= _BV(ENA); // ON the enable bit
 2fa:	2c 9a       	sbi	0x05, 4	; 5
        shake_sequence(2); // TODO shake twice -- can mod this later for custom shakes
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 00 01 	call	0x200	; 0x200 <shake_sequence>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 302:	2c 98       	cbi	0x05, 4	; 5
        putchar('1');
 304:	60 91 3c 01 	lds	r22, 0x013C
 308:	70 91 3d 01 	lds	r23, 0x013D
 30c:	81 e3       	ldi	r24, 0x31	; 49
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	35 c0       	rjmp	.+106    	; 0x37c <main+0xb8>
        break;
      case '2':
        //ramp sequence
        PORTB |= _BV(ENA); // ON the enable bit
 312:	2c 9a       	sbi	0x05, 4	; 5
        demo_centrifuge_stage(); // TODO add control method for customization
 314:	0e 94 d7 00 	call	0x1ae	; 0x1ae <demo_centrifuge_stage>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 318:	2c 98       	cbi	0x05, 4	; 5
        putchar('2');
 31a:	60 91 3c 01 	lds	r22, 0x013C
 31e:	70 91 3d 01 	lds	r23, 0x013D
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2a c0       	rjmp	.+84     	; 0x37c <main+0xb8>
        break;
      case '3':
        //recording_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 328:	2c 9a       	sbi	0x05, 4	; 5
        find_first_well(); // TODO find the pwm speed for Servo.h 
 32a:	0e 94 77 00 	call	0xee	; 0xee <find_first_well>
        //and emulate to avoid needing to perform trial and error
        PORTB &= ~_BV(ENA);// OFF the enable bit
 32e:	2c 98       	cbi	0x05, 4	; 5
        putchar('3');
 330:	60 91 3c 01 	lds	r22, 0x013C
 334:	70 91 3d 01 	lds	r23, 0x013D
 338:	83 e3       	ldi	r24, 0x33	; 51
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	1f c0       	rjmp	.+62     	; 0x37c <main+0xb8>
        break;
      case '4':
        //full_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 33e:	2c 9a       	sbi	0x05, 4	; 5
        //demo_full_sequence();// TODO create full sequence
        PORTB &= ~_BV(ENA);// OFF the enable bit
 340:	2c 98       	cbi	0x05, 4	; 5
        putchar('4');
 342:	60 91 3c 01 	lds	r22, 0x013C
 346:	70 91 3d 01 	lds	r23, 0x013D
 34a:	84 e3       	ldi	r24, 0x34	; 52
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	16 c0       	rjmp	.+44     	; 0x37c <main+0xb8>
        break;
      case '5':
        //LED ON
        PORTB |= _BV(LED); // TODO Test LED ON
 350:	2d 9a       	sbi	0x05, 5	; 5
        putchar('5');
 352:	60 91 3c 01 	lds	r22, 0x013C
 356:	70 91 3d 01 	lds	r23, 0x013D
 35a:	85 e3       	ldi	r24, 0x35	; 53
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e c0       	rjmp	.+28     	; 0x37c <main+0xb8>
        break;
      case '6':
        //LED OFF
        PORTB &= ~_BV(LED); // TODO Test LED OFF
 360:	2d 98       	cbi	0x05, 5	; 5
        putchar('6');
 362:	60 91 3c 01 	lds	r22, 0x013C
 366:	70 91 3d 01 	lds	r23, 0x013D
 36a:	86 e3       	ldi	r24, 0x36	; 54
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	06 c0       	rjmp	.+12     	; 0x37c <main+0xb8>
        break;
      default:
        putchar('a');
 370:	60 91 3c 01 	lds	r22, 0x013C
 374:	70 91 3d 01 	lds	r23, 0x013D
 378:	81 e6       	ldi	r24, 0x61	; 97
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 380:	a5 cf       	rjmp	.-182    	; 0x2cc <main+0x8>

00000382 <fgetc>:
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
 388:	3b 81       	ldd	r19, Y+3	; 0x03
 38a:	30 ff       	sbrs	r19, 0
 38c:	36 c0       	rjmp	.+108    	; 0x3fa <fgetc+0x78>
 38e:	36 ff       	sbrs	r19, 6
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <fgetc+0x22>
 392:	3f 7b       	andi	r19, 0xBF	; 191
 394:	3b 83       	std	Y+3, r19	; 0x03
 396:	8e 81       	ldd	r24, Y+6	; 0x06
 398:	9f 81       	ldd	r25, Y+7	; 0x07
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	9f 83       	std	Y+7, r25	; 0x07
 39e:	8e 83       	std	Y+6, r24	; 0x06
 3a0:	2a 81       	ldd	r18, Y+2	; 0x02
 3a2:	29 c0       	rjmp	.+82     	; 0x3f6 <fgetc+0x74>
 3a4:	32 ff       	sbrs	r19, 2
 3a6:	0f c0       	rjmp	.+30     	; 0x3c6 <fgetc+0x44>
 3a8:	e8 81       	ld	r30, Y
 3aa:	f9 81       	ldd	r31, Y+1	; 0x01
 3ac:	80 81       	ld	r24, Z
 3ae:	99 27       	eor	r25, r25
 3b0:	87 fd       	sbrc	r24, 7
 3b2:	90 95       	com	r25
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	19 f4       	brne	.+6      	; 0x3be <fgetc+0x3c>
 3b8:	30 62       	ori	r19, 0x20	; 32
 3ba:	3b 83       	std	Y+3, r19	; 0x03
 3bc:	1e c0       	rjmp	.+60     	; 0x3fa <fgetc+0x78>
 3be:	31 96       	adiw	r30, 0x01	; 1
 3c0:	f9 83       	std	Y+1, r31	; 0x01
 3c2:	e8 83       	st	Y, r30
 3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <fgetc+0x66>
 3c6:	ea 85       	ldd	r30, Y+10	; 0x0a
 3c8:	fb 85       	ldd	r31, Y+11	; 0x0b
 3ca:	ce 01       	movw	r24, r28
 3cc:	09 95       	icall
 3ce:	97 ff       	sbrs	r25, 7
 3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <fgetc+0x66>
 3d2:	2b 81       	ldd	r18, Y+3	; 0x03
 3d4:	3f ef       	ldi	r19, 0xFF	; 255
 3d6:	8f 3f       	cpi	r24, 0xFF	; 255
 3d8:	93 07       	cpc	r25, r19
 3da:	11 f4       	brne	.+4      	; 0x3e0 <fgetc+0x5e>
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <fgetc+0x60>
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	82 2b       	or	r24, r18
 3e4:	8b 83       	std	Y+3, r24	; 0x03
 3e6:	09 c0       	rjmp	.+18     	; 0x3fa <fgetc+0x78>
 3e8:	2e 81       	ldd	r18, Y+6	; 0x06
 3ea:	3f 81       	ldd	r19, Y+7	; 0x07
 3ec:	2f 5f       	subi	r18, 0xFF	; 255
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	3f 83       	std	Y+7, r19	; 0x07
 3f2:	2e 83       	std	Y+6, r18	; 0x06
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <fgetc+0x7c>
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	3f ef       	ldi	r19, 0xFF	; 255
 3fe:	c9 01       	movw	r24, r18
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <fputc>:
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	8c 01       	movw	r16, r24
 410:	eb 01       	movw	r28, r22
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	81 ff       	sbrs	r24, 1
 416:	1b c0       	rjmp	.+54     	; 0x44e <fputc+0x48>
 418:	82 ff       	sbrs	r24, 2
 41a:	0d c0       	rjmp	.+26     	; 0x436 <fputc+0x30>
 41c:	2e 81       	ldd	r18, Y+6	; 0x06
 41e:	3f 81       	ldd	r19, Y+7	; 0x07
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	9d 81       	ldd	r25, Y+5	; 0x05
 424:	28 17       	cp	r18, r24
 426:	39 07       	cpc	r19, r25
 428:	64 f4       	brge	.+24     	; 0x442 <fputc+0x3c>
 42a:	e8 81       	ld	r30, Y
 42c:	f9 81       	ldd	r31, Y+1	; 0x01
 42e:	01 93       	st	Z+, r16
 430:	f9 83       	std	Y+1, r31	; 0x01
 432:	e8 83       	st	Y, r30
 434:	06 c0       	rjmp	.+12     	; 0x442 <fputc+0x3c>
 436:	e8 85       	ldd	r30, Y+8	; 0x08
 438:	f9 85       	ldd	r31, Y+9	; 0x09
 43a:	80 2f       	mov	r24, r16
 43c:	09 95       	icall
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	31 f4       	brne	.+12     	; 0x44e <fputc+0x48>
 442:	8e 81       	ldd	r24, Y+6	; 0x06
 444:	9f 81       	ldd	r25, Y+7	; 0x07
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	9f 83       	std	Y+7, r25	; 0x07
 44a:	8e 83       	std	Y+6, r24	; 0x06
 44c:	02 c0       	rjmp	.+4      	; 0x452 <fputc+0x4c>
 44e:	0f ef       	ldi	r16, 0xFF	; 255
 450:	1f ef       	ldi	r17, 0xFF	; 255
 452:	c8 01       	movw	r24, r16
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <printf>:
 45e:	a0 e0       	ldi	r26, 0x00	; 0
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f2 e0       	ldi	r31, 0x02	; 2
 466:	0c 94 af 04 	jmp	0x95e	; 0x95e <__prologue_saves__+0x20>
 46a:	fe 01       	movw	r30, r28
 46c:	35 96       	adiw	r30, 0x05	; 5
 46e:	61 91       	ld	r22, Z+
 470:	71 91       	ld	r23, Z+
 472:	80 91 3c 01 	lds	r24, 0x013C
 476:	90 91 3d 01 	lds	r25, 0x013D
 47a:	af 01       	movw	r20, r30
 47c:	0e 94 44 02 	call	0x488	; 0x488 <vfprintf>
 480:	20 96       	adiw	r28, 0x00	; 0
 482:	e2 e0       	ldi	r30, 0x02	; 2
 484:	0c 94 cb 04 	jmp	0x996	; 0x996 <__epilogue_restores__+0x20>

00000488 <vfprintf>:
 488:	ac e0       	ldi	r26, 0x0C	; 12
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	ea e4       	ldi	r30, 0x4A	; 74
 48e:	f2 e0       	ldi	r31, 0x02	; 2
 490:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__prologue_saves__>
 494:	6c 01       	movw	r12, r24
 496:	1b 01       	movw	r2, r22
 498:	8a 01       	movw	r16, r20
 49a:	fc 01       	movw	r30, r24
 49c:	17 82       	std	Z+7, r1	; 0x07
 49e:	16 82       	std	Z+6, r1	; 0x06
 4a0:	83 81       	ldd	r24, Z+3	; 0x03
 4a2:	81 ff       	sbrs	r24, 1
 4a4:	d1 c1       	rjmp	.+930    	; 0x848 <vfprintf+0x3c0>
 4a6:	2e 01       	movw	r4, r28
 4a8:	08 94       	sec
 4aa:	41 1c       	adc	r4, r1
 4ac:	51 1c       	adc	r5, r1
 4ae:	f6 01       	movw	r30, r12
 4b0:	93 81       	ldd	r25, Z+3	; 0x03
 4b2:	f1 01       	movw	r30, r2
 4b4:	93 fd       	sbrc	r25, 3
 4b6:	85 91       	lpm	r24, Z+
 4b8:	93 ff       	sbrs	r25, 3
 4ba:	81 91       	ld	r24, Z+
 4bc:	1f 01       	movw	r2, r30
 4be:	88 23       	and	r24, r24
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <vfprintf+0x3c>
 4c2:	be c1       	rjmp	.+892    	; 0x840 <vfprintf+0x3b8>
 4c4:	85 32       	cpi	r24, 0x25	; 37
 4c6:	39 f4       	brne	.+14     	; 0x4d6 <vfprintf+0x4e>
 4c8:	93 fd       	sbrc	r25, 3
 4ca:	85 91       	lpm	r24, Z+
 4cc:	93 ff       	sbrs	r25, 3
 4ce:	81 91       	ld	r24, Z+
 4d0:	1f 01       	movw	r2, r30
 4d2:	85 32       	cpi	r24, 0x25	; 37
 4d4:	29 f4       	brne	.+10     	; 0x4e0 <vfprintf+0x58>
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	b6 01       	movw	r22, r12
 4da:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 4de:	e7 cf       	rjmp	.-50     	; 0x4ae <vfprintf+0x26>
 4e0:	ee 24       	eor	r14, r14
 4e2:	ff 24       	eor	r15, r15
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	20 32       	cpi	r18, 0x20	; 32
 4e8:	b0 f4       	brcc	.+44     	; 0x516 <vfprintf+0x8e>
 4ea:	8b 32       	cpi	r24, 0x2B	; 43
 4ec:	69 f0       	breq	.+26     	; 0x508 <vfprintf+0x80>
 4ee:	8c 32       	cpi	r24, 0x2C	; 44
 4f0:	28 f4       	brcc	.+10     	; 0x4fc <vfprintf+0x74>
 4f2:	80 32       	cpi	r24, 0x20	; 32
 4f4:	51 f0       	breq	.+20     	; 0x50a <vfprintf+0x82>
 4f6:	83 32       	cpi	r24, 0x23	; 35
 4f8:	71 f4       	brne	.+28     	; 0x516 <vfprintf+0x8e>
 4fa:	0b c0       	rjmp	.+22     	; 0x512 <vfprintf+0x8a>
 4fc:	8d 32       	cpi	r24, 0x2D	; 45
 4fe:	39 f0       	breq	.+14     	; 0x50e <vfprintf+0x86>
 500:	80 33       	cpi	r24, 0x30	; 48
 502:	49 f4       	brne	.+18     	; 0x516 <vfprintf+0x8e>
 504:	21 60       	ori	r18, 0x01	; 1
 506:	2c c0       	rjmp	.+88     	; 0x560 <vfprintf+0xd8>
 508:	22 60       	ori	r18, 0x02	; 2
 50a:	24 60       	ori	r18, 0x04	; 4
 50c:	29 c0       	rjmp	.+82     	; 0x560 <vfprintf+0xd8>
 50e:	28 60       	ori	r18, 0x08	; 8
 510:	27 c0       	rjmp	.+78     	; 0x560 <vfprintf+0xd8>
 512:	20 61       	ori	r18, 0x10	; 16
 514:	25 c0       	rjmp	.+74     	; 0x560 <vfprintf+0xd8>
 516:	27 fd       	sbrc	r18, 7
 518:	2c c0       	rjmp	.+88     	; 0x572 <vfprintf+0xea>
 51a:	38 2f       	mov	r19, r24
 51c:	30 53       	subi	r19, 0x30	; 48
 51e:	3a 30       	cpi	r19, 0x0A	; 10
 520:	98 f4       	brcc	.+38     	; 0x548 <vfprintf+0xc0>
 522:	26 ff       	sbrs	r18, 6
 524:	08 c0       	rjmp	.+16     	; 0x536 <vfprintf+0xae>
 526:	8e 2d       	mov	r24, r14
 528:	88 0f       	add	r24, r24
 52a:	e8 2e       	mov	r14, r24
 52c:	ee 0c       	add	r14, r14
 52e:	ee 0c       	add	r14, r14
 530:	e8 0e       	add	r14, r24
 532:	e3 0e       	add	r14, r19
 534:	15 c0       	rjmp	.+42     	; 0x560 <vfprintf+0xd8>
 536:	8f 2d       	mov	r24, r15
 538:	88 0f       	add	r24, r24
 53a:	f8 2e       	mov	r15, r24
 53c:	ff 0c       	add	r15, r15
 53e:	ff 0c       	add	r15, r15
 540:	f8 0e       	add	r15, r24
 542:	f3 0e       	add	r15, r19
 544:	20 62       	ori	r18, 0x20	; 32
 546:	0c c0       	rjmp	.+24     	; 0x560 <vfprintf+0xd8>
 548:	8e 32       	cpi	r24, 0x2E	; 46
 54a:	21 f4       	brne	.+8      	; 0x554 <vfprintf+0xcc>
 54c:	26 fd       	sbrc	r18, 6
 54e:	78 c1       	rjmp	.+752    	; 0x840 <vfprintf+0x3b8>
 550:	20 64       	ori	r18, 0x40	; 64
 552:	06 c0       	rjmp	.+12     	; 0x560 <vfprintf+0xd8>
 554:	8c 36       	cpi	r24, 0x6C	; 108
 556:	11 f4       	brne	.+4      	; 0x55c <vfprintf+0xd4>
 558:	20 68       	ori	r18, 0x80	; 128
 55a:	02 c0       	rjmp	.+4      	; 0x560 <vfprintf+0xd8>
 55c:	88 36       	cpi	r24, 0x68	; 104
 55e:	49 f4       	brne	.+18     	; 0x572 <vfprintf+0xea>
 560:	f1 01       	movw	r30, r2
 562:	93 fd       	sbrc	r25, 3
 564:	85 91       	lpm	r24, Z+
 566:	93 ff       	sbrs	r25, 3
 568:	81 91       	ld	r24, Z+
 56a:	1f 01       	movw	r2, r30
 56c:	88 23       	and	r24, r24
 56e:	09 f0       	breq	.+2      	; 0x572 <vfprintf+0xea>
 570:	ba cf       	rjmp	.-140    	; 0x4e6 <vfprintf+0x5e>
 572:	98 2f       	mov	r25, r24
 574:	95 54       	subi	r25, 0x45	; 69
 576:	93 30       	cpi	r25, 0x03	; 3
 578:	18 f0       	brcs	.+6      	; 0x580 <vfprintf+0xf8>
 57a:	90 52       	subi	r25, 0x20	; 32
 57c:	93 30       	cpi	r25, 0x03	; 3
 57e:	28 f4       	brcc	.+10     	; 0x58a <vfprintf+0x102>
 580:	0c 5f       	subi	r16, 0xFC	; 252
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	ff e3       	ldi	r31, 0x3F	; 63
 586:	f9 83       	std	Y+1, r31	; 0x01
 588:	0d c0       	rjmp	.+26     	; 0x5a4 <vfprintf+0x11c>
 58a:	83 36       	cpi	r24, 0x63	; 99
 58c:	31 f0       	breq	.+12     	; 0x59a <vfprintf+0x112>
 58e:	83 37       	cpi	r24, 0x73	; 115
 590:	71 f0       	breq	.+28     	; 0x5ae <vfprintf+0x126>
 592:	83 35       	cpi	r24, 0x53	; 83
 594:	09 f0       	breq	.+2      	; 0x598 <vfprintf+0x110>
 596:	60 c0       	rjmp	.+192    	; 0x658 <vfprintf+0x1d0>
 598:	22 c0       	rjmp	.+68     	; 0x5de <vfprintf+0x156>
 59a:	f8 01       	movw	r30, r16
 59c:	80 81       	ld	r24, Z
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	0e 5f       	subi	r16, 0xFE	; 254
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	42 01       	movw	r8, r4
 5a6:	71 e0       	ldi	r23, 0x01	; 1
 5a8:	a7 2e       	mov	r10, r23
 5aa:	b1 2c       	mov	r11, r1
 5ac:	16 c0       	rjmp	.+44     	; 0x5da <vfprintf+0x152>
 5ae:	62 e0       	ldi	r22, 0x02	; 2
 5b0:	66 2e       	mov	r6, r22
 5b2:	71 2c       	mov	r7, r1
 5b4:	60 0e       	add	r6, r16
 5b6:	71 1e       	adc	r7, r17
 5b8:	f8 01       	movw	r30, r16
 5ba:	80 80       	ld	r8, Z
 5bc:	91 80       	ldd	r9, Z+1	; 0x01
 5be:	26 ff       	sbrs	r18, 6
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <vfprintf+0x140>
 5c2:	6e 2d       	mov	r22, r14
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <vfprintf+0x144>
 5c8:	6f ef       	ldi	r22, 0xFF	; 255
 5ca:	7f ef       	ldi	r23, 0xFF	; 255
 5cc:	c4 01       	movw	r24, r8
 5ce:	2c 87       	std	Y+12, r18	; 0x0c
 5d0:	0e 94 36 04 	call	0x86c	; 0x86c <strnlen>
 5d4:	5c 01       	movw	r10, r24
 5d6:	83 01       	movw	r16, r6
 5d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 5da:	2f 77       	andi	r18, 0x7F	; 127
 5dc:	17 c0       	rjmp	.+46     	; 0x60c <vfprintf+0x184>
 5de:	52 e0       	ldi	r21, 0x02	; 2
 5e0:	65 2e       	mov	r6, r21
 5e2:	71 2c       	mov	r7, r1
 5e4:	60 0e       	add	r6, r16
 5e6:	71 1e       	adc	r7, r17
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 80       	ld	r8, Z
 5ec:	91 80       	ldd	r9, Z+1	; 0x01
 5ee:	26 ff       	sbrs	r18, 6
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <vfprintf+0x170>
 5f2:	6e 2d       	mov	r22, r14
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <vfprintf+0x174>
 5f8:	6f ef       	ldi	r22, 0xFF	; 255
 5fa:	7f ef       	ldi	r23, 0xFF	; 255
 5fc:	c4 01       	movw	r24, r8
 5fe:	2c 87       	std	Y+12, r18	; 0x0c
 600:	0e 94 2b 04 	call	0x856	; 0x856 <strnlen_P>
 604:	5c 01       	movw	r10, r24
 606:	2c 85       	ldd	r18, Y+12	; 0x0c
 608:	20 68       	ori	r18, 0x80	; 128
 60a:	83 01       	movw	r16, r6
 60c:	23 fd       	sbrc	r18, 3
 60e:	20 c0       	rjmp	.+64     	; 0x650 <vfprintf+0x1c8>
 610:	08 c0       	rjmp	.+16     	; 0x622 <vfprintf+0x19a>
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	b6 01       	movw	r22, r12
 618:	2c 87       	std	Y+12, r18	; 0x0c
 61a:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 61e:	fa 94       	dec	r15
 620:	2c 85       	ldd	r18, Y+12	; 0x0c
 622:	8f 2d       	mov	r24, r15
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	a8 16       	cp	r10, r24
 628:	b9 06       	cpc	r11, r25
 62a:	98 f3       	brcs	.-26     	; 0x612 <vfprintf+0x18a>
 62c:	11 c0       	rjmp	.+34     	; 0x650 <vfprintf+0x1c8>
 62e:	f4 01       	movw	r30, r8
 630:	27 fd       	sbrc	r18, 7
 632:	85 91       	lpm	r24, Z+
 634:	27 ff       	sbrs	r18, 7
 636:	81 91       	ld	r24, Z+
 638:	4f 01       	movw	r8, r30
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	b6 01       	movw	r22, r12
 63e:	2c 87       	std	Y+12, r18	; 0x0c
 640:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 644:	2c 85       	ldd	r18, Y+12	; 0x0c
 646:	f1 10       	cpse	r15, r1
 648:	fa 94       	dec	r15
 64a:	08 94       	sec
 64c:	a1 08       	sbc	r10, r1
 64e:	b1 08       	sbc	r11, r1
 650:	a1 14       	cp	r10, r1
 652:	b1 04       	cpc	r11, r1
 654:	61 f7       	brne	.-40     	; 0x62e <vfprintf+0x1a6>
 656:	f1 c0       	rjmp	.+482    	; 0x83a <vfprintf+0x3b2>
 658:	84 36       	cpi	r24, 0x64	; 100
 65a:	11 f0       	breq	.+4      	; 0x660 <vfprintf+0x1d8>
 65c:	89 36       	cpi	r24, 0x69	; 105
 65e:	49 f5       	brne	.+82     	; 0x6b2 <vfprintf+0x22a>
 660:	27 ff       	sbrs	r18, 7
 662:	08 c0       	rjmp	.+16     	; 0x674 <vfprintf+0x1ec>
 664:	f8 01       	movw	r30, r16
 666:	60 81       	ld	r22, Z
 668:	71 81       	ldd	r23, Z+1	; 0x01
 66a:	82 81       	ldd	r24, Z+2	; 0x02
 66c:	93 81       	ldd	r25, Z+3	; 0x03
 66e:	0c 5f       	subi	r16, 0xFC	; 252
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	09 c0       	rjmp	.+18     	; 0x686 <vfprintf+0x1fe>
 674:	f8 01       	movw	r30, r16
 676:	60 81       	ld	r22, Z
 678:	71 81       	ldd	r23, Z+1	; 0x01
 67a:	88 27       	eor	r24, r24
 67c:	77 fd       	sbrc	r23, 7
 67e:	80 95       	com	r24
 680:	98 2f       	mov	r25, r24
 682:	0e 5f       	subi	r16, 0xFE	; 254
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	4f e6       	ldi	r20, 0x6F	; 111
 688:	b4 2e       	mov	r11, r20
 68a:	b2 22       	and	r11, r18
 68c:	97 ff       	sbrs	r25, 7
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <vfprintf+0x21a>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	f0 e8       	ldi	r31, 0x80	; 128
 6a0:	bf 2a       	or	r11, r31
 6a2:	a2 01       	movw	r20, r4
 6a4:	2a e0       	ldi	r18, 0x0A	; 10
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	0e 94 41 04 	call	0x882	; 0x882 <__ultoa_invert>
 6ac:	78 2e       	mov	r7, r24
 6ae:	74 18       	sub	r7, r4
 6b0:	45 c0       	rjmp	.+138    	; 0x73c <vfprintf+0x2b4>
 6b2:	85 37       	cpi	r24, 0x75	; 117
 6b4:	31 f4       	brne	.+12     	; 0x6c2 <vfprintf+0x23a>
 6b6:	3f ee       	ldi	r19, 0xEF	; 239
 6b8:	b3 2e       	mov	r11, r19
 6ba:	b2 22       	and	r11, r18
 6bc:	2a e0       	ldi	r18, 0x0A	; 10
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	25 c0       	rjmp	.+74     	; 0x70c <vfprintf+0x284>
 6c2:	99 ef       	ldi	r25, 0xF9	; 249
 6c4:	b9 2e       	mov	r11, r25
 6c6:	b2 22       	and	r11, r18
 6c8:	8f 36       	cpi	r24, 0x6F	; 111
 6ca:	c1 f0       	breq	.+48     	; 0x6fc <vfprintf+0x274>
 6cc:	80 37       	cpi	r24, 0x70	; 112
 6ce:	20 f4       	brcc	.+8      	; 0x6d8 <vfprintf+0x250>
 6d0:	88 35       	cpi	r24, 0x58	; 88
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <vfprintf+0x24e>
 6d4:	b5 c0       	rjmp	.+362    	; 0x840 <vfprintf+0x3b8>
 6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <vfprintf+0x26a>
 6d8:	80 37       	cpi	r24, 0x70	; 112
 6da:	21 f0       	breq	.+8      	; 0x6e4 <vfprintf+0x25c>
 6dc:	88 37       	cpi	r24, 0x78	; 120
 6de:	09 f0       	breq	.+2      	; 0x6e2 <vfprintf+0x25a>
 6e0:	af c0       	rjmp	.+350    	; 0x840 <vfprintf+0x3b8>
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <vfprintf+0x260>
 6e4:	20 e1       	ldi	r18, 0x10	; 16
 6e6:	b2 2a       	or	r11, r18
 6e8:	b4 fe       	sbrs	r11, 4
 6ea:	0b c0       	rjmp	.+22     	; 0x702 <vfprintf+0x27a>
 6ec:	84 e0       	ldi	r24, 0x04	; 4
 6ee:	b8 2a       	or	r11, r24
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <vfprintf+0x27a>
 6f2:	b4 fe       	sbrs	r11, 4
 6f4:	09 c0       	rjmp	.+18     	; 0x708 <vfprintf+0x280>
 6f6:	e6 e0       	ldi	r30, 0x06	; 6
 6f8:	be 2a       	or	r11, r30
 6fa:	06 c0       	rjmp	.+12     	; 0x708 <vfprintf+0x280>
 6fc:	28 e0       	ldi	r18, 0x08	; 8
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	05 c0       	rjmp	.+10     	; 0x70c <vfprintf+0x284>
 702:	20 e1       	ldi	r18, 0x10	; 16
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x284>
 708:	20 e1       	ldi	r18, 0x10	; 16
 70a:	32 e0       	ldi	r19, 0x02	; 2
 70c:	b7 fe       	sbrs	r11, 7
 70e:	08 c0       	rjmp	.+16     	; 0x720 <vfprintf+0x298>
 710:	f8 01       	movw	r30, r16
 712:	60 81       	ld	r22, Z
 714:	71 81       	ldd	r23, Z+1	; 0x01
 716:	82 81       	ldd	r24, Z+2	; 0x02
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	0c 5f       	subi	r16, 0xFC	; 252
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	07 c0       	rjmp	.+14     	; 0x72e <vfprintf+0x2a6>
 720:	f8 01       	movw	r30, r16
 722:	60 81       	ld	r22, Z
 724:	71 81       	ldd	r23, Z+1	; 0x01
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 5f       	subi	r16, 0xFE	; 254
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	a2 01       	movw	r20, r4
 730:	0e 94 41 04 	call	0x882	; 0x882 <__ultoa_invert>
 734:	78 2e       	mov	r7, r24
 736:	74 18       	sub	r7, r4
 738:	ff e7       	ldi	r31, 0x7F	; 127
 73a:	bf 22       	and	r11, r31
 73c:	b6 fe       	sbrs	r11, 6
 73e:	0b c0       	rjmp	.+22     	; 0x756 <vfprintf+0x2ce>
 740:	2e ef       	ldi	r18, 0xFE	; 254
 742:	b2 22       	and	r11, r18
 744:	7e 14       	cp	r7, r14
 746:	38 f4       	brcc	.+14     	; 0x756 <vfprintf+0x2ce>
 748:	b4 fe       	sbrs	r11, 4
 74a:	07 c0       	rjmp	.+14     	; 0x75a <vfprintf+0x2d2>
 74c:	b2 fc       	sbrc	r11, 2
 74e:	05 c0       	rjmp	.+10     	; 0x75a <vfprintf+0x2d2>
 750:	8f ee       	ldi	r24, 0xEF	; 239
 752:	b8 22       	and	r11, r24
 754:	02 c0       	rjmp	.+4      	; 0x75a <vfprintf+0x2d2>
 756:	a7 2c       	mov	r10, r7
 758:	01 c0       	rjmp	.+2      	; 0x75c <vfprintf+0x2d4>
 75a:	ae 2c       	mov	r10, r14
 75c:	8b 2d       	mov	r24, r11
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	b4 fe       	sbrs	r11, 4
 762:	0d c0       	rjmp	.+26     	; 0x77e <vfprintf+0x2f6>
 764:	fe 01       	movw	r30, r28
 766:	e7 0d       	add	r30, r7
 768:	f1 1d       	adc	r31, r1
 76a:	20 81       	ld	r18, Z
 76c:	20 33       	cpi	r18, 0x30	; 48
 76e:	19 f4       	brne	.+6      	; 0x776 <vfprintf+0x2ee>
 770:	e9 ee       	ldi	r30, 0xE9	; 233
 772:	be 22       	and	r11, r30
 774:	09 c0       	rjmp	.+18     	; 0x788 <vfprintf+0x300>
 776:	a3 94       	inc	r10
 778:	b2 fe       	sbrs	r11, 2
 77a:	06 c0       	rjmp	.+12     	; 0x788 <vfprintf+0x300>
 77c:	04 c0       	rjmp	.+8      	; 0x786 <vfprintf+0x2fe>
 77e:	86 78       	andi	r24, 0x86	; 134
 780:	90 70       	andi	r25, 0x00	; 0
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	09 f0       	breq	.+2      	; 0x788 <vfprintf+0x300>
 786:	a3 94       	inc	r10
 788:	8b 2c       	mov	r8, r11
 78a:	99 24       	eor	r9, r9
 78c:	b3 fc       	sbrc	r11, 3
 78e:	14 c0       	rjmp	.+40     	; 0x7b8 <vfprintf+0x330>
 790:	b0 fe       	sbrs	r11, 0
 792:	0f c0       	rjmp	.+30     	; 0x7b2 <vfprintf+0x32a>
 794:	af 14       	cp	r10, r15
 796:	28 f4       	brcc	.+10     	; 0x7a2 <vfprintf+0x31a>
 798:	e7 2c       	mov	r14, r7
 79a:	ef 0c       	add	r14, r15
 79c:	ea 18       	sub	r14, r10
 79e:	af 2c       	mov	r10, r15
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <vfprintf+0x32a>
 7a2:	e7 2c       	mov	r14, r7
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <vfprintf+0x32a>
 7a6:	80 e2       	ldi	r24, 0x20	; 32
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	b6 01       	movw	r22, r12
 7ac:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 7b0:	a3 94       	inc	r10
 7b2:	af 14       	cp	r10, r15
 7b4:	c0 f3       	brcs	.-16     	; 0x7a6 <vfprintf+0x31e>
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <vfprintf+0x338>
 7b8:	af 14       	cp	r10, r15
 7ba:	10 f4       	brcc	.+4      	; 0x7c0 <vfprintf+0x338>
 7bc:	fa 18       	sub	r15, r10
 7be:	01 c0       	rjmp	.+2      	; 0x7c2 <vfprintf+0x33a>
 7c0:	ff 24       	eor	r15, r15
 7c2:	84 fe       	sbrs	r8, 4
 7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <vfprintf+0x35c>
 7c6:	80 e3       	ldi	r24, 0x30	; 48
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	b6 01       	movw	r22, r12
 7cc:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 7d0:	82 fe       	sbrs	r8, 2
 7d2:	1f c0       	rjmp	.+62     	; 0x812 <vfprintf+0x38a>
 7d4:	81 fe       	sbrs	r8, 1
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x356>
 7d8:	88 e5       	ldi	r24, 0x58	; 88
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	10 c0       	rjmp	.+32     	; 0x7fe <vfprintf+0x376>
 7de:	88 e7       	ldi	r24, 0x78	; 120
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <vfprintf+0x376>
 7e4:	c4 01       	movw	r24, r8
 7e6:	86 78       	andi	r24, 0x86	; 134
 7e8:	90 70       	andi	r25, 0x00	; 0
 7ea:	00 97       	sbiw	r24, 0x00	; 0
 7ec:	91 f0       	breq	.+36     	; 0x812 <vfprintf+0x38a>
 7ee:	81 fc       	sbrc	r8, 1
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <vfprintf+0x36e>
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <vfprintf+0x370>
 7f6:	8b e2       	ldi	r24, 0x2B	; 43
 7f8:	b7 fc       	sbrc	r11, 7
 7fa:	8d e2       	ldi	r24, 0x2D	; 45
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	b6 01       	movw	r22, r12
 800:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0x38a>
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	b6 01       	movw	r22, r12
 80c:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 810:	ea 94       	dec	r14
 812:	7e 14       	cp	r7, r14
 814:	c0 f3       	brcs	.-16     	; 0x806 <vfprintf+0x37e>
 816:	7a 94       	dec	r7
 818:	f2 01       	movw	r30, r4
 81a:	e7 0d       	add	r30, r7
 81c:	f1 1d       	adc	r31, r1
 81e:	80 81       	ld	r24, Z
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	b6 01       	movw	r22, r12
 824:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 828:	77 20       	and	r7, r7
 82a:	a9 f7       	brne	.-22     	; 0x816 <vfprintf+0x38e>
 82c:	06 c0       	rjmp	.+12     	; 0x83a <vfprintf+0x3b2>
 82e:	80 e2       	ldi	r24, 0x20	; 32
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	b6 01       	movw	r22, r12
 834:	0e 94 03 02 	call	0x406	; 0x406 <fputc>
 838:	fa 94       	dec	r15
 83a:	ff 20       	and	r15, r15
 83c:	c1 f7       	brne	.-16     	; 0x82e <vfprintf+0x3a6>
 83e:	37 ce       	rjmp	.-914    	; 0x4ae <vfprintf+0x26>
 840:	f6 01       	movw	r30, r12
 842:	26 81       	ldd	r18, Z+6	; 0x06
 844:	37 81       	ldd	r19, Z+7	; 0x07
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x3c4>
 848:	2f ef       	ldi	r18, 0xFF	; 255
 84a:	3f ef       	ldi	r19, 0xFF	; 255
 84c:	c9 01       	movw	r24, r18
 84e:	2c 96       	adiw	r28, 0x0c	; 12
 850:	e2 e1       	ldi	r30, 0x12	; 18
 852:	0c 94 bb 04 	jmp	0x976	; 0x976 <__epilogue_restores__>

00000856 <strnlen_P>:
 856:	fc 01       	movw	r30, r24
 858:	05 90       	lpm	r0, Z+
 85a:	61 50       	subi	r22, 0x01	; 1
 85c:	70 40       	sbci	r23, 0x00	; 0
 85e:	01 10       	cpse	r0, r1
 860:	d8 f7       	brcc	.-10     	; 0x858 <strnlen_P+0x2>
 862:	80 95       	com	r24
 864:	90 95       	com	r25
 866:	8e 0f       	add	r24, r30
 868:	9f 1f       	adc	r25, r31
 86a:	08 95       	ret

0000086c <strnlen>:
 86c:	fc 01       	movw	r30, r24
 86e:	61 50       	subi	r22, 0x01	; 1
 870:	70 40       	sbci	r23, 0x00	; 0
 872:	01 90       	ld	r0, Z+
 874:	01 10       	cpse	r0, r1
 876:	d8 f7       	brcc	.-10     	; 0x86e <strnlen+0x2>
 878:	80 95       	com	r24
 87a:	90 95       	com	r25
 87c:	8e 0f       	add	r24, r30
 87e:	9f 1f       	adc	r25, r31
 880:	08 95       	ret

00000882 <__ultoa_invert>:
 882:	fa 01       	movw	r30, r20
 884:	aa 27       	eor	r26, r26
 886:	28 30       	cpi	r18, 0x08	; 8
 888:	51 f1       	breq	.+84     	; 0x8de <__ultoa_invert+0x5c>
 88a:	20 31       	cpi	r18, 0x10	; 16
 88c:	81 f1       	breq	.+96     	; 0x8ee <__ultoa_invert+0x6c>
 88e:	e8 94       	clt
 890:	6f 93       	push	r22
 892:	6e 7f       	andi	r22, 0xFE	; 254
 894:	6e 5f       	subi	r22, 0xFE	; 254
 896:	7f 4f       	sbci	r23, 0xFF	; 255
 898:	8f 4f       	sbci	r24, 0xFF	; 255
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	af 4f       	sbci	r26, 0xFF	; 255
 89e:	b1 e0       	ldi	r27, 0x01	; 1
 8a0:	3e d0       	rcall	.+124    	; 0x91e <__stack+0x1f>
 8a2:	b4 e0       	ldi	r27, 0x04	; 4
 8a4:	3c d0       	rcall	.+120    	; 0x91e <__stack+0x1f>
 8a6:	67 0f       	add	r22, r23
 8a8:	78 1f       	adc	r23, r24
 8aa:	89 1f       	adc	r24, r25
 8ac:	9a 1f       	adc	r25, r26
 8ae:	a1 1d       	adc	r26, r1
 8b0:	68 0f       	add	r22, r24
 8b2:	79 1f       	adc	r23, r25
 8b4:	8a 1f       	adc	r24, r26
 8b6:	91 1d       	adc	r25, r1
 8b8:	a1 1d       	adc	r26, r1
 8ba:	6a 0f       	add	r22, r26
 8bc:	71 1d       	adc	r23, r1
 8be:	81 1d       	adc	r24, r1
 8c0:	91 1d       	adc	r25, r1
 8c2:	a1 1d       	adc	r26, r1
 8c4:	20 d0       	rcall	.+64     	; 0x906 <__stack+0x7>
 8c6:	09 f4       	brne	.+2      	; 0x8ca <__ultoa_invert+0x48>
 8c8:	68 94       	set
 8ca:	3f 91       	pop	r19
 8cc:	2a e0       	ldi	r18, 0x0A	; 10
 8ce:	26 9f       	mul	r18, r22
 8d0:	11 24       	eor	r1, r1
 8d2:	30 19       	sub	r19, r0
 8d4:	30 5d       	subi	r19, 0xD0	; 208
 8d6:	31 93       	st	Z+, r19
 8d8:	de f6       	brtc	.-74     	; 0x890 <__ultoa_invert+0xe>
 8da:	cf 01       	movw	r24, r30
 8dc:	08 95       	ret
 8de:	46 2f       	mov	r20, r22
 8e0:	47 70       	andi	r20, 0x07	; 7
 8e2:	40 5d       	subi	r20, 0xD0	; 208
 8e4:	41 93       	st	Z+, r20
 8e6:	b3 e0       	ldi	r27, 0x03	; 3
 8e8:	0f d0       	rcall	.+30     	; 0x908 <__stack+0x9>
 8ea:	c9 f7       	brne	.-14     	; 0x8de <__ultoa_invert+0x5c>
 8ec:	f6 cf       	rjmp	.-20     	; 0x8da <__ultoa_invert+0x58>
 8ee:	46 2f       	mov	r20, r22
 8f0:	4f 70       	andi	r20, 0x0F	; 15
 8f2:	40 5d       	subi	r20, 0xD0	; 208
 8f4:	4a 33       	cpi	r20, 0x3A	; 58
 8f6:	18 f0       	brcs	.+6      	; 0x8fe <__ultoa_invert+0x7c>
 8f8:	49 5d       	subi	r20, 0xD9	; 217
 8fa:	31 fd       	sbrc	r19, 1
 8fc:	40 52       	subi	r20, 0x20	; 32
 8fe:	41 93       	st	Z+, r20
 900:	02 d0       	rcall	.+4      	; 0x906 <__stack+0x7>
 902:	a9 f7       	brne	.-22     	; 0x8ee <__ultoa_invert+0x6c>
 904:	ea cf       	rjmp	.-44     	; 0x8da <__ultoa_invert+0x58>
 906:	b4 e0       	ldi	r27, 0x04	; 4
 908:	a6 95       	lsr	r26
 90a:	97 95       	ror	r25
 90c:	87 95       	ror	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	ba 95       	dec	r27
 914:	c9 f7       	brne	.-14     	; 0x908 <__stack+0x9>
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	61 05       	cpc	r22, r1
 91a:	71 05       	cpc	r23, r1
 91c:	08 95       	ret
 91e:	9b 01       	movw	r18, r22
 920:	ac 01       	movw	r20, r24
 922:	0a 2e       	mov	r0, r26
 924:	06 94       	lsr	r0
 926:	57 95       	ror	r21
 928:	47 95       	ror	r20
 92a:	37 95       	ror	r19
 92c:	27 95       	ror	r18
 92e:	ba 95       	dec	r27
 930:	c9 f7       	brne	.-14     	; 0x924 <__stack+0x25>
 932:	62 0f       	add	r22, r18
 934:	73 1f       	adc	r23, r19
 936:	84 1f       	adc	r24, r20
 938:	95 1f       	adc	r25, r21
 93a:	a0 1d       	adc	r26, r0
 93c:	08 95       	ret

0000093e <__prologue_saves__>:
 93e:	2f 92       	push	r2
 940:	3f 92       	push	r3
 942:	4f 92       	push	r4
 944:	5f 92       	push	r5
 946:	6f 92       	push	r6
 948:	7f 92       	push	r7
 94a:	8f 92       	push	r8
 94c:	9f 92       	push	r9
 94e:	af 92       	push	r10
 950:	bf 92       	push	r11
 952:	cf 92       	push	r12
 954:	df 92       	push	r13
 956:	ef 92       	push	r14
 958:	ff 92       	push	r15
 95a:	0f 93       	push	r16
 95c:	1f 93       	push	r17
 95e:	cf 93       	push	r28
 960:	df 93       	push	r29
 962:	cd b7       	in	r28, 0x3d	; 61
 964:	de b7       	in	r29, 0x3e	; 62
 966:	ca 1b       	sub	r28, r26
 968:	db 0b       	sbc	r29, r27
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	f8 94       	cli
 96e:	de bf       	out	0x3e, r29	; 62
 970:	0f be       	out	0x3f, r0	; 63
 972:	cd bf       	out	0x3d, r28	; 61
 974:	09 94       	ijmp

00000976 <__epilogue_restores__>:
 976:	2a 88       	ldd	r2, Y+18	; 0x12
 978:	39 88       	ldd	r3, Y+17	; 0x11
 97a:	48 88       	ldd	r4, Y+16	; 0x10
 97c:	5f 84       	ldd	r5, Y+15	; 0x0f
 97e:	6e 84       	ldd	r6, Y+14	; 0x0e
 980:	7d 84       	ldd	r7, Y+13	; 0x0d
 982:	8c 84       	ldd	r8, Y+12	; 0x0c
 984:	9b 84       	ldd	r9, Y+11	; 0x0b
 986:	aa 84       	ldd	r10, Y+10	; 0x0a
 988:	b9 84       	ldd	r11, Y+9	; 0x09
 98a:	c8 84       	ldd	r12, Y+8	; 0x08
 98c:	df 80       	ldd	r13, Y+7	; 0x07
 98e:	ee 80       	ldd	r14, Y+6	; 0x06
 990:	fd 80       	ldd	r15, Y+5	; 0x05
 992:	0c 81       	ldd	r16, Y+4	; 0x04
 994:	1b 81       	ldd	r17, Y+3	; 0x03
 996:	aa 81       	ldd	r26, Y+2	; 0x02
 998:	b9 81       	ldd	r27, Y+1	; 0x01
 99a:	ce 0f       	add	r28, r30
 99c:	d1 1d       	adc	r29, r1
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	f8 94       	cli
 9a2:	de bf       	out	0x3e, r29	; 62
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	cd bf       	out	0x3d, r28	; 61
 9a8:	ed 01       	movw	r28, r26
 9aa:	08 95       	ret

000009ac <_exit>:
 9ac:	f8 94       	cli

000009ae <__stop_program>:
 9ae:	ff cf       	rjmp	.-2      	; 0x9ae <__stop_program>
