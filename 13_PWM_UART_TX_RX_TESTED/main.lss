
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  00000d84  00000e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800220  00800220  00000f38  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d48  00000000  00000000  0000317c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00003ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000139  00000000  00000000  00003ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000095c  00000000  00000000  0000401d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002b2  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000077f  00000000  00000000  00004c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  000053ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002a7  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000673  00000000  00000000  00005743  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000043  00000000  00000000  00005db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 03 	call	0x62e	; 0x62e <main>
  9e:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
  stdout = &uart_output;
  stdin  = &uart_input;

}

void uart_putchar(char c, FILE *stream) {
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
  if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  }
  loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putchar+0xe>
  UDR0 = c;
  bc:	10 93 c6 00 	sts	0x00C6, r17
}
  c0:	1f 91       	pop	r17
  c2:	08 95       	ret

000000c4 <uart_getchar>:


char uart_getchar(FILE *stream) {
  loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <uart_getchar>
  return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6
}
  d0:	08 95       	ret

000000d2 <check_if_there_is_a_dot_there>:

  count_dots = 0; // reset our global dot counter for next well
}


int check_if_there_is_a_dot_there ( long duration_threshold ) {
  d2:	9b 01       	movw	r18, r22
  d4:	ac 01       	movw	r20, r24
  int evidence_of_dot = 0;
  long open_space = 0; //counter for open space
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	dc 01       	movw	r26, r24
  count_dots = 0; // reset our global dot counter for next well
}


int check_if_there_is_a_dot_there ( long duration_threshold ) {
  int evidence_of_dot = 0;
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	ef e8       	ldi	r30, 0x8F	; 143
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <check_if_there_is_a_dot_there+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <check_if_there_is_a_dot_there+0x18>
  ea:	00 00       	nop
  long open_space = 0; //counter for open space
  do {
    _delay_us(100);
    if ( PIND & _BV(PD2) ) {
  ec:	4a 9b       	sbis	0x09, 2	; 9
  ee:	07 c0       	rjmp	.+14     	; 0xfe <check_if_there_is_a_dot_there+0x2c>
      open_space += 100; //more open_space 
  f0:	8c 59       	subi	r24, 0x9C	; 156
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	af 4f       	sbci	r26, 0xFF	; 255
  f6:	bf 4f       	sbci	r27, 0xFF	; 255
      // printf("%ld \n", open_space);
      evidence_of_dot = 0; //reset counter to filter false positives
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	05 c0       	rjmp	.+10     	; 0x108 <check_if_there_is_a_dot_there+0x36>
    } else {
      evidence_of_dot++; // gather evidence of a dot
  fe:	6f 5f       	subi	r22, 0xFF	; 255
 100:	7f 4f       	sbci	r23, 0xFF	; 255
      if ( evidence_of_dot > 10) {
 102:	6b 30       	cpi	r22, 0x0B	; 11
 104:	71 05       	cpc	r23, r1
 106:	44 f4       	brge	.+16     	; 0x118 <check_if_there_is_a_dot_there+0x46>
        return 1; //there is a dot
      }
    }
  } while (open_space < duration_threshold);
 108:	82 17       	cp	r24, r18
 10a:	93 07       	cpc	r25, r19
 10c:	a4 07       	cpc	r26, r20
 10e:	b5 07       	cpc	r27, r21
 110:	3c f3       	brlt	.-50     	; 0xe0 <check_if_there_is_a_dot_there+0xe>

  return 0; //no dot detected within temporal threshold
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <check_if_there_is_a_dot_there+0x4a>
      // printf("%ld \n", open_space);
      evidence_of_dot = 0; //reset counter to filter false positives
    } else {
      evidence_of_dot++; // gather evidence of a dot
      if ( evidence_of_dot > 10) {
        return 1; //there is a dot
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
    }
  } while (open_space < duration_threshold);

  return 0; //no dot detected within temporal threshold

}
 11c:	c9 01       	movw	r24, r18
 11e:	08 95       	ret

00000120 <servoOff>:

}

void servoOff(){

  PORTD &= ~_BV(ENA);// OFF the enable bit
 120:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 122:	e0 e8       	ldi	r30, 0x80	; 128
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7e       	andi	r24, 0xEF	; 239
 12a:	80 83       	st	Z, r24

  //reset the original prescaler
  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	80 93 81 00 	sts	0x0081, r24
}
 132:	08 95       	ret

00000134 <io_init>:
//void demo_full_sequence(); ()// TODO align sequence in a function


void io_init (void) {
  //1 = output, 0 = input5
  DDRB = _BV(PUL) | _BV(DIR) | _BV(ENA) | _BV(LED);
 134:	8c e3       	ldi	r24, 0x3C	; 60
 136:	84 b9       	out	0x04, r24	; 4
  //     PUL-Portb2 DIR-Portb3 ENA-Portb4 LED-light port 5 (13)
  DDRD = ~_BV(OPTO); //OPTO is an input
 138:	8b ef       	ldi	r24, 0xFB	; 251
 13a:	8a b9       	out	0x0a, r24	; 10
  //     Pin 2 of the arduino
  //     */
}
 13c:	08 95       	ret

0000013e <pwm_init>:

void pwm_init(void) {
  TCCR1A = _BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	80 93 80 00 	sts	0x0080, r24

  //  (0x81) TCCR1B ICNC1 ICES1 â€“ WGM13 WGM12 CS12 CS11 CS10 136
  //  (0x80) TCCR1A COM1A1 COM1A0 COM1B1 COM1B0 â€“ â€“ WGM11 WGM10 134

  OCR1AH = 0x00; //this controls the higher half of the 16 bit "TOP" value
 144:	10 92 89 00 	sts	0x0089, r1


  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	80 93 81 00 	sts	0x0081, r24
  1 0 0 clkI/O/256 (From prescaler)
  1 0 1 clkI/O/1024 (From prescaler)
  1 1 0 External clock source on T1 pin. Clock on falling edge.
  1 1 1 External clock source on T1 pin. Clock on rising edgputchar
  */
}
 14e:	08 95       	ret

00000150 <servoOn>:
  }
  servoOff();

}

void servoOn(int direction) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
  // servo speed is 50Hz
  // this is approximated by the 16 bit register as 
  // UCR1AH 78 and UCR1AL 30 ( although this is at 50% duty cycle, thankfully the motor controller is edge triggered

  //TODO do an if statement so this isn't redundant (for cleanup purposes only)
  pwm_init();
 156:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_init>

  TCCR1B = _BV(WGM02) | _BV(CS11); // the CS stuff sets the prescaler, 010 makes it factor of 2 prescale (second fastest clock 8MHz) WGM02 makes it so that compare register actually does something
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	80 93 81 00 	sts	0x0081, r24

  //these two numbers give the 50.0Hz frequency simalcrum of Servo.h
  OCR1AH = 78;
 160:	8e e4       	ldi	r24, 0x4E	; 78
 162:	80 93 89 00 	sts	0x0089, r24
  OCR1AL = 30;
 166:	8e e1       	ldi	r24, 0x1E	; 30
 168:	80 93 88 00 	sts	0x0088, r24
  if (direction == 1) {
 16c:	c1 30       	cpi	r28, 0x01	; 1
 16e:	d1 05       	cpc	r29, r1
 170:	11 f4       	brne	.+4      	; 0x176 <servoOn+0x26>
    PORTB |= _BV(DIR);
 172:	2b 9a       	sbi	0x05, 3	; 5
 174:	01 c0       	rjmp	.+2      	; 0x178 <servoOn+0x28>
  } else {
    PORTB &= ~_BV(DIR);
 176:	2b 98       	cbi	0x05, 3	; 5
  }
  PORTB |= _BV(ENA); // ON the enable bit
 178:	2c 9a       	sbi	0x05, 4	; 5


}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <go_to_next_edge>:

}

void go_to_next_edge() {

  servoOn(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
  int counter = 0;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
  while (counter < 10)
  {

    if ( !(PIND & _BV(PD2)) ) {
 18c:	4a 99       	sbic	0x09, 2	; 9
 18e:	07 c0       	rjmp	.+14     	; 0x19e <go_to_next_edge+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <go_to_next_edge+0x14>
 198:	00 c0       	rjmp	.+0      	; 0x19a <go_to_next_edge+0x1a>
 19a:	00 00       	nop
 19c:	f5 cf       	rjmp	.-22     	; 0x188 <go_to_next_edge+0x8>
      _delay_ms(1); // this is what happens if nothing detected. (detection events give low value)
      counter = 0;
    } else {
      counter++;
 19e:	01 96       	adiw	r24, 0x01	; 1

void go_to_next_edge() {

  servoOn(1);
  int counter = 0;
  while (counter < 10)
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	91 05       	cpc	r25, r1
 1a4:	9c f3       	brlt	.-26     	; 0x18c <go_to_next_edge+0xc>
    } else {
      counter++;
      //printf("counter is %d \n", counter); // don't use printf it slows everything down ruining timing measurement
    }
  }
  servoOff();
 1a6:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>

}
 1aa:	08 95       	ret

000001ac <go_to_next_dot>:

  _delay_ms(1000);
  go_to_next_dot(); //begin counting dots
}

void go_to_next_dot() {
 1ac:	8f 92       	push	r8
 1ae:	9f 92       	push	r9
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
  int count_dots=1;
  int last_dot=0;
  long time_limit= 100000L;

  int there_is_a_dot=3;
 1c4:	33 e0       	ldi	r19, 0x03	; 3
 1c6:	e3 2e       	mov	r14, r19
 1c8:	f1 2c       	mov	r15, r1
  _delay_ms(1000);
  go_to_next_dot(); //begin counting dots
}

void go_to_next_dot() {
  int count_dots=1;
 1ca:	c1 e0       	ldi	r28, 0x01	; 1
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
  int there_is_a_dot=3;

  while (last_dot==0) { //wait why 11? oh if misaligned and detects too many dots
    //look for dot, but with a time limit

    printf("there is a dot preresult %d \n", there_is_a_dot);
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	c2 2e       	mov	r12, r18
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	d2 2e       	mov	r13, r18
    servoOn(1);
    there_is_a_dot =  check_if_there_is_a_dot_there( 500000L ); //DONE --  replaced this with a check_if_there_is_a_dot_there function
    servoOff();
    _delay_ms(1000);
    printf("there is a dot result %d \n", there_is_a_dot);
 1d6:	9e e1       	ldi	r25, 0x1E	; 30
 1d8:	a9 2e       	mov	r10, r25
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	b9 2e       	mov	r11, r25
    printf("how many dots %d \n", count_dots);
 1de:	09 e3       	ldi	r16, 0x39	; 57
 1e0:	11 e0       	ldi	r17, 0x01	; 1
      servoOn(0);
      _delay_ms(600); // hopefully this is long enough
      servoOff();
      last_dot = 1; //break loop as we found last dot
    } else {
      printf("count them dots %d\n", count_dots);
 1e2:	86 e9       	ldi	r24, 0x96	; 150
 1e4:	88 2e       	mov	r8, r24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	98 2e       	mov	r9, r24
  int there_is_a_dot=3;

  while (last_dot==0) { //wait why 11? oh if misaligned and detects too many dots
    //look for dot, but with a time limit

    printf("there is a dot preresult %d \n", there_is_a_dot);
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <go_to_next_dot+0x40>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <go_to_next_dot+0x42>
 1ee:	ad b7       	in	r26, 0x3d	; 61
 1f0:	be b7       	in	r27, 0x3e	; 62
 1f2:	12 96       	adiw	r26, 0x02	; 2
 1f4:	dc 92       	st	X, r13
 1f6:	ce 92       	st	-X, r12
 1f8:	11 97       	sbiw	r26, 0x01	; 1
 1fa:	14 96       	adiw	r26, 0x04	; 4
 1fc:	fc 92       	st	X, r15
 1fe:	ee 92       	st	-X, r14
 200:	13 97       	sbiw	r26, 0x03	; 3
 202:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>
    servoOn(1);
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
    there_is_a_dot =  check_if_there_is_a_dot_there( 500000L ); //DONE --  replaced this with a check_if_there_is_a_dot_there function
 216:	60 e2       	ldi	r22, 0x20	; 32
 218:	71 ea       	ldi	r23, 0xA1	; 161
 21a:	87 e0       	ldi	r24, 0x07	; 7
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 69 00 	call	0xd2	; 0xd2 <check_if_there_is_a_dot_there>
 222:	7c 01       	movw	r14, r24
    servoOff();
 224:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	93 ed       	ldi	r25, 0xD3	; 211
 22c:	a0 e3       	ldi	r26, 0x30	; 48
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	a0 40       	sbci	r26, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <go_to_next_dot+0x82>
 236:	00 c0       	rjmp	.+0      	; 0x238 <go_to_next_dot+0x8c>
 238:	00 00       	nop
    _delay_ms(1000);
    printf("there is a dot result %d \n", there_is_a_dot);
 23a:	00 d0       	rcall	.+0      	; 0x23c <go_to_next_dot+0x90>
 23c:	00 d0       	rcall	.+0      	; 0x23e <go_to_next_dot+0x92>
 23e:	ad b7       	in	r26, 0x3d	; 61
 240:	be b7       	in	r27, 0x3e	; 62
 242:	12 96       	adiw	r26, 0x02	; 2
 244:	bc 92       	st	X, r11
 246:	ae 92       	st	-X, r10
 248:	11 97       	sbiw	r26, 0x01	; 1
 24a:	14 96       	adiw	r26, 0x04	; 4
 24c:	fc 92       	st	X, r15
 24e:	ee 92       	st	-X, r14
 250:	13 97       	sbiw	r26, 0x03	; 3
 252:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>
    printf("how many dots %d \n", count_dots);
 256:	ed b7       	in	r30, 0x3d	; 61
 258:	fe b7       	in	r31, 0x3e	; 62
 25a:	12 83       	std	Z+2, r17	; 0x02
 25c:	01 83       	std	Z+1, r16	; 0x01
 25e:	d4 83       	std	Z+4, r29	; 0x04
 260:	c3 83       	std	Z+3, r28	; 0x03
 262:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>

    if (there_is_a_dot == 1)
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	ef 16       	cp	r14, r31
 272:	f1 04       	cpc	r15, r1
 274:	f1 f4       	brne	.+60     	; 0x2b2 <go_to_next_dot+0x106>
    {
      count_dots++;
 276:	21 96       	adiw	r28, 0x01	; 1
      printf("how many dots %d \n", count_dots);
 278:	00 d0       	rcall	.+0      	; 0x27a <go_to_next_dot+0xce>
 27a:	00 d0       	rcall	.+0      	; 0x27c <go_to_next_dot+0xd0>
 27c:	ad b7       	in	r26, 0x3d	; 61
 27e:	be b7       	in	r27, 0x3e	; 62
 280:	12 96       	adiw	r26, 0x02	; 2
 282:	1c 93       	st	X, r17
 284:	0e 93       	st	-X, r16
 286:	11 97       	sbiw	r26, 0x01	; 1
 288:	14 96       	adiw	r26, 0x04	; 4
 28a:	dc 93       	st	X, r29
 28c:	ce 93       	st	-X, r28
 28e:	13 97       	sbiw	r26, 0x03	; 3
 290:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>
      //go to space right after the dot then begin the loop again
      go_to_next_edge();
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0e 94 c0 00 	call	0x180	; 0x180 <go_to_next_edge>
      printf("how many dots %d \n", count_dots);
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <go_to_next_dot+0xf6>
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <go_to_next_dot+0xf8>
 2a4:	ed b7       	in	r30, 0x3d	; 61
 2a6:	fe b7       	in	r31, 0x3e	; 62
 2a8:	12 83       	std	Z+2, r17	; 0x02
 2aa:	01 83       	std	Z+1, r16	; 0x01
 2ac:	d4 83       	std	Z+4, r29	; 0x04
 2ae:	c3 83       	std	Z+3, r28	; 0x03
 2b0:	7a c0       	rjmp	.+244    	; 0x3a6 <go_to_next_dot+0x1fa>
    } else if (there_is_a_dot==0) {
 2b2:	e1 14       	cp	r14, r1
 2b4:	f1 04       	cpc	r15, r1
 2b6:	09 f0       	breq	.+2      	; 0x2ba <go_to_next_dot+0x10e>
 2b8:	6a c0       	rjmp	.+212    	; 0x38e <go_to_next_dot+0x1e2>
      servoOff(); // stop
 2ba:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	93 ec       	ldi	r25, 0xC3	; 195
 2c2:	a9 e0       	ldi	r26, 0x09	; 9
 2c4:	81 50       	subi	r24, 0x01	; 1
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	a0 40       	sbci	r26, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <go_to_next_dot+0x118>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <go_to_next_dot+0x122>
 2ce:	00 00       	nop
      _delay_ms(200); //wait for stop
      servoOn(0); // go reverse
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
      printf("is this the real mistake? %d\n", count_dots);
 2d8:	00 d0       	rcall	.+0      	; 0x2da <go_to_next_dot+0x12e>
 2da:	00 d0       	rcall	.+0      	; 0x2dc <go_to_next_dot+0x130>
 2dc:	8c e4       	ldi	r24, 0x4C	; 76
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	ad b7       	in	r26, 0x3d	; 61
 2e2:	be b7       	in	r27, 0x3e	; 62
 2e4:	12 96       	adiw	r26, 0x02	; 2
 2e6:	9c 93       	st	X, r25
 2e8:	8e 93       	st	-X, r24
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	14 96       	adiw	r26, 0x04	; 4
 2ee:	dc 93       	st	X, r29
 2f0:	ce 93       	st	-X, r28
 2f2:	13 97       	sbiw	r26, 0x03	; 3
 2f4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>
      check_if_there_is_a_dot_there( 1000000L ); //check for the dot
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	60 e4       	ldi	r22, 0x40	; 64
 302:	72 e4       	ldi	r23, 0x42	; 66
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 69 00 	call	0xd2	; 0xd2 <check_if_there_is_a_dot_there>
      servoOff(); // found the dot, next we will go a bit further to center pic
 30c:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	93 ed       	ldi	r25, 0xD3	; 211
 314:	a0 e3       	ldi	r26, 0x30	; 48
 316:	81 50       	subi	r24, 0x01	; 1
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	a0 40       	sbci	r26, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <go_to_next_dot+0x16a>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <go_to_next_dot+0x174>
 320:	00 00       	nop
      _delay_ms(1000);
      printf("found the edge, hopefully not more dots %d\n", count_dots);
 322:	00 d0       	rcall	.+0      	; 0x324 <go_to_next_dot+0x178>
 324:	00 d0       	rcall	.+0      	; 0x326 <go_to_next_dot+0x17a>
 326:	8a e6       	ldi	r24, 0x6A	; 106
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	ad b7       	in	r26, 0x3d	; 61
 32c:	be b7       	in	r27, 0x3e	; 62
 32e:	12 96       	adiw	r26, 0x02	; 2
 330:	9c 93       	st	X, r25
 332:	8e 93       	st	-X, r24
 334:	11 97       	sbiw	r26, 0x01	; 1
 336:	14 96       	adiw	r26, 0x04	; 4
 338:	dc 93       	st	X, r29
 33a:	ce 93       	st	-X, r28
 33c:	13 97       	sbiw	r26, 0x03	; 3
 33e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>

      servoOn(0);
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	9b e4       	ldi	r25, 0x4B	; 75
 356:	ad e1       	ldi	r26, 0x1D	; 29
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	a0 40       	sbci	r26, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <go_to_next_dot+0x1ac>
 360:	00 c0       	rjmp	.+0      	; 0x362 <go_to_next_dot+0x1b6>
 362:	00 00       	nop
      _delay_ms(600); // hopefully this is long enough
      servoOff();
 364:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
      printf("count them dots %d\n", count_dots);
    }
  }

  // send back the number of dots to pythonSerial.py
  switch (count_dots) {
 368:	c2 30       	cpi	r28, 0x02	; 2
 36a:	d1 05       	cpc	r29, r1
 36c:	71 f1       	breq	.+92     	; 0x3ca <go_to_next_dot+0x21e>
 36e:	c3 30       	cpi	r28, 0x03	; 3
 370:	d1 05       	cpc	r29, r1
 372:	2c f4       	brge	.+10     	; 0x37e <go_to_next_dot+0x1d2>
 374:	c1 30       	cpi	r28, 0x01	; 1
 376:	d1 05       	cpc	r29, r1
 378:	09 f0       	breq	.+2      	; 0x37c <go_to_next_dot+0x1d0>
 37a:	57 c0       	rjmp	.+174    	; 0x42a <go_to_next_dot+0x27e>
 37c:	1b c0       	rjmp	.+54     	; 0x3b4 <go_to_next_dot+0x208>
 37e:	c3 30       	cpi	r28, 0x03	; 3
 380:	d1 05       	cpc	r29, r1
 382:	81 f1       	breq	.+96     	; 0x3e4 <go_to_next_dot+0x238>
 384:	c4 30       	cpi	r28, 0x04	; 4
 386:	d1 05       	cpc	r29, r1
 388:	09 f0       	breq	.+2      	; 0x38c <go_to_next_dot+0x1e0>
 38a:	4f c0       	rjmp	.+158    	; 0x42a <go_to_next_dot+0x27e>
 38c:	38 c0       	rjmp	.+112    	; 0x3fe <go_to_next_dot+0x252>
      servoOn(0);
      _delay_ms(600); // hopefully this is long enough
      servoOff();
      last_dot = 1; //break loop as we found last dot
    } else {
      printf("count them dots %d\n", count_dots);
 38e:	00 d0       	rcall	.+0      	; 0x390 <go_to_next_dot+0x1e4>
 390:	00 d0       	rcall	.+0      	; 0x392 <go_to_next_dot+0x1e6>
 392:	ad b7       	in	r26, 0x3d	; 61
 394:	be b7       	in	r27, 0x3e	; 62
 396:	12 96       	adiw	r26, 0x02	; 2
 398:	9c 92       	st	X, r9
 39a:	8e 92       	st	-X, r8
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	14 96       	adiw	r26, 0x04	; 4
 3a0:	dc 93       	st	X, r29
 3a2:	ce 93       	st	-X, r28
 3a4:	13 97       	sbiw	r26, 0x03	; 3
 3a6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	1b cf       	rjmp	.-458    	; 0x1ea <go_to_next_dot+0x3e>
  }

  // send back the number of dots to pythonSerial.py
  switch (count_dots) {
    case 1:
      printf("%d\r\n", 7);
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <go_to_next_dot+0x20a>
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <go_to_next_dot+0x20c>
 3b8:	8a ea       	ldi	r24, 0xAA	; 170
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	ed b7       	in	r30, 0x3d	; 61
 3be:	fe b7       	in	r31, 0x3e	; 62
 3c0:	92 83       	std	Z+2, r25	; 0x02
 3c2:	81 83       	std	Z+1, r24	; 0x01
 3c4:	87 e0       	ldi	r24, 0x07	; 7
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	17 c0       	rjmp	.+46     	; 0x3f8 <go_to_next_dot+0x24c>
      break;
    case 2:
      printf("%d\r\n", 8);
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <go_to_next_dot+0x220>
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <go_to_next_dot+0x222>
 3ce:	8a ea       	ldi	r24, 0xAA	; 170
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	ad b7       	in	r26, 0x3d	; 61
 3d4:	be b7       	in	r27, 0x3e	; 62
 3d6:	12 96       	adiw	r26, 0x02	; 2
 3d8:	9c 93       	st	X, r25
 3da:	8e 93       	st	-X, r24
 3dc:	11 97       	sbiw	r26, 0x01	; 1
 3de:	88 e0       	ldi	r24, 0x08	; 8
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	19 c0       	rjmp	.+50     	; 0x416 <go_to_next_dot+0x26a>
      break;
    case 3:
      printf("%d\r\n", 9);
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <go_to_next_dot+0x23a>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <go_to_next_dot+0x23c>
 3e8:	8a ea       	ldi	r24, 0xAA	; 170
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	ed b7       	in	r30, 0x3d	; 61
 3ee:	fe b7       	in	r31, 0x3e	; 62
 3f0:	92 83       	std	Z+2, r25	; 0x02
 3f2:	81 83       	std	Z+1, r24	; 0x01
 3f4:	89 e0       	ldi	r24, 0x09	; 9
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	94 83       	std	Z+4, r25	; 0x04
 3fa:	83 83       	std	Z+3, r24	; 0x03
 3fc:	10 c0       	rjmp	.+32     	; 0x41e <go_to_next_dot+0x272>
      break;
    case 4:
      printf("%d\r\n", 10);
 3fe:	00 d0       	rcall	.+0      	; 0x400 <go_to_next_dot+0x254>
 400:	00 d0       	rcall	.+0      	; 0x402 <go_to_next_dot+0x256>
 402:	8a ea       	ldi	r24, 0xAA	; 170
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	ad b7       	in	r26, 0x3d	; 61
 408:	be b7       	in	r27, 0x3e	; 62
 40a:	12 96       	adiw	r26, 0x02	; 2
 40c:	9c 93       	st	X, r25
 40e:	8e 93       	st	-X, r24
 410:	11 97       	sbiw	r26, 0x01	; 1
 412:	8a e0       	ldi	r24, 0x0A	; 10
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	14 96       	adiw	r26, 0x04	; 4
 418:	9c 93       	st	X, r25
 41a:	8e 93       	st	-X, r24
 41c:	13 97       	sbiw	r26, 0x03	; 3
 41e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printf>
      break;
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
    default:
      break;
  }

  PORTB |= _BV(LED); // TODO Test LED ON
 42a:	2d 9a       	sbi	0x05, 5	; 5
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	97 ea       	ldi	r25, 0xA7	; 167
 430:	a1 e6       	ldi	r26, 0x61	; 97
 432:	81 50       	subi	r24, 0x01	; 1
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	a0 40       	sbci	r26, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <go_to_next_dot+0x286>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <go_to_next_dot+0x290>
 43c:	00 00       	nop
  _delay_ms(2000); // wait for camera to take photo
  PORTB &= ~_BV(LED); // TODO Test LED OFF
 43e:	2d 98       	cbi	0x05, 5	; 5
  servoOn(1);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	93 ed       	ldi	r25, 0xD3	; 211
 44c:	a0 e3       	ldi	r26, 0x30	; 48
 44e:	81 50       	subi	r24, 0x01	; 1
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	a0 40       	sbci	r26, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <go_to_next_dot+0x2a2>
 456:	00 c0       	rjmp	.+0      	; 0x458 <go_to_next_dot+0x2ac>
 458:	00 00       	nop
  _delay_ms(1000);

  count_dots = 0; // reset our global dot counter for next well
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	cf 90       	pop	r12
 46a:	bf 90       	pop	r11
 46c:	af 90       	pop	r10
 46e:	9f 90       	pop	r9
 470:	8f 90       	pop	r8
 472:	08 95       	ret

00000474 <find_first_well>:
// TODO add control method for customization

void find_first_well() {
  //first we make sure we're on an open space
  long open_space=0;//automatically intialized to zero
  printf("looking for a good start\n");
 474:	8f ea       	ldi	r24, 0xAF	; 175
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <puts>
  servoOn(1); //1 sets DIR to clockwise
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
    _delay_us(100);
    if ( PIND & _BV(PD2) ) {
      open_space += 100; //more open_space 
      // printf("%ld \n", open_space);
    } else {
      open_space = 0;  //if no open space then reset counter
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	dc 01       	movw	r26, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	ef e8       	ldi	r30, 0x8F	; 143
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <find_first_well+0x1a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <find_first_well+0x20>
 494:	00 00       	nop
  long open_space=0;//automatically intialized to zero
  printf("looking for a good start\n");
  servoOn(1); //1 sets DIR to clockwise
  do {
    _delay_us(100);
    if ( PIND & _BV(PD2) ) {
 496:	4a 9b       	sbis	0x09, 2	; 9
 498:	f5 cf       	rjmp	.-22     	; 0x484 <find_first_well+0x10>
      open_space += 100; //more open_space 
 49a:	8c 59       	subi	r24, 0x9C	; 156
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	af 4f       	sbci	r26, 0xFF	; 255
 4a0:	bf 4f       	sbci	r27, 0xFF	; 255
      // printf("%ld \n", open_space);
    } else {
      open_space = 0;  //if no open space then reset counter
      // printf("%ld \n", open_space);
    }
  } while (open_space < 400000L);
 4a2:	80 38       	cpi	r24, 0x80	; 128
 4a4:	fa e1       	ldi	r31, 0x1A	; 26
 4a6:	9f 07       	cpc	r25, r31
 4a8:	f6 e0       	ldi	r31, 0x06	; 6
 4aa:	af 07       	cpc	r26, r31
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	bf 07       	cpc	r27, r31
 4b0:	64 f3       	brlt	.-40     	; 0x48a <find_first_well+0x16>

  servoOff();
 4b2:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
  printf("let us begin our adventure\n");
 4b6:	88 ec       	ldi	r24, 0xC8	; 200
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	93 ed       	ldi	r25, 0xD3	; 211
 4c2:	a0 e3       	ldi	r26, 0x30	; 48
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	a0 40       	sbci	r26, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <find_first_well+0x50>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <find_first_well+0x5a>
 4ce:	00 00       	nop
  _delay_ms(1000);

  //begin first dot sequence


  servoOn(1);
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
  int counter = 0;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
  while (counter < 1000)
  {

    if ( PIND & _BV(PD2) ) {
 4dc:	4a 9b       	sbis	0x09, 2	; 9
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <find_first_well+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	95 e3       	ldi	r25, 0x35	; 53
 4e2:	9a 95       	dec	r25
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <find_first_well+0x6e>
 4e6:	00 00       	nop
 4e8:	f7 cf       	rjmp	.-18     	; 0x4d8 <find_first_well+0x64>
      _delay_us(10); // this is what happens if nothing detected. (detection events give low value)
      counter = 0;
    } else {
      counter++;
 4ea:	01 96       	adiw	r24, 0x01	; 1
  //begin first dot sequence


  servoOn(1);
  int counter = 0;
  while (counter < 1000)
 4ec:	a3 e0       	ldi	r26, 0x03	; 3
 4ee:	88 3e       	cpi	r24, 0xE8	; 232
 4f0:	9a 07       	cpc	r25, r26
 4f2:	a4 f3       	brlt	.-24     	; 0x4dc <find_first_well+0x68>
    } else {
      counter++;
      //printf("counter is %d \n", counter); // don't use printf it slows everything down ruining timing measurement
    }
  }
  servoOff();
 4f4:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
  printf("what do we have here -- a well?\n");
 4f8:	83 ee       	ldi	r24, 0xE3	; 227
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	93 ed       	ldi	r25, 0xD3	; 211
 504:	a0 e3       	ldi	r26, 0x30	; 48
 506:	81 50       	subi	r24, 0x01	; 1
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	a0 40       	sbci	r26, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <find_first_well+0x92>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <find_first_well+0x9c>
 510:	00 00       	nop

  _delay_ms(1000);
  go_to_next_dot(); //begin counting dots
 512:	0e 94 d6 00 	call	0x1ac	; 0x1ac <go_to_next_dot>
}
 516:	08 95       	ret

00000518 <demo_centrifuge_stage>:

void demo_centrifuge_stage() {
  uint8_t i;
  uint8_t j;

  pwm_init();
 518:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_init>

  OCR1AH = 0x50;
 51c:	80 e5       	ldi	r24, 0x50	; 80
 51e:	80 93 89 00 	sts	0x0089, r24
  OCR1AL = 0xff;
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	80 93 88 00 	sts	0x0088, r24

  PORTB |= _BV(ENA); // ON the enable bit
 528:	2c 9a       	sbi	0x05, 4	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  for (j = j_high ; j > j_low ; j--) {
    OCR1AH = j;
 52a:	80 93 89 00 	sts	0x0089, r24
    for (i = i_high; i > i_low ; i--) {
 52e:	9f ef       	ldi	r25, 0xFF	; 255
      OCR1AL = i;
 530:	90 93 88 00 	sts	0x0088, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 534:	a7 ec       	ldi	r26, 0xC7	; 199
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	11 97       	sbiw	r26, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <demo_centrifuge_stage+0x20>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <demo_centrifuge_stage+0x26>
 53e:	00 00       	nop
  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  for (j = j_high ; j > j_low ; j--) {
    OCR1AH = j;
    for (i = i_high; i > i_low ; i--) {
 540:	91 50       	subi	r25, 0x01	; 1
 542:	b1 f7       	brne	.-20     	; 0x530 <demo_centrifuge_stage+0x18>
  uint8_t j_low  = 40;

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  for (j = j_high ; j > j_low ; j--) {
 544:	81 50       	subi	r24, 0x01	; 1
 546:	88 32       	cpi	r24, 0x28	; 40
 548:	81 f7       	brne	.-32     	; 0x52a <demo_centrifuge_stage+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	9f e4       	ldi	r25, 0x4F	; 79
 54e:	a3 ec       	ldi	r26, 0xC3	; 195
 550:	81 50       	subi	r24, 0x01	; 1
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	a0 40       	sbci	r26, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <demo_centrifuge_stage+0x38>
 558:	00 c0       	rjmp	.+0      	; 0x55a <demo_centrifuge_stage+0x42>
 55a:	00 00       	nop
      OCR1AL = i;
      _delay_us(time_delay);
    }
  }
  _delay_ms(4000);
  PORTD &= ~_BV(ENA);// OFF the enable bit
 55c:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 55e:	80 91 80 00 	lds	r24, 0x0080
 562:	8f 7e       	andi	r24, 0xEF	; 239
 564:	80 93 80 00 	sts	0x0080, r24

}
 568:	08 95       	ret

0000056a <shake_sequence>:
     }
     */
  return 0;
}

void shake_sequence(uint8_t number) {
 56a:	df 93       	push	r29
 56c:	cf 93       	push	r28
 56e:	0f 92       	push	r0
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
  uint8_t i;
  uint8_t j;

  pwm_init();
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_init>

  OCR1AH = 0x50;
 57a:	90 e5       	ldi	r25, 0x50	; 80
 57c:	90 93 89 00 	sts	0x0089, r25
  OCR1AL = 0xff;
 580:	9f ef       	ldi	r25, 0xFF	; 255
 582:	90 93 88 00 	sts	0x0088, r25

  PORTB |= _BV(ENA); // ON the enable bit
 586:	2c 9a       	sbi	0x05, 4	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	90 e0       	ldi	r25, 0x00	; 0
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 590:	68 e0       	ldi	r22, 0x08	; 8

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 592:	23 c0       	rjmp	.+70     	; 0x5da <shake_sequence+0x70>
 594:	4f ef       	ldi	r20, 0xFF	; 255
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
 596:	40 93 89 00 	sts	0x0089, r20
      for (i = i_high; i > i_low ; i--) {
 59a:	5f ef       	ldi	r21, 0xFF	; 255
        OCR1AL = i;
 59c:	50 93 88 00 	sts	0x0088, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a0:	75 e3       	ldi	r23, 0x35	; 53
 5a2:	7a 95       	dec	r23
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <shake_sequence+0x38>
 5a6:	00 00       	nop
  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
      for (i = i_high; i > i_low ; i--) {
 5a8:	51 50       	subi	r21, 0x01	; 1
 5aa:	c1 f7       	brne	.-16     	; 0x59c <shake_sequence+0x32>
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
 5ac:	41 50       	subi	r20, 0x01	; 1
 5ae:	42 33       	cpi	r20, 0x32	; 50
 5b0:	91 f7       	brne	.-28     	; 0x596 <shake_sequence+0x2c>
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
 5b2:	40 93 89 00 	sts	0x0089, r20
      for (i = i_low; i < i_high; i++) {
 5b6:	50 e0       	ldi	r21, 0x00	; 0
        OCR1AL = i;
 5b8:	50 93 88 00 	sts	0x0088, r21
 5bc:	e5 e3       	ldi	r30, 0x35	; 53
 5be:	ea 95       	dec	r30
 5c0:	f1 f7       	brne	.-4      	; 0x5be <shake_sequence+0x54>
 5c2:	00 00       	nop
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
      for (i = i_low; i < i_high; i++) {
 5c4:	5f 5f       	subi	r21, 0xFF	; 255
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	b9 f7       	brne	.-18     	; 0x5b8 <shake_sequence+0x4e>
      for (i = i_high; i > i_low ; i--) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
 5ca:	4f 5f       	subi	r20, 0xFF	; 255
 5cc:	4f 3f       	cpi	r20, 0xFF	; 255
 5ce:	89 f7       	brne	.-30     	; 0x5b2 <shake_sequence+0x48>
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 5d0:	45 b1       	in	r20, 0x05	; 5
 5d2:	46 27       	eor	r20, r22
 5d4:	45 b9       	out	0x05, r20	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 5d6:	2f 5f       	subi	r18, 0xFF	; 255
 5d8:	3f 4f       	sbci	r19, 0xFF	; 255
 5da:	28 17       	cp	r18, r24
 5dc:	39 07       	cpc	r19, r25
 5de:	d4 f2       	brlt	.-76     	; 0x594 <shake_sequence+0x2a>
      }
    }
    PORTB ^= _BV(DIR);

  }
  PORTD &= ~_BV(ENA);// OFF the enable bit
 5e0:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 5e2:	80 91 80 00 	lds	r24, 0x0080
 5e6:	8f 7e       	andi	r24, 0xEF	; 239
 5e8:	80 93 80 00 	sts	0x0080, r24
}
 5ec:	0f 90       	pop	r0
 5ee:	cf 91       	pop	r28
 5f0:	df 91       	pop	r29
 5f2:	08 95       	ret

000005f4 <set_baud>:
  */
}


void set_baud(void) {
  UBRR0H = (BRC >> 8);
 5f4:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = BRC;
 5f8:	87 e6       	ldi	r24, 0x67	; 103
 5fa:	80 93 c4 00 	sts	0x00C4, r24

  //enables rx and tx, page 183 example from documentation
  UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0 ) | (1 << TXCIE0);
 5fe:	88 ed       	ldi	r24, 0xD8	; 216
 600:	80 93 c1 00 	sts	0x00C1, r24

  //198 of documentation, these two bits make it 8-bit
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 604:	86 e0       	ldi	r24, 0x06	; 6
 606:	80 93 c2 00 	sts	0x00C2, r24

  //since we don't use 2x
  UCSR0A &= ~(_BV(U2X0));
 60a:	e0 ec       	ldi	r30, 0xC0	; 192
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	8d 7f       	andi	r24, 0xFD	; 253
 612:	80 83       	st	Z, r24

  //redirecting standard out and in to UART -- very clever tuupola
  stdout = &uart_output;
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	92 e0       	ldi	r25, 0x02	; 2
 618:	90 93 25 02 	sts	0x0225, r25
 61c:	80 93 24 02 	sts	0x0224, r24
  stdin  = &uart_input;
 620:	81 e1       	ldi	r24, 0x11	; 17
 622:	92 e0       	ldi	r25, 0x02	; 2
 624:	90 93 23 02 	sts	0x0223, r25
 628:	80 93 22 02 	sts	0x0222, r24

}
 62c:	08 95       	ret

0000062e <main>:
void demo_centrifuge_stage(void); // TODO add control method for customization
//void demo_full_sequence(void); // TODO align sequence in a function
//======================

int main (void) {
  io_init(); //Setup IO pins and defaults
 62e:	0e 94 9a 00 	call	0x134	; 0x134 <io_init>
  set_baud();
 632:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <set_baud>

  char input;

  while (1) {

    input = getchar();
 636:	80 91 22 02 	lds	r24, 0x0222
 63a:	90 91 23 02 	lds	r25, 0x0223
 63e:	0e 94 76 03 	call	0x6ec	; 0x6ec <fgetc>

    //first stage will be a simple switch case`


    switch (input) {
 642:	83 33       	cpi	r24, 0x33	; 51
 644:	31 f1       	breq	.+76     	; 0x692 <main+0x64>
 646:	84 33       	cpi	r24, 0x34	; 52
 648:	30 f4       	brcc	.+12     	; 0x656 <main+0x28>
 64a:	81 33       	cpi	r24, 0x31	; 49
 64c:	59 f0       	breq	.+22     	; 0x664 <main+0x36>
 64e:	82 33       	cpi	r24, 0x32	; 50
 650:	09 f0       	breq	.+2      	; 0x654 <main+0x26>
 652:	43 c0       	rjmp	.+134    	; 0x6da <main+0xac>
 654:	13 c0       	rjmp	.+38     	; 0x67c <main+0x4e>
 656:	85 33       	cpi	r24, 0x35	; 53
 658:	81 f1       	breq	.+96     	; 0x6ba <main+0x8c>
 65a:	85 33       	cpi	r24, 0x35	; 53
 65c:	28 f1       	brcs	.+74     	; 0x6a8 <main+0x7a>
 65e:	86 33       	cpi	r24, 0x36	; 54
 660:	e1 f5       	brne	.+120    	; 0x6da <main+0xac>
 662:	33 c0       	rjmp	.+102    	; 0x6ca <main+0x9c>
      case '1':
        //shake sequence
        PORTB |= _BV(ENA); // ON the enable bit
 664:	2c 9a       	sbi	0x05, 4	; 5
        shake_sequence(2); // TODO shake twice -- can mod this later for custom shakes
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	0e 94 b5 02 	call	0x56a	; 0x56a <shake_sequence>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 66c:	2c 98       	cbi	0x05, 4	; 5
        putchar('1');
 66e:	60 91 24 02 	lds	r22, 0x0224
 672:	70 91 25 02 	lds	r23, 0x0225
 676:	81 e3       	ldi	r24, 0x31	; 49
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	35 c0       	rjmp	.+106    	; 0x6e6 <main+0xb8>
        break;
      case '2':
        //ramp sequence
        PORTB |= _BV(ENA); // ON the enable bit
 67c:	2c 9a       	sbi	0x05, 4	; 5
        demo_centrifuge_stage(); // TODO add control method for customization
 67e:	0e 94 8c 02 	call	0x518	; 0x518 <demo_centrifuge_stage>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 682:	2c 98       	cbi	0x05, 4	; 5
        putchar('2');
 684:	60 91 24 02 	lds	r22, 0x0224
 688:	70 91 25 02 	lds	r23, 0x0225
 68c:	82 e3       	ldi	r24, 0x32	; 50
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	2a c0       	rjmp	.+84     	; 0x6e6 <main+0xb8>
        break;
      case '3':
        //recording_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 692:	2c 9a       	sbi	0x05, 4	; 5
        find_first_well(); // TODO find the pwm speed for Servo.h 
 694:	0e 94 3a 02 	call	0x474	; 0x474 <find_first_well>
        //and emulate to avoid needing to perform trial and error
        PORTB &= ~_BV(ENA);// OFF the enable bit
 698:	2c 98       	cbi	0x05, 4	; 5
        putchar('3');
 69a:	60 91 24 02 	lds	r22, 0x0224
 69e:	70 91 25 02 	lds	r23, 0x0225
 6a2:	83 e3       	ldi	r24, 0x33	; 51
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	1f c0       	rjmp	.+62     	; 0x6e6 <main+0xb8>
        break;
      case '4':
        //full_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 6a8:	2c 9a       	sbi	0x05, 4	; 5
        //demo_full_sequence();// TODO create full sequence
        PORTB &= ~_BV(ENA);// OFF the enable bit
 6aa:	2c 98       	cbi	0x05, 4	; 5
        putchar('4');
 6ac:	60 91 24 02 	lds	r22, 0x0224
 6b0:	70 91 25 02 	lds	r23, 0x0225
 6b4:	84 e3       	ldi	r24, 0x34	; 52
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <main+0xb8>
        break;
      case '5':
        //LED ON
        PORTB |= _BV(LED); // TODO Test LED ON
 6ba:	2d 9a       	sbi	0x05, 5	; 5
        putchar('5');
 6bc:	60 91 24 02 	lds	r22, 0x0224
 6c0:	70 91 25 02 	lds	r23, 0x0225
 6c4:	85 e3       	ldi	r24, 0x35	; 53
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <main+0xb8>
        break;
      case '6':
        //LED OFF
        PORTB &= ~_BV(LED); // TODO Test LED OFF
 6ca:	2d 98       	cbi	0x05, 5	; 5
        putchar('6');
 6cc:	60 91 24 02 	lds	r22, 0x0224
 6d0:	70 91 25 02 	lds	r23, 0x0225
 6d4:	86 e3       	ldi	r24, 0x36	; 54
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <main+0xb8>
        break;
      default:
        putchar('a');
 6da:	60 91 24 02 	lds	r22, 0x0224
 6de:	70 91 25 02 	lds	r23, 0x0225
 6e2:	81 e6       	ldi	r24, 0x61	; 97
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 6ea:	a5 cf       	rjmp	.-182    	; 0x636 <main+0x8>

000006ec <fgetc>:
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
 6f2:	3b 81       	ldd	r19, Y+3	; 0x03
 6f4:	30 ff       	sbrs	r19, 0
 6f6:	36 c0       	rjmp	.+108    	; 0x764 <fgetc+0x78>
 6f8:	36 ff       	sbrs	r19, 6
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <fgetc+0x22>
 6fc:	3f 7b       	andi	r19, 0xBF	; 191
 6fe:	3b 83       	std	Y+3, r19	; 0x03
 700:	8e 81       	ldd	r24, Y+6	; 0x06
 702:	9f 81       	ldd	r25, Y+7	; 0x07
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	9f 83       	std	Y+7, r25	; 0x07
 708:	8e 83       	std	Y+6, r24	; 0x06
 70a:	2a 81       	ldd	r18, Y+2	; 0x02
 70c:	29 c0       	rjmp	.+82     	; 0x760 <fgetc+0x74>
 70e:	32 ff       	sbrs	r19, 2
 710:	0f c0       	rjmp	.+30     	; 0x730 <fgetc+0x44>
 712:	e8 81       	ld	r30, Y
 714:	f9 81       	ldd	r31, Y+1	; 0x01
 716:	80 81       	ld	r24, Z
 718:	99 27       	eor	r25, r25
 71a:	87 fd       	sbrc	r24, 7
 71c:	90 95       	com	r25
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	19 f4       	brne	.+6      	; 0x728 <fgetc+0x3c>
 722:	30 62       	ori	r19, 0x20	; 32
 724:	3b 83       	std	Y+3, r19	; 0x03
 726:	1e c0       	rjmp	.+60     	; 0x764 <fgetc+0x78>
 728:	31 96       	adiw	r30, 0x01	; 1
 72a:	f9 83       	std	Y+1, r31	; 0x01
 72c:	e8 83       	st	Y, r30
 72e:	11 c0       	rjmp	.+34     	; 0x752 <fgetc+0x66>
 730:	ea 85       	ldd	r30, Y+10	; 0x0a
 732:	fb 85       	ldd	r31, Y+11	; 0x0b
 734:	ce 01       	movw	r24, r28
 736:	09 95       	icall
 738:	97 ff       	sbrs	r25, 7
 73a:	0b c0       	rjmp	.+22     	; 0x752 <fgetc+0x66>
 73c:	2b 81       	ldd	r18, Y+3	; 0x03
 73e:	3f ef       	ldi	r19, 0xFF	; 255
 740:	8f 3f       	cpi	r24, 0xFF	; 255
 742:	93 07       	cpc	r25, r19
 744:	11 f4       	brne	.+4      	; 0x74a <fgetc+0x5e>
 746:	80 e1       	ldi	r24, 0x10	; 16
 748:	01 c0       	rjmp	.+2      	; 0x74c <fgetc+0x60>
 74a:	80 e2       	ldi	r24, 0x20	; 32
 74c:	82 2b       	or	r24, r18
 74e:	8b 83       	std	Y+3, r24	; 0x03
 750:	09 c0       	rjmp	.+18     	; 0x764 <fgetc+0x78>
 752:	2e 81       	ldd	r18, Y+6	; 0x06
 754:	3f 81       	ldd	r19, Y+7	; 0x07
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	3f 4f       	sbci	r19, 0xFF	; 255
 75a:	3f 83       	std	Y+7, r19	; 0x07
 75c:	2e 83       	std	Y+6, r18	; 0x06
 75e:	28 2f       	mov	r18, r24
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <fgetc+0x7c>
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	3f ef       	ldi	r19, 0xFF	; 255
 768:	c9 01       	movw	r24, r18
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	08 95       	ret

00000770 <fputc>:
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	8c 01       	movw	r16, r24
 77a:	eb 01       	movw	r28, r22
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	81 ff       	sbrs	r24, 1
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <fputc+0x48>
 782:	82 ff       	sbrs	r24, 2
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <fputc+0x30>
 786:	2e 81       	ldd	r18, Y+6	; 0x06
 788:	3f 81       	ldd	r19, Y+7	; 0x07
 78a:	8c 81       	ldd	r24, Y+4	; 0x04
 78c:	9d 81       	ldd	r25, Y+5	; 0x05
 78e:	28 17       	cp	r18, r24
 790:	39 07       	cpc	r19, r25
 792:	64 f4       	brge	.+24     	; 0x7ac <fputc+0x3c>
 794:	e8 81       	ld	r30, Y
 796:	f9 81       	ldd	r31, Y+1	; 0x01
 798:	01 93       	st	Z+, r16
 79a:	f9 83       	std	Y+1, r31	; 0x01
 79c:	e8 83       	st	Y, r30
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <fputc+0x3c>
 7a0:	e8 85       	ldd	r30, Y+8	; 0x08
 7a2:	f9 85       	ldd	r31, Y+9	; 0x09
 7a4:	80 2f       	mov	r24, r16
 7a6:	09 95       	icall
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	31 f4       	brne	.+12     	; 0x7b8 <fputc+0x48>
 7ac:	8e 81       	ldd	r24, Y+6	; 0x06
 7ae:	9f 81       	ldd	r25, Y+7	; 0x07
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	9f 83       	std	Y+7, r25	; 0x07
 7b4:	8e 83       	std	Y+6, r24	; 0x06
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <fputc+0x4c>
 7b8:	0f ef       	ldi	r16, 0xFF	; 255
 7ba:	1f ef       	ldi	r17, 0xFF	; 255
 7bc:	c8 01       	movw	r24, r16
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	08 95       	ret

000007c8 <printf>:
 7c8:	a0 e0       	ldi	r26, 0x00	; 0
 7ca:	b0 e0       	ldi	r27, 0x00	; 0
 7cc:	ea ee       	ldi	r30, 0xEA	; 234
 7ce:	f3 e0       	ldi	r31, 0x03	; 3
 7d0:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__prologue_saves__+0x20>
 7d4:	fe 01       	movw	r30, r28
 7d6:	35 96       	adiw	r30, 0x05	; 5
 7d8:	61 91       	ld	r22, Z+
 7da:	71 91       	ld	r23, Z+
 7dc:	80 91 24 02 	lds	r24, 0x0224
 7e0:	90 91 25 02 	lds	r25, 0x0225
 7e4:	af 01       	movw	r20, r30
 7e6:	0e 94 2e 04 	call	0x85c	; 0x85c <vfprintf>
 7ea:	20 96       	adiw	r28, 0x00	; 0
 7ec:	e2 e0       	ldi	r30, 0x02	; 2
 7ee:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__epilogue_restores__+0x20>

000007f2 <puts>:
 7f2:	ef 92       	push	r14
 7f4:	ff 92       	push	r15
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	8c 01       	movw	r16, r24
 800:	e0 91 24 02 	lds	r30, 0x0224
 804:	f0 91 25 02 	lds	r31, 0x0225
 808:	83 81       	ldd	r24, Z+3	; 0x03
 80a:	81 ff       	sbrs	r24, 1
 80c:	1f c0       	rjmp	.+62     	; 0x84c <puts+0x5a>
 80e:	c0 e0       	ldi	r28, 0x00	; 0
 810:	d0 e0       	ldi	r29, 0x00	; 0
 812:	0a c0       	rjmp	.+20     	; 0x828 <puts+0x36>
 814:	db 01       	movw	r26, r22
 816:	18 96       	adiw	r26, 0x08	; 8
 818:	ed 91       	ld	r30, X+
 81a:	fc 91       	ld	r31, X
 81c:	19 97       	sbiw	r26, 0x09	; 9
 81e:	09 95       	icall
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	11 f0       	breq	.+4      	; 0x828 <puts+0x36>
 824:	cf ef       	ldi	r28, 0xFF	; 255
 826:	df ef       	ldi	r29, 0xFF	; 255
 828:	f8 01       	movw	r30, r16
 82a:	81 91       	ld	r24, Z+
 82c:	8f 01       	movw	r16, r30
 82e:	60 91 24 02 	lds	r22, 0x0224
 832:	70 91 25 02 	lds	r23, 0x0225
 836:	88 23       	and	r24, r24
 838:	69 f7       	brne	.-38     	; 0x814 <puts+0x22>
 83a:	db 01       	movw	r26, r22
 83c:	18 96       	adiw	r26, 0x08	; 8
 83e:	ed 91       	ld	r30, X+
 840:	fc 91       	ld	r31, X
 842:	19 97       	sbiw	r26, 0x09	; 9
 844:	8a e0       	ldi	r24, 0x0A	; 10
 846:	09 95       	icall
 848:	00 97       	sbiw	r24, 0x00	; 0
 84a:	11 f0       	breq	.+4      	; 0x850 <puts+0x5e>
 84c:	cf ef       	ldi	r28, 0xFF	; 255
 84e:	df ef       	ldi	r29, 0xFF	; 255
 850:	ce 01       	movw	r24, r28
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	e6 e0       	ldi	r30, 0x06	; 6
 858:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__epilogue_restores__+0x18>

0000085c <vfprintf>:
 85c:	ac e0       	ldi	r26, 0x0C	; 12
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e4 e3       	ldi	r30, 0x34	; 52
 862:	f4 e0       	ldi	r31, 0x04	; 4
 864:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__prologue_saves__>
 868:	6c 01       	movw	r12, r24
 86a:	1b 01       	movw	r2, r22
 86c:	8a 01       	movw	r16, r20
 86e:	fc 01       	movw	r30, r24
 870:	17 82       	std	Z+7, r1	; 0x07
 872:	16 82       	std	Z+6, r1	; 0x06
 874:	83 81       	ldd	r24, Z+3	; 0x03
 876:	81 ff       	sbrs	r24, 1
 878:	d1 c1       	rjmp	.+930    	; 0xc1c <__stack+0x31d>
 87a:	2e 01       	movw	r4, r28
 87c:	08 94       	sec
 87e:	41 1c       	adc	r4, r1
 880:	51 1c       	adc	r5, r1
 882:	f6 01       	movw	r30, r12
 884:	93 81       	ldd	r25, Z+3	; 0x03
 886:	f1 01       	movw	r30, r2
 888:	93 fd       	sbrc	r25, 3
 88a:	85 91       	lpm	r24, Z+
 88c:	93 ff       	sbrs	r25, 3
 88e:	81 91       	ld	r24, Z+
 890:	1f 01       	movw	r2, r30
 892:	88 23       	and	r24, r24
 894:	09 f4       	brne	.+2      	; 0x898 <vfprintf+0x3c>
 896:	be c1       	rjmp	.+892    	; 0xc14 <__stack+0x315>
 898:	85 32       	cpi	r24, 0x25	; 37
 89a:	39 f4       	brne	.+14     	; 0x8aa <vfprintf+0x4e>
 89c:	93 fd       	sbrc	r25, 3
 89e:	85 91       	lpm	r24, Z+
 8a0:	93 ff       	sbrs	r25, 3
 8a2:	81 91       	ld	r24, Z+
 8a4:	1f 01       	movw	r2, r30
 8a6:	85 32       	cpi	r24, 0x25	; 37
 8a8:	29 f4       	brne	.+10     	; 0x8b4 <vfprintf+0x58>
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	b6 01       	movw	r22, r12
 8ae:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 8b2:	e7 cf       	rjmp	.-50     	; 0x882 <vfprintf+0x26>
 8b4:	ee 24       	eor	r14, r14
 8b6:	ff 24       	eor	r15, r15
 8b8:	20 e0       	ldi	r18, 0x00	; 0
 8ba:	20 32       	cpi	r18, 0x20	; 32
 8bc:	b0 f4       	brcc	.+44     	; 0x8ea <vfprintf+0x8e>
 8be:	8b 32       	cpi	r24, 0x2B	; 43
 8c0:	69 f0       	breq	.+26     	; 0x8dc <vfprintf+0x80>
 8c2:	8c 32       	cpi	r24, 0x2C	; 44
 8c4:	28 f4       	brcc	.+10     	; 0x8d0 <vfprintf+0x74>
 8c6:	80 32       	cpi	r24, 0x20	; 32
 8c8:	51 f0       	breq	.+20     	; 0x8de <vfprintf+0x82>
 8ca:	83 32       	cpi	r24, 0x23	; 35
 8cc:	71 f4       	brne	.+28     	; 0x8ea <vfprintf+0x8e>
 8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <vfprintf+0x8a>
 8d0:	8d 32       	cpi	r24, 0x2D	; 45
 8d2:	39 f0       	breq	.+14     	; 0x8e2 <vfprintf+0x86>
 8d4:	80 33       	cpi	r24, 0x30	; 48
 8d6:	49 f4       	brne	.+18     	; 0x8ea <vfprintf+0x8e>
 8d8:	21 60       	ori	r18, 0x01	; 1
 8da:	2c c0       	rjmp	.+88     	; 0x934 <__stack+0x35>
 8dc:	22 60       	ori	r18, 0x02	; 2
 8de:	24 60       	ori	r18, 0x04	; 4
 8e0:	29 c0       	rjmp	.+82     	; 0x934 <__stack+0x35>
 8e2:	28 60       	ori	r18, 0x08	; 8
 8e4:	27 c0       	rjmp	.+78     	; 0x934 <__stack+0x35>
 8e6:	20 61       	ori	r18, 0x10	; 16
 8e8:	25 c0       	rjmp	.+74     	; 0x934 <__stack+0x35>
 8ea:	27 fd       	sbrc	r18, 7
 8ec:	2c c0       	rjmp	.+88     	; 0x946 <__stack+0x47>
 8ee:	38 2f       	mov	r19, r24
 8f0:	30 53       	subi	r19, 0x30	; 48
 8f2:	3a 30       	cpi	r19, 0x0A	; 10
 8f4:	98 f4       	brcc	.+38     	; 0x91c <__stack+0x1d>
 8f6:	26 ff       	sbrs	r18, 6
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xb>
 8fa:	8e 2d       	mov	r24, r14
 8fc:	88 0f       	add	r24, r24
 8fe:	e8 2e       	mov	r14, r24
 900:	ee 0c       	add	r14, r14
 902:	ee 0c       	add	r14, r14
 904:	e8 0e       	add	r14, r24
 906:	e3 0e       	add	r14, r19
 908:	15 c0       	rjmp	.+42     	; 0x934 <__stack+0x35>
 90a:	8f 2d       	mov	r24, r15
 90c:	88 0f       	add	r24, r24
 90e:	f8 2e       	mov	r15, r24
 910:	ff 0c       	add	r15, r15
 912:	ff 0c       	add	r15, r15
 914:	f8 0e       	add	r15, r24
 916:	f3 0e       	add	r15, r19
 918:	20 62       	ori	r18, 0x20	; 32
 91a:	0c c0       	rjmp	.+24     	; 0x934 <__stack+0x35>
 91c:	8e 32       	cpi	r24, 0x2E	; 46
 91e:	21 f4       	brne	.+8      	; 0x928 <__stack+0x29>
 920:	26 fd       	sbrc	r18, 6
 922:	78 c1       	rjmp	.+752    	; 0xc14 <__stack+0x315>
 924:	20 64       	ori	r18, 0x40	; 64
 926:	06 c0       	rjmp	.+12     	; 0x934 <__stack+0x35>
 928:	8c 36       	cpi	r24, 0x6C	; 108
 92a:	11 f4       	brne	.+4      	; 0x930 <__stack+0x31>
 92c:	20 68       	ori	r18, 0x80	; 128
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
 930:	88 36       	cpi	r24, 0x68	; 104
 932:	49 f4       	brne	.+18     	; 0x946 <__stack+0x47>
 934:	f1 01       	movw	r30, r2
 936:	93 fd       	sbrc	r25, 3
 938:	85 91       	lpm	r24, Z+
 93a:	93 ff       	sbrs	r25, 3
 93c:	81 91       	ld	r24, Z+
 93e:	1f 01       	movw	r2, r30
 940:	88 23       	and	r24, r24
 942:	09 f0       	breq	.+2      	; 0x946 <__stack+0x47>
 944:	ba cf       	rjmp	.-140    	; 0x8ba <vfprintf+0x5e>
 946:	98 2f       	mov	r25, r24
 948:	95 54       	subi	r25, 0x45	; 69
 94a:	93 30       	cpi	r25, 0x03	; 3
 94c:	18 f0       	brcs	.+6      	; 0x954 <__stack+0x55>
 94e:	90 52       	subi	r25, 0x20	; 32
 950:	93 30       	cpi	r25, 0x03	; 3
 952:	28 f4       	brcc	.+10     	; 0x95e <__stack+0x5f>
 954:	0c 5f       	subi	r16, 0xFC	; 252
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	ff e3       	ldi	r31, 0x3F	; 63
 95a:	f9 83       	std	Y+1, r31	; 0x01
 95c:	0d c0       	rjmp	.+26     	; 0x978 <__stack+0x79>
 95e:	83 36       	cpi	r24, 0x63	; 99
 960:	31 f0       	breq	.+12     	; 0x96e <__stack+0x6f>
 962:	83 37       	cpi	r24, 0x73	; 115
 964:	71 f0       	breq	.+28     	; 0x982 <__stack+0x83>
 966:	83 35       	cpi	r24, 0x53	; 83
 968:	09 f0       	breq	.+2      	; 0x96c <__stack+0x6d>
 96a:	60 c0       	rjmp	.+192    	; 0xa2c <__stack+0x12d>
 96c:	22 c0       	rjmp	.+68     	; 0x9b2 <__stack+0xb3>
 96e:	f8 01       	movw	r30, r16
 970:	80 81       	ld	r24, Z
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	0e 5f       	subi	r16, 0xFE	; 254
 976:	1f 4f       	sbci	r17, 0xFF	; 255
 978:	42 01       	movw	r8, r4
 97a:	71 e0       	ldi	r23, 0x01	; 1
 97c:	a7 2e       	mov	r10, r23
 97e:	b1 2c       	mov	r11, r1
 980:	16 c0       	rjmp	.+44     	; 0x9ae <__stack+0xaf>
 982:	62 e0       	ldi	r22, 0x02	; 2
 984:	66 2e       	mov	r6, r22
 986:	71 2c       	mov	r7, r1
 988:	60 0e       	add	r6, r16
 98a:	71 1e       	adc	r7, r17
 98c:	f8 01       	movw	r30, r16
 98e:	80 80       	ld	r8, Z
 990:	91 80       	ldd	r9, Z+1	; 0x01
 992:	26 ff       	sbrs	r18, 6
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x9d>
 996:	6e 2d       	mov	r22, r14
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	6f ef       	ldi	r22, 0xFF	; 255
 99e:	7f ef       	ldi	r23, 0xFF	; 255
 9a0:	c4 01       	movw	r24, r8
 9a2:	2c 87       	std	Y+12, r18	; 0x0c
 9a4:	0e 94 20 06 	call	0xc40	; 0xc40 <strnlen>
 9a8:	5c 01       	movw	r10, r24
 9aa:	83 01       	movw	r16, r6
 9ac:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ae:	2f 77       	andi	r18, 0x7F	; 127
 9b0:	17 c0       	rjmp	.+46     	; 0x9e0 <__stack+0xe1>
 9b2:	52 e0       	ldi	r21, 0x02	; 2
 9b4:	65 2e       	mov	r6, r21
 9b6:	71 2c       	mov	r7, r1
 9b8:	60 0e       	add	r6, r16
 9ba:	71 1e       	adc	r7, r17
 9bc:	f8 01       	movw	r30, r16
 9be:	80 80       	ld	r8, Z
 9c0:	91 80       	ldd	r9, Z+1	; 0x01
 9c2:	26 ff       	sbrs	r18, 6
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__stack+0xcd>
 9c6:	6e 2d       	mov	r22, r14
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0xd1>
 9cc:	6f ef       	ldi	r22, 0xFF	; 255
 9ce:	7f ef       	ldi	r23, 0xFF	; 255
 9d0:	c4 01       	movw	r24, r8
 9d2:	2c 87       	std	Y+12, r18	; 0x0c
 9d4:	0e 94 15 06 	call	0xc2a	; 0xc2a <strnlen_P>
 9d8:	5c 01       	movw	r10, r24
 9da:	2c 85       	ldd	r18, Y+12	; 0x0c
 9dc:	20 68       	ori	r18, 0x80	; 128
 9de:	83 01       	movw	r16, r6
 9e0:	23 fd       	sbrc	r18, 3
 9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__stack+0x125>
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <__stack+0xf7>
 9e6:	80 e2       	ldi	r24, 0x20	; 32
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	b6 01       	movw	r22, r12
 9ec:	2c 87       	std	Y+12, r18	; 0x0c
 9ee:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 9f2:	fa 94       	dec	r15
 9f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f6:	8f 2d       	mov	r24, r15
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	a8 16       	cp	r10, r24
 9fc:	b9 06       	cpc	r11, r25
 9fe:	98 f3       	brcs	.-26     	; 0x9e6 <__stack+0xe7>
 a00:	11 c0       	rjmp	.+34     	; 0xa24 <__stack+0x125>
 a02:	f4 01       	movw	r30, r8
 a04:	27 fd       	sbrc	r18, 7
 a06:	85 91       	lpm	r24, Z+
 a08:	27 ff       	sbrs	r18, 7
 a0a:	81 91       	ld	r24, Z+
 a0c:	4f 01       	movw	r8, r30
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	b6 01       	movw	r22, r12
 a12:	2c 87       	std	Y+12, r18	; 0x0c
 a14:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 a18:	2c 85       	ldd	r18, Y+12	; 0x0c
 a1a:	f1 10       	cpse	r15, r1
 a1c:	fa 94       	dec	r15
 a1e:	08 94       	sec
 a20:	a1 08       	sbc	r10, r1
 a22:	b1 08       	sbc	r11, r1
 a24:	a1 14       	cp	r10, r1
 a26:	b1 04       	cpc	r11, r1
 a28:	61 f7       	brne	.-40     	; 0xa02 <__stack+0x103>
 a2a:	f1 c0       	rjmp	.+482    	; 0xc0e <__stack+0x30f>
 a2c:	84 36       	cpi	r24, 0x64	; 100
 a2e:	11 f0       	breq	.+4      	; 0xa34 <__stack+0x135>
 a30:	89 36       	cpi	r24, 0x69	; 105
 a32:	49 f5       	brne	.+82     	; 0xa86 <__stack+0x187>
 a34:	27 ff       	sbrs	r18, 7
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <__stack+0x149>
 a38:	f8 01       	movw	r30, r16
 a3a:	60 81       	ld	r22, Z
 a3c:	71 81       	ldd	r23, Z+1	; 0x01
 a3e:	82 81       	ldd	r24, Z+2	; 0x02
 a40:	93 81       	ldd	r25, Z+3	; 0x03
 a42:	0c 5f       	subi	r16, 0xFC	; 252
 a44:	1f 4f       	sbci	r17, 0xFF	; 255
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <__stack+0x15b>
 a48:	f8 01       	movw	r30, r16
 a4a:	60 81       	ld	r22, Z
 a4c:	71 81       	ldd	r23, Z+1	; 0x01
 a4e:	88 27       	eor	r24, r24
 a50:	77 fd       	sbrc	r23, 7
 a52:	80 95       	com	r24
 a54:	98 2f       	mov	r25, r24
 a56:	0e 5f       	subi	r16, 0xFE	; 254
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	4f e6       	ldi	r20, 0x6F	; 111
 a5c:	b4 2e       	mov	r11, r20
 a5e:	b2 22       	and	r11, r18
 a60:	97 ff       	sbrs	r25, 7
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <__stack+0x177>
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	f0 e8       	ldi	r31, 0x80	; 128
 a74:	bf 2a       	or	r11, r31
 a76:	a2 01       	movw	r20, r4
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__ultoa_invert>
 a80:	78 2e       	mov	r7, r24
 a82:	74 18       	sub	r7, r4
 a84:	45 c0       	rjmp	.+138    	; 0xb10 <__stack+0x211>
 a86:	85 37       	cpi	r24, 0x75	; 117
 a88:	31 f4       	brne	.+12     	; 0xa96 <__stack+0x197>
 a8a:	3f ee       	ldi	r19, 0xEF	; 239
 a8c:	b3 2e       	mov	r11, r19
 a8e:	b2 22       	and	r11, r18
 a90:	2a e0       	ldi	r18, 0x0A	; 10
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	25 c0       	rjmp	.+74     	; 0xae0 <__stack+0x1e1>
 a96:	99 ef       	ldi	r25, 0xF9	; 249
 a98:	b9 2e       	mov	r11, r25
 a9a:	b2 22       	and	r11, r18
 a9c:	8f 36       	cpi	r24, 0x6F	; 111
 a9e:	c1 f0       	breq	.+48     	; 0xad0 <__stack+0x1d1>
 aa0:	80 37       	cpi	r24, 0x70	; 112
 aa2:	20 f4       	brcc	.+8      	; 0xaac <__stack+0x1ad>
 aa4:	88 35       	cpi	r24, 0x58	; 88
 aa6:	09 f0       	breq	.+2      	; 0xaaa <__stack+0x1ab>
 aa8:	b5 c0       	rjmp	.+362    	; 0xc14 <__stack+0x315>
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <__stack+0x1c7>
 aac:	80 37       	cpi	r24, 0x70	; 112
 aae:	21 f0       	breq	.+8      	; 0xab8 <__stack+0x1b9>
 ab0:	88 37       	cpi	r24, 0x78	; 120
 ab2:	09 f0       	breq	.+2      	; 0xab6 <__stack+0x1b7>
 ab4:	af c0       	rjmp	.+350    	; 0xc14 <__stack+0x315>
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <__stack+0x1bd>
 ab8:	20 e1       	ldi	r18, 0x10	; 16
 aba:	b2 2a       	or	r11, r18
 abc:	b4 fe       	sbrs	r11, 4
 abe:	0b c0       	rjmp	.+22     	; 0xad6 <__stack+0x1d7>
 ac0:	84 e0       	ldi	r24, 0x04	; 4
 ac2:	b8 2a       	or	r11, r24
 ac4:	08 c0       	rjmp	.+16     	; 0xad6 <__stack+0x1d7>
 ac6:	b4 fe       	sbrs	r11, 4
 ac8:	09 c0       	rjmp	.+18     	; 0xadc <__stack+0x1dd>
 aca:	e6 e0       	ldi	r30, 0x06	; 6
 acc:	be 2a       	or	r11, r30
 ace:	06 c0       	rjmp	.+12     	; 0xadc <__stack+0x1dd>
 ad0:	28 e0       	ldi	r18, 0x08	; 8
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__stack+0x1e1>
 ad6:	20 e1       	ldi	r18, 0x10	; 16
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x1e1>
 adc:	20 e1       	ldi	r18, 0x10	; 16
 ade:	32 e0       	ldi	r19, 0x02	; 2
 ae0:	b7 fe       	sbrs	r11, 7
 ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <__stack+0x1f5>
 ae4:	f8 01       	movw	r30, r16
 ae6:	60 81       	ld	r22, Z
 ae8:	71 81       	ldd	r23, Z+1	; 0x01
 aea:	82 81       	ldd	r24, Z+2	; 0x02
 aec:	93 81       	ldd	r25, Z+3	; 0x03
 aee:	0c 5f       	subi	r16, 0xFC	; 252
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <__stack+0x203>
 af4:	f8 01       	movw	r30, r16
 af6:	60 81       	ld	r22, Z
 af8:	71 81       	ldd	r23, Z+1	; 0x01
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 5f       	subi	r16, 0xFE	; 254
 b00:	1f 4f       	sbci	r17, 0xFF	; 255
 b02:	a2 01       	movw	r20, r4
 b04:	0e 94 2b 06 	call	0xc56	; 0xc56 <__ultoa_invert>
 b08:	78 2e       	mov	r7, r24
 b0a:	74 18       	sub	r7, r4
 b0c:	ff e7       	ldi	r31, 0x7F	; 127
 b0e:	bf 22       	and	r11, r31
 b10:	b6 fe       	sbrs	r11, 6
 b12:	0b c0       	rjmp	.+22     	; 0xb2a <__stack+0x22b>
 b14:	2e ef       	ldi	r18, 0xFE	; 254
 b16:	b2 22       	and	r11, r18
 b18:	7e 14       	cp	r7, r14
 b1a:	38 f4       	brcc	.+14     	; 0xb2a <__stack+0x22b>
 b1c:	b4 fe       	sbrs	r11, 4
 b1e:	07 c0       	rjmp	.+14     	; 0xb2e <__stack+0x22f>
 b20:	b2 fc       	sbrc	r11, 2
 b22:	05 c0       	rjmp	.+10     	; 0xb2e <__stack+0x22f>
 b24:	8f ee       	ldi	r24, 0xEF	; 239
 b26:	b8 22       	and	r11, r24
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
 b2a:	a7 2c       	mov	r10, r7
 b2c:	01 c0       	rjmp	.+2      	; 0xb30 <__stack+0x231>
 b2e:	ae 2c       	mov	r10, r14
 b30:	8b 2d       	mov	r24, r11
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	b4 fe       	sbrs	r11, 4
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <__stack+0x253>
 b38:	fe 01       	movw	r30, r28
 b3a:	e7 0d       	add	r30, r7
 b3c:	f1 1d       	adc	r31, r1
 b3e:	20 81       	ld	r18, Z
 b40:	20 33       	cpi	r18, 0x30	; 48
 b42:	19 f4       	brne	.+6      	; 0xb4a <__stack+0x24b>
 b44:	e9 ee       	ldi	r30, 0xE9	; 233
 b46:	be 22       	and	r11, r30
 b48:	09 c0       	rjmp	.+18     	; 0xb5c <__stack+0x25d>
 b4a:	a3 94       	inc	r10
 b4c:	b2 fe       	sbrs	r11, 2
 b4e:	06 c0       	rjmp	.+12     	; 0xb5c <__stack+0x25d>
 b50:	04 c0       	rjmp	.+8      	; 0xb5a <__stack+0x25b>
 b52:	86 78       	andi	r24, 0x86	; 134
 b54:	90 70       	andi	r25, 0x00	; 0
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x25d>
 b5a:	a3 94       	inc	r10
 b5c:	8b 2c       	mov	r8, r11
 b5e:	99 24       	eor	r9, r9
 b60:	b3 fc       	sbrc	r11, 3
 b62:	14 c0       	rjmp	.+40     	; 0xb8c <__stack+0x28d>
 b64:	b0 fe       	sbrs	r11, 0
 b66:	0f c0       	rjmp	.+30     	; 0xb86 <__stack+0x287>
 b68:	af 14       	cp	r10, r15
 b6a:	28 f4       	brcc	.+10     	; 0xb76 <__stack+0x277>
 b6c:	e7 2c       	mov	r14, r7
 b6e:	ef 0c       	add	r14, r15
 b70:	ea 18       	sub	r14, r10
 b72:	af 2c       	mov	r10, r15
 b74:	08 c0       	rjmp	.+16     	; 0xb86 <__stack+0x287>
 b76:	e7 2c       	mov	r14, r7
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <__stack+0x287>
 b7a:	80 e2       	ldi	r24, 0x20	; 32
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	b6 01       	movw	r22, r12
 b80:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 b84:	a3 94       	inc	r10
 b86:	af 14       	cp	r10, r15
 b88:	c0 f3       	brcs	.-16     	; 0xb7a <__stack+0x27b>
 b8a:	04 c0       	rjmp	.+8      	; 0xb94 <__stack+0x295>
 b8c:	af 14       	cp	r10, r15
 b8e:	10 f4       	brcc	.+4      	; 0xb94 <__stack+0x295>
 b90:	fa 18       	sub	r15, r10
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <__stack+0x297>
 b94:	ff 24       	eor	r15, r15
 b96:	84 fe       	sbrs	r8, 4
 b98:	0f c0       	rjmp	.+30     	; 0xbb8 <__stack+0x2b9>
 b9a:	80 e3       	ldi	r24, 0x30	; 48
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	b6 01       	movw	r22, r12
 ba0:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 ba4:	82 fe       	sbrs	r8, 2
 ba6:	1f c0       	rjmp	.+62     	; 0xbe6 <__stack+0x2e7>
 ba8:	81 fe       	sbrs	r8, 1
 baa:	03 c0       	rjmp	.+6      	; 0xbb2 <__stack+0x2b3>
 bac:	88 e5       	ldi	r24, 0x58	; 88
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	10 c0       	rjmp	.+32     	; 0xbd2 <__stack+0x2d3>
 bb2:	88 e7       	ldi	r24, 0x78	; 120
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0d c0       	rjmp	.+26     	; 0xbd2 <__stack+0x2d3>
 bb8:	c4 01       	movw	r24, r8
 bba:	86 78       	andi	r24, 0x86	; 134
 bbc:	90 70       	andi	r25, 0x00	; 0
 bbe:	00 97       	sbiw	r24, 0x00	; 0
 bc0:	91 f0       	breq	.+36     	; 0xbe6 <__stack+0x2e7>
 bc2:	81 fc       	sbrc	r8, 1
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0x2cb>
 bc6:	80 e2       	ldi	r24, 0x20	; 32
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <__stack+0x2cd>
 bca:	8b e2       	ldi	r24, 0x2B	; 43
 bcc:	b7 fc       	sbrc	r11, 7
 bce:	8d e2       	ldi	r24, 0x2D	; 45
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	b6 01       	movw	r22, r12
 bd4:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <__stack+0x2e7>
 bda:	80 e3       	ldi	r24, 0x30	; 48
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	b6 01       	movw	r22, r12
 be0:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 be4:	ea 94       	dec	r14
 be6:	7e 14       	cp	r7, r14
 be8:	c0 f3       	brcs	.-16     	; 0xbda <__stack+0x2db>
 bea:	7a 94       	dec	r7
 bec:	f2 01       	movw	r30, r4
 bee:	e7 0d       	add	r30, r7
 bf0:	f1 1d       	adc	r31, r1
 bf2:	80 81       	ld	r24, Z
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	b6 01       	movw	r22, r12
 bf8:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 bfc:	77 20       	and	r7, r7
 bfe:	a9 f7       	brne	.-22     	; 0xbea <__stack+0x2eb>
 c00:	06 c0       	rjmp	.+12     	; 0xc0e <__stack+0x30f>
 c02:	80 e2       	ldi	r24, 0x20	; 32
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	b6 01       	movw	r22, r12
 c08:	0e 94 b8 03 	call	0x770	; 0x770 <fputc>
 c0c:	fa 94       	dec	r15
 c0e:	ff 20       	and	r15, r15
 c10:	c1 f7       	brne	.-16     	; 0xc02 <__stack+0x303>
 c12:	37 ce       	rjmp	.-914    	; 0x882 <vfprintf+0x26>
 c14:	f6 01       	movw	r30, r12
 c16:	26 81       	ldd	r18, Z+6	; 0x06
 c18:	37 81       	ldd	r19, Z+7	; 0x07
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__stack+0x321>
 c1c:	2f ef       	ldi	r18, 0xFF	; 255
 c1e:	3f ef       	ldi	r19, 0xFF	; 255
 c20:	c9 01       	movw	r24, r18
 c22:	2c 96       	adiw	r28, 0x0c	; 12
 c24:	e2 e1       	ldi	r30, 0x12	; 18
 c26:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__epilogue_restores__>

00000c2a <strnlen_P>:
 c2a:	fc 01       	movw	r30, r24
 c2c:	05 90       	lpm	r0, Z+
 c2e:	61 50       	subi	r22, 0x01	; 1
 c30:	70 40       	sbci	r23, 0x00	; 0
 c32:	01 10       	cpse	r0, r1
 c34:	d8 f7       	brcc	.-10     	; 0xc2c <strnlen_P+0x2>
 c36:	80 95       	com	r24
 c38:	90 95       	com	r25
 c3a:	8e 0f       	add	r24, r30
 c3c:	9f 1f       	adc	r25, r31
 c3e:	08 95       	ret

00000c40 <strnlen>:
 c40:	fc 01       	movw	r30, r24
 c42:	61 50       	subi	r22, 0x01	; 1
 c44:	70 40       	sbci	r23, 0x00	; 0
 c46:	01 90       	ld	r0, Z+
 c48:	01 10       	cpse	r0, r1
 c4a:	d8 f7       	brcc	.-10     	; 0xc42 <strnlen+0x2>
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	8e 0f       	add	r24, r30
 c52:	9f 1f       	adc	r25, r31
 c54:	08 95       	ret

00000c56 <__ultoa_invert>:
 c56:	fa 01       	movw	r30, r20
 c58:	aa 27       	eor	r26, r26
 c5a:	28 30       	cpi	r18, 0x08	; 8
 c5c:	51 f1       	breq	.+84     	; 0xcb2 <__ultoa_invert+0x5c>
 c5e:	20 31       	cpi	r18, 0x10	; 16
 c60:	81 f1       	breq	.+96     	; 0xcc2 <__ultoa_invert+0x6c>
 c62:	e8 94       	clt
 c64:	6f 93       	push	r22
 c66:	6e 7f       	andi	r22, 0xFE	; 254
 c68:	6e 5f       	subi	r22, 0xFE	; 254
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	af 4f       	sbci	r26, 0xFF	; 255
 c72:	b1 e0       	ldi	r27, 0x01	; 1
 c74:	3e d0       	rcall	.+124    	; 0xcf2 <__ultoa_invert+0x9c>
 c76:	b4 e0       	ldi	r27, 0x04	; 4
 c78:	3c d0       	rcall	.+120    	; 0xcf2 <__ultoa_invert+0x9c>
 c7a:	67 0f       	add	r22, r23
 c7c:	78 1f       	adc	r23, r24
 c7e:	89 1f       	adc	r24, r25
 c80:	9a 1f       	adc	r25, r26
 c82:	a1 1d       	adc	r26, r1
 c84:	68 0f       	add	r22, r24
 c86:	79 1f       	adc	r23, r25
 c88:	8a 1f       	adc	r24, r26
 c8a:	91 1d       	adc	r25, r1
 c8c:	a1 1d       	adc	r26, r1
 c8e:	6a 0f       	add	r22, r26
 c90:	71 1d       	adc	r23, r1
 c92:	81 1d       	adc	r24, r1
 c94:	91 1d       	adc	r25, r1
 c96:	a1 1d       	adc	r26, r1
 c98:	20 d0       	rcall	.+64     	; 0xcda <__ultoa_invert+0x84>
 c9a:	09 f4       	brne	.+2      	; 0xc9e <__ultoa_invert+0x48>
 c9c:	68 94       	set
 c9e:	3f 91       	pop	r19
 ca0:	2a e0       	ldi	r18, 0x0A	; 10
 ca2:	26 9f       	mul	r18, r22
 ca4:	11 24       	eor	r1, r1
 ca6:	30 19       	sub	r19, r0
 ca8:	30 5d       	subi	r19, 0xD0	; 208
 caa:	31 93       	st	Z+, r19
 cac:	de f6       	brtc	.-74     	; 0xc64 <__ultoa_invert+0xe>
 cae:	cf 01       	movw	r24, r30
 cb0:	08 95       	ret
 cb2:	46 2f       	mov	r20, r22
 cb4:	47 70       	andi	r20, 0x07	; 7
 cb6:	40 5d       	subi	r20, 0xD0	; 208
 cb8:	41 93       	st	Z+, r20
 cba:	b3 e0       	ldi	r27, 0x03	; 3
 cbc:	0f d0       	rcall	.+30     	; 0xcdc <__ultoa_invert+0x86>
 cbe:	c9 f7       	brne	.-14     	; 0xcb2 <__ultoa_invert+0x5c>
 cc0:	f6 cf       	rjmp	.-20     	; 0xcae <__ultoa_invert+0x58>
 cc2:	46 2f       	mov	r20, r22
 cc4:	4f 70       	andi	r20, 0x0F	; 15
 cc6:	40 5d       	subi	r20, 0xD0	; 208
 cc8:	4a 33       	cpi	r20, 0x3A	; 58
 cca:	18 f0       	brcs	.+6      	; 0xcd2 <__ultoa_invert+0x7c>
 ccc:	49 5d       	subi	r20, 0xD9	; 217
 cce:	31 fd       	sbrc	r19, 1
 cd0:	40 52       	subi	r20, 0x20	; 32
 cd2:	41 93       	st	Z+, r20
 cd4:	02 d0       	rcall	.+4      	; 0xcda <__ultoa_invert+0x84>
 cd6:	a9 f7       	brne	.-22     	; 0xcc2 <__ultoa_invert+0x6c>
 cd8:	ea cf       	rjmp	.-44     	; 0xcae <__ultoa_invert+0x58>
 cda:	b4 e0       	ldi	r27, 0x04	; 4
 cdc:	a6 95       	lsr	r26
 cde:	97 95       	ror	r25
 ce0:	87 95       	ror	r24
 ce2:	77 95       	ror	r23
 ce4:	67 95       	ror	r22
 ce6:	ba 95       	dec	r27
 ce8:	c9 f7       	brne	.-14     	; 0xcdc <__ultoa_invert+0x86>
 cea:	00 97       	sbiw	r24, 0x00	; 0
 cec:	61 05       	cpc	r22, r1
 cee:	71 05       	cpc	r23, r1
 cf0:	08 95       	ret
 cf2:	9b 01       	movw	r18, r22
 cf4:	ac 01       	movw	r20, r24
 cf6:	0a 2e       	mov	r0, r26
 cf8:	06 94       	lsr	r0
 cfa:	57 95       	ror	r21
 cfc:	47 95       	ror	r20
 cfe:	37 95       	ror	r19
 d00:	27 95       	ror	r18
 d02:	ba 95       	dec	r27
 d04:	c9 f7       	brne	.-14     	; 0xcf8 <__ultoa_invert+0xa2>
 d06:	62 0f       	add	r22, r18
 d08:	73 1f       	adc	r23, r19
 d0a:	84 1f       	adc	r24, r20
 d0c:	95 1f       	adc	r25, r21
 d0e:	a0 1d       	adc	r26, r0
 d10:	08 95       	ret

00000d12 <__prologue_saves__>:
 d12:	2f 92       	push	r2
 d14:	3f 92       	push	r3
 d16:	4f 92       	push	r4
 d18:	5f 92       	push	r5
 d1a:	6f 92       	push	r6
 d1c:	7f 92       	push	r7
 d1e:	8f 92       	push	r8
 d20:	9f 92       	push	r9
 d22:	af 92       	push	r10
 d24:	bf 92       	push	r11
 d26:	cf 92       	push	r12
 d28:	df 92       	push	r13
 d2a:	ef 92       	push	r14
 d2c:	ff 92       	push	r15
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	df 93       	push	r29
 d36:	cd b7       	in	r28, 0x3d	; 61
 d38:	de b7       	in	r29, 0x3e	; 62
 d3a:	ca 1b       	sub	r28, r26
 d3c:	db 0b       	sbc	r29, r27
 d3e:	0f b6       	in	r0, 0x3f	; 63
 d40:	f8 94       	cli
 d42:	de bf       	out	0x3e, r29	; 62
 d44:	0f be       	out	0x3f, r0	; 63
 d46:	cd bf       	out	0x3d, r28	; 61
 d48:	09 94       	ijmp

00000d4a <__epilogue_restores__>:
 d4a:	2a 88       	ldd	r2, Y+18	; 0x12
 d4c:	39 88       	ldd	r3, Y+17	; 0x11
 d4e:	48 88       	ldd	r4, Y+16	; 0x10
 d50:	5f 84       	ldd	r5, Y+15	; 0x0f
 d52:	6e 84       	ldd	r6, Y+14	; 0x0e
 d54:	7d 84       	ldd	r7, Y+13	; 0x0d
 d56:	8c 84       	ldd	r8, Y+12	; 0x0c
 d58:	9b 84       	ldd	r9, Y+11	; 0x0b
 d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d5c:	b9 84       	ldd	r11, Y+9	; 0x09
 d5e:	c8 84       	ldd	r12, Y+8	; 0x08
 d60:	df 80       	ldd	r13, Y+7	; 0x07
 d62:	ee 80       	ldd	r14, Y+6	; 0x06
 d64:	fd 80       	ldd	r15, Y+5	; 0x05
 d66:	0c 81       	ldd	r16, Y+4	; 0x04
 d68:	1b 81       	ldd	r17, Y+3	; 0x03
 d6a:	aa 81       	ldd	r26, Y+2	; 0x02
 d6c:	b9 81       	ldd	r27, Y+1	; 0x01
 d6e:	ce 0f       	add	r28, r30
 d70:	d1 1d       	adc	r29, r1
 d72:	0f b6       	in	r0, 0x3f	; 63
 d74:	f8 94       	cli
 d76:	de bf       	out	0x3e, r29	; 62
 d78:	0f be       	out	0x3f, r0	; 63
 d7a:	cd bf       	out	0x3d, r28	; 61
 d7c:	ed 01       	movw	r28, r26
 d7e:	08 95       	ret

00000d80 <_exit>:
 d80:	f8 94       	cli

00000d82 <__stop_program>:
 d82:	ff cf       	rjmp	.-2      	; 0xd82 <__stop_program>
