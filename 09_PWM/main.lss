
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000034  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000172  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011c  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000154  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f5  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <io_init>:
  return 0;
}

void io_init (void) {
  //1 = output, 0 = input
  DDRB = _BV(PB1) | _BV(PB2);
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	84 b9       	out	0x04, r24	; 4
}
  84:	08 95       	ret

00000086 <pwm_init>:

void pwm_init(void) {
  TCCR1A = _BV(COM1B0); // COM1B0 indicates toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	80 93 80 00 	sts	0x0080, r24
//  (0x81) TCCR1B ICNC1 ICES1 – WGM13 WGM12 CS12 CS11 CS10 136
//    (0x80) TCCR1A COM1A1 COM1A0 COM1B1 COM1B0 – – WGM11 WGM10 134
//
  OCR1AH = 0x00;
  8c:	10 92 89 00 	sts	0x0089, r1


  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the 
  90:	89 e0       	ldi	r24, 0x09	; 9
  92:	80 93 81 00 	sts	0x0081, r24
     */
  //there are three waveform-generation-mode bits: WGM03 WGM02 WGM01 WGM00 -- mode 3 (0100) is CTC mode (clear timer on compare match)
  //in order to create the 
//  OCR0A = 0x00; // this sets the initial pwm value in hex
//  OCR0B = 0x00; // this sets the initial pwm value in hex
}
  96:	08 95       	ret

00000098 <main>:
  return 0;
}

void io_init (void) {
  //1 = output, 0 = input
  DDRB = _BV(PB1) | _BV(PB2);
  98:	86 e0       	ldi	r24, 0x06	; 6
  9a:	84 b9       	out	0x04, r24	; 4
void pwm_init(void);     // Initializes PWM
//======================

int main (void) {
  io_init(); //Setup IO pins and defaults
  pwm_init();
  9c:	0e 94 43 00 	call	0x86	; 0x86 <pwm_init>
//      _delay_ms(1000);
//    }
 // }
 uint8_t i;

 for (i = 255; i > 0 ; i--){
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  OCR1AL = i;
  a2:	80 93 88 00 	sts	0x0088, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	30 e7       	ldi	r19, 0x70	; 112
  aa:	42 e0       	ldi	r20, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x14>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x1e>
  b6:	00 00       	nop
//      _delay_ms(1000);
//    }
 // }
 uint8_t i;

 for (i = 255; i > 0 ; i--){
  b8:	81 50       	subi	r24, 0x01	; 1
  ba:	99 f7       	brne	.-26     	; 0xa2 <main+0xa>
  OCR1AL = i;
  _delay_ms(50);
 }
  OCR1AL = 0;
  bc:	10 92 88 00 	sts	0x0088, r1
  return 0;
}
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
