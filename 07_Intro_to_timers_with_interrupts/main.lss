
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001b4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000039  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000025e  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000113  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b7  00000000  00000000  00000c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000015  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>

int extraTime;
int main(void) {

  DDRB =   (1 << PORTB0); //sets pin 8 to be an output
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	84 b9       	out	0x04, r24	; 4

  //CTC Mode
  TCCR0A = (1 << WGM01); //WGM01 sets this for CTC mode
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36

  //OCR0A  Output Compare Register A
  OCR0A = 195;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  98:	93 ec       	ldi	r25, 0xC3	; 195
  9a:	97 bd       	out	0x27, r25	; 39

//TCCR0B = (1 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024

  //TIMSK0 register controls the interrupts-- when this happens I want this interrupt to occu
  //OCIE0A this bit want interrupt setup so that when compare 'A' is equal it will set up an interrupt
  TIMSK0 = (1 << OCIE0A);
  9c:	80 93 6e 00 	sts	0x006E, r24

  // clock select bit prescaler

  int i;
  sei(); // sets the i-bit
  a0:	78 94       	sei
  */

//----------------------------------------------------------
//                        ROUND 2
//----------------------------------------------------------
  TCCR0B =  (1 << CS02) | (0 << CS01) | (0 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  a2:	a4 e0       	ldi	r26, 0x04	; 4
    OCR0A = 255;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  a4:	2f ef       	ldi	r18, 0xFF	; 255
    _delay_ms(5000);
    OCR0A = 1;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  a6:	91 e0       	ldi	r25, 0x01	; 1
    _delay_ms(5000);
  TCCR0B =  (0 << CS02) | (1 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  a8:	33 e0       	ldi	r19, 0x03	; 3
  */

//----------------------------------------------------------
//                        ROUND 2
//----------------------------------------------------------
  TCCR0B =  (1 << CS02) | (0 << CS01) | (0 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  aa:	a5 bd       	out	0x25, r26	; 37
    OCR0A = 255;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  ac:	27 bd       	out	0x27, r18	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	53 e2       	ldi	r21, 0x23	; 35
  b2:	64 ef       	ldi	r22, 0xF4	; 244
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x24>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2e>
  be:	00 00       	nop
    _delay_ms(5000);
    OCR0A = 1;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  c0:	97 bd       	out	0x27, r25	; 39
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	53 e2       	ldi	r21, 0x23	; 35
  c6:	64 ef       	ldi	r22, 0xF4	; 244
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x38>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x42>
  d2:	00 00       	nop
    _delay_ms(5000);
  TCCR0B =  (0 << CS02) | (1 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  d4:	35 bd       	out	0x25, r19	; 37
    OCR0A = 255;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  d6:	27 bd       	out	0x27, r18	; 39
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	53 e2       	ldi	r21, 0x23	; 35
  dc:	64 ef       	ldi	r22, 0xF4	; 244
  de:	41 50       	subi	r20, 0x01	; 1
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	60 40       	sbci	r22, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x4e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x58>
  e8:	00 00       	nop
    _delay_ms(5000);
    OCR0A = 1;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  ea:	97 bd       	out	0x27, r25	; 39
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	53 e2       	ldi	r21, 0x23	; 35
  f0:	64 ef       	ldi	r22, 0xF4	; 244
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	60 40       	sbci	r22, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x62>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x6c>
  fc:	00 00       	nop
    OCR0A = i;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
    _delay_ms(100);
  }
  */

  TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  fe:	95 bd       	out	0x25, r25	; 37
 100:	8f ef       	ldi	r24, 0xFF	; 255
  for (i = 255; i > 35; i--) {
    OCR0A = i;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
 102:	87 bd       	out	0x27, r24	; 39
 104:	ef e3       	ldi	r30, 0x3F	; 63
 106:	fc e9       	ldi	r31, 0x9C	; 156
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x78>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7e>
 10e:	00 00       	nop
 110:	81 50       	subi	r24, 0x01	; 1
    _delay_ms(100);
  }
  */

  TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  for (i = 255; i > 35; i--) {
 112:	83 32       	cpi	r24, 0x23	; 35
 114:	b1 f7       	brne	.-20     	; 0x102 <main+0x72>
 116:	c9 cf       	rjmp	.-110    	; 0xaa <main+0x1a>

00000118 <__vector_14>:

  }
}


ISR(TIMER0_COMPA_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
    PORTB ^=  (1 << PORTB0); //toggles an led -- this is really useful!!
 126:	85 b1       	in	r24, 0x05	; 5
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	89 27       	eor	r24, r25
 12c:	85 b9       	out	0x05, r24	; 5
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
