
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  0000015a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000039  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015e  00000000  00000000  000008d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000102  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000012f  00000000  00000000  00000b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000015  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>

int extraTime;
int main(void) {

  DDRB =   (1 << PORTB0); //sets pin 8 to be an output
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	84 b9       	out	0x04, r24	; 4

  //CTC Mode
  TCCR0A = (1 << WGM01); //WGM01 sets this for CTC mode
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36

  //OCR0A  Output Compare Register A
  OCR0A = 195;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  98:	93 ec       	ldi	r25, 0xC3	; 195
  9a:	97 bd       	out	0x27, r25	; 39

//TCCR0B = (1 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024

  //TIMSK0 register controls the interrupts-- when this happens I want this interrupt to occu
  //OCIE0A this bit want interrupt setup so that when compare 'A' is equal it will set up an interrupt
  TIMSK0 = (1 << OCIE0A);
  9c:	80 93 6e 00 	sts	0x006E, r24

  // clock select bit prescaler

  int i;
  sei(); // sets the i-bit
  a0:	78 94       	sei

//----------------------------------------------------------
//                        ROUND 2
//----------------------------------------------------------

  TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	95 bd       	out	0x25, r25	; 37
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  for (i = 255; i > 35; i--) {
    OCR0A = i;  //number of ticks we want to go through before resetting, this is the compare, when = it does stuff + resets
  a8:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e3       	ldi	r30, 0x3F	; 63
  ac:	fc e9       	ldi	r31, 0x9C	; 156
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x24>
  b4:	00 00       	nop
  b6:	81 50       	subi	r24, 0x01	; 1
//----------------------------------------------------------
//                        ROUND 2
//----------------------------------------------------------

  TCCR0B =  (0 << CS02) | (0 << CS01) | (1 << CS00); //page 110 of the documentaion  this sets the prescaler to 1024
  for (i = 255; i > 35; i--) {
  b8:	83 32       	cpi	r24, 0x23	; 35
  ba:	b1 f7       	brne	.-20     	; 0xa8 <main+0x18>
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <main+0x14>

000000be <__vector_14>:

  }
}


ISR(TIMER0_COMPA_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
    PORTB ^=  (1 << PORTB0); //toggles an led -- this is really useful!!
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	89 27       	eor	r24, r25
  d2:	85 b9       	out	0x05, r24	; 5
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
