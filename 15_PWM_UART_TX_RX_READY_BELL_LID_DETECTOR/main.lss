
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800122  00800122  00000da2  2**0
                  ALLOC
  3 .stab         0000204c  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cfd  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00003b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a1f  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002d4  00000000  00000000  000046c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008a7  00000000  00000000  00004997  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  00005240  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030c  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000062a  00000000  00000000  0000567c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000043  00000000  00000000  00005ca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  9e:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
  stdout = &uart_output;
  stdin  = &uart_input;

}

void uart_putchar(char c, FILE *stream) {
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
  if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  }
  loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putchar+0xe>
  UDR0 = c;
  bc:	10 93 c6 00 	sts	0x00C6, r17
}
  c0:	1f 91       	pop	r17
  c2:	08 95       	ret

000000c4 <uart_getchar>:


char uart_getchar(FILE *stream) {
  loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <uart_getchar>
  return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6
}
  d0:	08 95       	ret

000000d2 <check_if_there_is_a_dot_there>:

  count_dots = 0; // reset our global dot counter for next well
}


int check_if_there_is_a_dot_there ( long duration_threshold ) {
  d2:	9b 01       	movw	r18, r22
  d4:	ac 01       	movw	r20, r24
  int evidence_of_dot = 0;
  long open_space = 0; //counter for open space
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	dc 01       	movw	r26, r24
  count_dots = 0; // reset our global dot counter for next well
}


int check_if_there_is_a_dot_there ( long duration_threshold ) {
  int evidence_of_dot = 0;
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	ef e8       	ldi	r30, 0x8F	; 143
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <check_if_there_is_a_dot_there+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <check_if_there_is_a_dot_there+0x18>
  ea:	00 00       	nop
  long open_space = 0; //counter for open space
  do {
    _delay_us(100);
    if ( PIND & _BV(PD2) ) {
  ec:	4a 9b       	sbis	0x09, 2	; 9
  ee:	07 c0       	rjmp	.+14     	; 0xfe <check_if_there_is_a_dot_there+0x2c>
      open_space += 100; //more open_space 
  f0:	8c 59       	subi	r24, 0x9C	; 156
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	af 4f       	sbci	r26, 0xFF	; 255
  f6:	bf 4f       	sbci	r27, 0xFF	; 255
      // printf("%ld \n", open_space);
      evidence_of_dot = 0; //reset counter to filter false positives
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	05 c0       	rjmp	.+10     	; 0x108 <check_if_there_is_a_dot_there+0x36>
    } else {
      evidence_of_dot++; // gather evidence of a dot
  fe:	6f 5f       	subi	r22, 0xFF	; 255
 100:	7f 4f       	sbci	r23, 0xFF	; 255
      if ( evidence_of_dot > 10) {
 102:	6b 30       	cpi	r22, 0x0B	; 11
 104:	71 05       	cpc	r23, r1
 106:	44 f4       	brge	.+16     	; 0x118 <check_if_there_is_a_dot_there+0x46>
        return 1; //there is a dot
      }
    }
  } while (open_space < duration_threshold);
 108:	82 17       	cp	r24, r18
 10a:	93 07       	cpc	r25, r19
 10c:	a4 07       	cpc	r26, r20
 10e:	b5 07       	cpc	r27, r21
 110:	3c f3       	brlt	.-50     	; 0xe0 <check_if_there_is_a_dot_there+0xe>

  return 0; //no dot detected within temporal threshold
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <check_if_there_is_a_dot_there+0x4a>
      // printf("%ld \n", open_space);
      evidence_of_dot = 0; //reset counter to filter false positives
    } else {
      evidence_of_dot++; // gather evidence of a dot
      if ( evidence_of_dot > 10) {
        return 1; //there is a dot
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
    }
  } while (open_space < duration_threshold);

  return 0; //no dot detected within temporal threshold

}
 11c:	c9 01       	movw	r24, r18
 11e:	08 95       	ret

00000120 <servoOff>:

}

void servoOff(void){

  PORTD &= ~_BV(ENA);// OFF the enable bit
 120:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 122:	e0 e8       	ldi	r30, 0x80	; 128
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7e       	andi	r24, 0xEF	; 239
 12a:	80 83       	st	Z, r24

  //reset the original prescaler
  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	80 93 81 00 	sts	0x0081, r24
}
 132:	08 95       	ret

00000134 <io_init>:
}


void io_init (void) {
  //1 = output, 0 = input5
  DDRB = _BV(PUL) | _BV(DIR) | _BV(ENA) | _BV(LED) | _BV(SPEAKER);
 134:	8d e3       	ldi	r24, 0x3D	; 61
 136:	84 b9       	out	0x04, r24	; 4
  //     PUL-Portb2 DIR-Portb3 ENA-Portb4 LED-light port 5 (13)
  DDRD = ~_BV(OPTO); //OPTO is an input
 138:	8b ef       	ldi	r24, 0xFB	; 251
 13a:	8a b9       	out	0x0a, r24	; 10
  //     Pin 2 of the arduino
  //     */
}
 13c:	08 95       	ret

0000013e <pwm_init>:

void pwm_init(void) {
  TCCR1A = _BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	80 93 80 00 	sts	0x0080, r24

  //  (0x81) TCCR1B ICNC1 ICES1 – WGM13 WGM12 CS12 CS11 CS10 136
  //  (0x80) TCCR1A COM1A1 COM1A0 COM1B1 COM1B0 – – WGM11 WGM10 134

  OCR1AH = 0x00; //this controls the higher half of the 16 bit "TOP" value
 144:	10 92 89 00 	sts	0x0089, r1


  TCCR1B = _BV(WGM02) | _BV(CS10); // the CS stuff sets the prescaler, 001 makes it no prescale (fastest clock)
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	80 93 81 00 	sts	0x0081, r24
  1 0 0 clkI/O/256 (From prescaler)
  1 0 1 clkI/O/1024 (From prescaler)
  1 1 0 External clock source on T1 pin. Clock on falling edge.
  1 1 1 External clock source on T1 pin. Clock on rising edgputchar
  */
}
 14e:	08 95       	ret

00000150 <servoOn>:
  }
  servoOff();

}

void servoOn(int direction) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
  // servo speed is 50Hz
  // this is approximated by the 16 bit register as 
  // UCR1AH 78 and UCR1AL 30 ( although this is at 50% duty cycle, thankfully the motor controller is edge triggered

  //TODO do an if statement so this isn't redundant (for cleanup purposes only)
  pwm_init();
 156:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_init>

  TCCR1B = _BV(WGM02) | _BV(CS11); // the CS stuff sets the prescaler, 010 makes it factor of 2 prescale (second fastest clock 8MHz) WGM02 makes it so that compare register actually does something
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	80 93 81 00 	sts	0x0081, r24

  //these two numbers give the 50.0Hz frequency simalcrum of Servo.h
  OCR1AH = 78;
 160:	8e e4       	ldi	r24, 0x4E	; 78
 162:	80 93 89 00 	sts	0x0089, r24
  OCR1AL = 30;
 166:	8e e1       	ldi	r24, 0x1E	; 30
 168:	80 93 88 00 	sts	0x0088, r24
  if (direction == 1) {
 16c:	c1 30       	cpi	r28, 0x01	; 1
 16e:	d1 05       	cpc	r29, r1
 170:	11 f4       	brne	.+4      	; 0x176 <servoOn+0x26>
    PORTB |= _BV(DIR);
 172:	2b 9a       	sbi	0x05, 3	; 5
 174:	01 c0       	rjmp	.+2      	; 0x178 <servoOn+0x28>
  } else {
    PORTB &= ~_BV(DIR);
 176:	2b 98       	cbi	0x05, 3	; 5
  }
  PORTB |= _BV(ENA); // ON the enable bit
 178:	2c 9a       	sbi	0x05, 4	; 5


}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <go_to_next_edge>:

}

void go_to_next_edge(void) {

  servoOn(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
  int counter = 0;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
  while (counter < 10)
  {

    if ( !(PIND & _BV(PD2)) ) {
 18c:	4a 99       	sbic	0x09, 2	; 9
 18e:	07 c0       	rjmp	.+14     	; 0x19e <go_to_next_edge+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <go_to_next_edge+0x14>
 198:	00 c0       	rjmp	.+0      	; 0x19a <go_to_next_edge+0x1a>
 19a:	00 00       	nop
 19c:	f5 cf       	rjmp	.-22     	; 0x188 <go_to_next_edge+0x8>
      _delay_ms(1); // this is what happens if nothing detected. (detection events give low value)
      counter = 0;
    } else {
      counter++;
 19e:	01 96       	adiw	r24, 0x01	; 1

void go_to_next_edge(void) {

  servoOn(1);
  int counter = 0;
  while (counter < 10)
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	91 05       	cpc	r25, r1
 1a4:	9c f3       	brlt	.-26     	; 0x18c <go_to_next_edge+0xc>
    } else {
      counter++;
      //printf("counter is %d \n", counter); // don't use printf it slows everything down ruining timing measurement
    }
  }
  servoOff();
 1a6:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>

}
 1aa:	08 95       	ret

000001ac <go_to_next_dot>:

  //_delay_ms(1000);
  go_to_next_dot(); //begin counting dots
}

void go_to_next_dot() {
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
  int count_dots=0;
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0

  while (last_dot==0) { //wait why 11? oh if misaligned and detects too many dots
    //look for dot, but with a time limit

//    printf("there is a dot preresult %d \n", there_is_a_dot);
    servoOn(1);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
    there_is_a_dot =  check_if_there_is_a_dot_there( 500000L ); //DONE --  replaced this with a check_if_there_is_a_dot_there function
 1bc:	60 e2       	ldi	r22, 0x20	; 32
 1be:	71 ea       	ldi	r23, 0xA1	; 161
 1c0:	87 e0       	ldi	r24, 0x07	; 7
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 69 00 	call	0xd2	; 0xd2 <check_if_there_is_a_dot_there>
    //servoOff();
    //_delay_ms(1000);
    //printf("there is a dot result %d \n", there_is_a_dot);
    //printf("how many dots %d \n", count_dots);

    if (there_is_a_dot == 1)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	91 05       	cpc	r25, r1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <go_to_next_dot+0x2a>
    {
      count_dots++;
 1ce:	21 96       	adiw	r28, 0x01	; 1
      //printf("how many dots %d \n", count_dots);
      //go to space right after the dot then begin the loop again
      go_to_next_edge();
 1d0:	0e 94 c0 00 	call	0x180	; 0x180 <go_to_next_edge>
 1d4:	ef cf       	rjmp	.-34     	; 0x1b4 <go_to_next_dot+0x8>
      //printf("how many dots %d \n", count_dots);
    } else if (there_is_a_dot==0) {
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	69 f7       	brne	.-38     	; 0x1b4 <go_to_next_dot+0x8>
      servoOff(); // stop
 1da:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	91 ee       	ldi	r25, 0xE1	; 225
 1e2:	a4 e0       	ldi	r26, 0x04	; 4
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	a0 40       	sbci	r26, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <go_to_next_dot+0x38>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <go_to_next_dot+0x42>
 1ee:	00 00       	nop
      _delay_ms(100); //wait for stop
      servoOn(0); // go reverse
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
      //printf("is this the real mistake? %d\n", count_dots);
      check_if_there_is_a_dot_there( 1000000L ); //check for the dot
 1f8:	60 e4       	ldi	r22, 0x40	; 64
 1fa:	72 e4       	ldi	r23, 0x42	; 66
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 69 00 	call	0xd2	; 0xd2 <check_if_there_is_a_dot_there>
      servoOff(); // found the dot, next we will go a bit further to center pic
 204:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
      //_delay_ms(1000);
      //printf("found the edge, hopefully not more dots %d\n", count_dots);

      servoOn(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	9b e4       	ldi	r25, 0x4B	; 75
 214:	ad e1       	ldi	r26, 0x1D	; 29
 216:	81 50       	subi	r24, 0x01	; 1
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	a0 40       	sbci	r26, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <go_to_next_dot+0x6a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <go_to_next_dot+0x74>
 220:	00 00       	nop
      _delay_ms(600); // hopefully this is long enough
      servoOff();
 222:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
      //printf("count them dots %d\n", count_dots);
    }
  }

  // send back the number of dots to pythonSerial.py
  switch (count_dots) {
 226:	c2 30       	cpi	r28, 0x02	; 2
 228:	d1 05       	cpc	r29, r1
 22a:	e1 f0       	breq	.+56     	; 0x264 <go_to_next_dot+0xb8>
 22c:	c3 30       	cpi	r28, 0x03	; 3
 22e:	d1 05       	cpc	r29, r1
 230:	2c f4       	brge	.+10     	; 0x23c <go_to_next_dot+0x90>
 232:	c1 30       	cpi	r28, 0x01	; 1
 234:	d1 05       	cpc	r29, r1
 236:	09 f0       	breq	.+2      	; 0x23a <go_to_next_dot+0x8e>
 238:	43 c0       	rjmp	.+134    	; 0x2c0 <go_to_next_dot+0x114>
 23a:	07 c0       	rjmp	.+14     	; 0x24a <go_to_next_dot+0x9e>
 23c:	c3 30       	cpi	r28, 0x03	; 3
 23e:	d1 05       	cpc	r29, r1
 240:	e1 f0       	breq	.+56     	; 0x27a <go_to_next_dot+0xce>
 242:	c4 30       	cpi	r28, 0x04	; 4
 244:	d1 05       	cpc	r29, r1
 246:	e1 f5       	brne	.+120    	; 0x2c0 <go_to_next_dot+0x114>
 248:	29 c0       	rjmp	.+82     	; 0x29c <go_to_next_dot+0xf0>
    case 1:
      printf("%d\r\n", 7);
 24a:	00 d0       	rcall	.+0      	; 0x24c <go_to_next_dot+0xa0>
 24c:	00 d0       	rcall	.+0      	; 0x24e <go_to_next_dot+0xa2>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	ad b7       	in	r26, 0x3d	; 61
 254:	be b7       	in	r27, 0x3e	; 62
 256:	12 96       	adiw	r26, 0x02	; 2
 258:	9c 93       	st	X, r25
 25a:	8e 93       	st	-X, r24
 25c:	11 97       	sbiw	r26, 0x01	; 1
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	17 c0       	rjmp	.+46     	; 0x292 <go_to_next_dot+0xe6>
      break;
    case 2:
      printf("%d\r\n", 8);
 264:	00 d0       	rcall	.+0      	; 0x266 <go_to_next_dot+0xba>
 266:	00 d0       	rcall	.+0      	; 0x268 <go_to_next_dot+0xbc>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	ed b7       	in	r30, 0x3d	; 61
 26e:	fe b7       	in	r31, 0x3e	; 62
 270:	92 83       	std	Z+2, r25	; 0x02
 272:	81 83       	std	Z+1, r24	; 0x01
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <go_to_next_dot+0x104>
      break;
    case 3:
      printf("%d\r\n", 9);
 27a:	00 d0       	rcall	.+0      	; 0x27c <go_to_next_dot+0xd0>
 27c:	00 d0       	rcall	.+0      	; 0x27e <go_to_next_dot+0xd2>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	ad b7       	in	r26, 0x3d	; 61
 284:	be b7       	in	r27, 0x3e	; 62
 286:	12 96       	adiw	r26, 0x02	; 2
 288:	9c 93       	st	X, r25
 28a:	8e 93       	st	-X, r24
 28c:	11 97       	sbiw	r26, 0x01	; 1
 28e:	89 e0       	ldi	r24, 0x09	; 9
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	14 96       	adiw	r26, 0x04	; 4
 294:	9c 93       	st	X, r25
 296:	8e 93       	st	-X, r24
 298:	13 97       	sbiw	r26, 0x03	; 3
 29a:	0c c0       	rjmp	.+24     	; 0x2b4 <go_to_next_dot+0x108>
      break;
    case 4:
      printf("%d\r\n", 10);
 29c:	00 d0       	rcall	.+0      	; 0x29e <go_to_next_dot+0xf2>
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <go_to_next_dot+0xf4>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	ed b7       	in	r30, 0x3d	; 61
 2a6:	fe b7       	in	r31, 0x3e	; 62
 2a8:	92 83       	std	Z+2, r25	; 0x02
 2aa:	81 83       	std	Z+1, r24	; 0x01
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	94 83       	std	Z+4, r25	; 0x04
 2b2:	83 83       	std	Z+3, r24	; 0x03
 2b4:	0e 94 cd 03 	call	0x79a	; 0x79a <printf>
      break;
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
    default:
      break;
  }

  PORTB |= _BV(LED); // TODO Test LED ON
 2c0:	2d 9a       	sbi	0x05, 5	; 5
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	97 ea       	ldi	r25, 0xA7	; 167
 2c6:	a1 e6       	ldi	r26, 0x61	; 97
 2c8:	81 50       	subi	r24, 0x01	; 1
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	a0 40       	sbci	r26, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <go_to_next_dot+0x11c>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <go_to_next_dot+0x126>
 2d2:	00 00       	nop
  _delay_ms(2000); // wait for camera to take photo
  PORTB &= ~_BV(LED); // TODO Test LED OFF
 2d4:	2d 98       	cbi	0x05, 5	; 5
  servoOn(1);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	93 ed       	ldi	r25, 0xD3	; 211
 2e2:	a0 e3       	ldi	r26, 0x30	; 48
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <go_to_next_dot+0x138>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <go_to_next_dot+0x142>
 2ee:	00 00       	nop
  _delay_ms(1000);

  count_dots = 0; // reset our global dot counter for next well
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <find_first_well>:

void find_first_well() {
  //first we make sure we're on an open space
  long open_space=0;//automatically intialized to zero
  //printf("looking for a good start\n");
  servoOn(1); //1 sets DIR to clockwise
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
    _delay_us(100);
    if ( PIND & _BV(PD2) ) {
      open_space += 100; //more open_space 
      // printf("%ld \n", open_space);
    } else {
      open_space = 0;  //if no open space then reset counter
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	dc 01       	movw	r26, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	ef e8       	ldi	r30, 0x8F	; 143
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <find_first_well+0x12>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <find_first_well+0x18>
 30e:	00 00       	nop
  long open_space=0;//automatically intialized to zero
  //printf("looking for a good start\n");
  servoOn(1); //1 sets DIR to clockwise
  do {
    _delay_us(100);
    if ( PIND & _BV(PD2) ) {
 310:	4a 9b       	sbis	0x09, 2	; 9
 312:	f5 cf       	rjmp	.-22     	; 0x2fe <find_first_well+0x8>
      open_space += 100; //more open_space 
 314:	8c 59       	subi	r24, 0x9C	; 156
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	af 4f       	sbci	r26, 0xFF	; 255
 31a:	bf 4f       	sbci	r27, 0xFF	; 255
      // printf("%ld \n", open_space);
    } else {
      open_space = 0;  //if no open space then reset counter
      // printf("%ld \n", open_space);
    }
  } while (open_space < 400000L);
 31c:	80 38       	cpi	r24, 0x80	; 128
 31e:	fa e1       	ldi	r31, 0x1A	; 26
 320:	9f 07       	cpc	r25, r31
 322:	f6 e0       	ldi	r31, 0x06	; 6
 324:	af 07       	cpc	r26, r31
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	bf 07       	cpc	r27, r31
 32a:	64 f3       	brlt	.-40     	; 0x304 <find_first_well+0xe>

  servoOff();
 32c:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
  //_delay_ms(1000);

  //begin first dot sequence


  servoOn(1);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 a8 00 	call	0x150	; 0x150 <servoOn>
  int counter = 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
  while (counter < 1000)
  {

    if ( PIND & _BV(PD2) ) {
 33c:	4a 9b       	sbis	0x09, 2	; 9
 33e:	05 c0       	rjmp	.+10     	; 0x34a <find_first_well+0x54>
 340:	25 e3       	ldi	r18, 0x35	; 53
 342:	2a 95       	dec	r18
 344:	f1 f7       	brne	.-4      	; 0x342 <find_first_well+0x4c>
 346:	00 00       	nop
 348:	f7 cf       	rjmp	.-18     	; 0x338 <find_first_well+0x42>
      _delay_us(10); // this is what happens if nothing detected. (detection events give low value)
      counter = 0;
    } else {
      counter++;
 34a:	01 96       	adiw	r24, 0x01	; 1
  //begin first dot sequence


  servoOn(1);
  int counter = 0;
  while (counter < 1000)
 34c:	e3 e0       	ldi	r30, 0x03	; 3
 34e:	88 3e       	cpi	r24, 0xE8	; 232
 350:	9e 07       	cpc	r25, r30
 352:	a4 f3       	brlt	.-24     	; 0x33c <find_first_well+0x46>
    } else {
      counter++;
      //printf("counter is %d \n", counter); // don't use printf it slows everything down ruining timing measurement
    }
  }
  servoOff();
 354:	0e 94 90 00 	call	0x120	; 0x120 <servoOff>
//  printf("what do we have here -- a well?\n");

  //_delay_ms(1000);
  go_to_next_dot(); //begin counting dots
 358:	0e 94 d6 00 	call	0x1ac	; 0x1ac <go_to_next_dot>
}
 35c:	08 95       	ret

0000035e <demo_centrifuge_stage>:

void demo_centrifuge_stage() {
  uint8_t i;
  uint8_t j;

  pwm_init();
 35e:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_init>

  OCR1AH = 0x50;
 362:	80 e5       	ldi	r24, 0x50	; 80
 364:	80 93 89 00 	sts	0x0089, r24
  OCR1AL = 0xff;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	80 93 88 00 	sts	0x0088, r24

  PORTB |= _BV(ENA); // ON the enable bit
 36e:	2c 9a       	sbi	0x05, 4	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  for (j = j_high ; j > j_low ; j--) {
    OCR1AH = j;
 370:	80 93 89 00 	sts	0x0089, r24
    for (i = i_high; i > i_low ; i--) {
 374:	9f ef       	ldi	r25, 0xFF	; 255
      OCR1AL = i;
 376:	90 93 88 00 	sts	0x0088, r25
 37a:	a7 ec       	ldi	r26, 0xC7	; 199
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <demo_centrifuge_stage+0x20>
 382:	00 c0       	rjmp	.+0      	; 0x384 <demo_centrifuge_stage+0x26>
 384:	00 00       	nop
  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  for (j = j_high ; j > j_low ; j--) {
    OCR1AH = j;
    for (i = i_high; i > i_low ; i--) {
 386:	91 50       	subi	r25, 0x01	; 1
 388:	b1 f7       	brne	.-20     	; 0x376 <demo_centrifuge_stage+0x18>
  uint8_t j_low  = 40;

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  for (j = j_high ; j > j_low ; j--) {
 38a:	81 50       	subi	r24, 0x01	; 1
 38c:	88 32       	cpi	r24, 0x28	; 40
 38e:	81 f7       	brne	.-32     	; 0x370 <demo_centrifuge_stage+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	9f e4       	ldi	r25, 0x4F	; 79
 394:	a3 ec       	ldi	r26, 0xC3	; 195
 396:	81 50       	subi	r24, 0x01	; 1
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	a0 40       	sbci	r26, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <demo_centrifuge_stage+0x38>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <demo_centrifuge_stage+0x42>
 3a0:	00 00       	nop
      OCR1AL = i;
      _delay_us(time_delay);
    }
  }
  _delay_ms(4000);
  PORTD &= ~_BV(ENA);// OFF the enable bit
 3a2:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 3a4:	80 91 80 00 	lds	r24, 0x0080
 3a8:	8f 7e       	andi	r24, 0xEF	; 239
 3aa:	80 93 80 00 	sts	0x0080, r24

}
 3ae:	08 95       	ret

000003b0 <shake_sequence>:
     }
     */
  return 0;
}

void shake_sequence(uint8_t number) {
 3b0:	df 93       	push	r29
 3b2:	cf 93       	push	r28
 3b4:	0f 92       	push	r0
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
  uint8_t i;
  uint8_t j;

  pwm_init();
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_init>

  OCR1AH = 0x50;
 3c0:	90 e5       	ldi	r25, 0x50	; 80
 3c2:	90 93 89 00 	sts	0x0089, r25
  OCR1AL = 0xff;
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	90 93 88 00 	sts	0x0088, r25

  PORTB |= _BV(ENA); // ON the enable bit
 3cc:	2c 9a       	sbi	0x05, 4	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	90 e0       	ldi	r25, 0x00	; 0
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 3d6:	68 e0       	ldi	r22, 0x08	; 8

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 3d8:	23 c0       	rjmp	.+70     	; 0x420 <shake_sequence+0x70>
 3da:	4f ef       	ldi	r20, 0xFF	; 255
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
 3dc:	40 93 89 00 	sts	0x0089, r20
      for (i = i_high; i > i_low ; i--) {
 3e0:	5f ef       	ldi	r21, 0xFF	; 255
        OCR1AL = i;
 3e2:	50 93 88 00 	sts	0x0088, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e6:	75 e3       	ldi	r23, 0x35	; 53
 3e8:	7a 95       	dec	r23
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <shake_sequence+0x38>
 3ec:	00 00       	nop
  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
      OCR1AH = j;
      for (i = i_high; i > i_low ; i--) {
 3ee:	51 50       	subi	r21, 0x01	; 1
 3f0:	c1 f7       	brne	.-16     	; 0x3e2 <shake_sequence+0x32>
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
  {
    for (j = j_high ; j > j_low ; j--) {
 3f2:	41 50       	subi	r20, 0x01	; 1
 3f4:	42 33       	cpi	r20, 0x32	; 50
 3f6:	91 f7       	brne	.-28     	; 0x3dc <shake_sequence+0x2c>
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
 3f8:	40 93 89 00 	sts	0x0089, r20
      for (i = i_low; i < i_high; i++) {
 3fc:	50 e0       	ldi	r21, 0x00	; 0
        OCR1AL = i;
 3fe:	50 93 88 00 	sts	0x0088, r21
 402:	e5 e3       	ldi	r30, 0x35	; 53
 404:	ea 95       	dec	r30
 406:	f1 f7       	brne	.-4      	; 0x404 <shake_sequence+0x54>
 408:	00 00       	nop
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
      OCR1AH = j;
      for (i = i_low; i < i_high; i++) {
 40a:	5f 5f       	subi	r21, 0xFF	; 255
 40c:	5f 3f       	cpi	r21, 0xFF	; 255
 40e:	b9 f7       	brne	.-18     	; 0x3fe <shake_sequence+0x4e>
      for (i = i_high; i > i_low ; i--) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    for (j = j_low ; j < j_high ; j++) {
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	4f 3f       	cpi	r20, 0xFF	; 255
 414:	89 f7       	brne	.-30     	; 0x3f8 <shake_sequence+0x48>
      for (i = i_low; i < i_high; i++) {
        OCR1AL = i;
        _delay_us(time_delay);
      }
    }
    PORTB ^= _BV(DIR);
 416:	45 b1       	in	r20, 0x05	; 5
 418:	46 27       	eor	r20, r22
 41a:	45 b9       	out	0x05, r20	; 5

  uint8_t i_high = 255;
  uint8_t i_low  = 0;

  int times;
  for ( times = 0 ; times < number ; times++)
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	28 17       	cp	r18, r24
 422:	39 07       	cpc	r19, r25
 424:	d4 f2       	brlt	.-76     	; 0x3da <shake_sequence+0x2a>
      }
    }
    PORTB ^= _BV(DIR);

  }
  PORTD &= ~_BV(ENA);// OFF the enable bit
 426:	5c 98       	cbi	0x0b, 4	; 11
  TCCR1A &= ~_BV(COM1B0); // COM1B0 indicates COM-pare action toggling OCR1B (which is arduino pin 10) on Compare Match aka PWM.
 428:	80 91 80 00 	lds	r24, 0x0080
 42c:	8f 7e       	andi	r24, 0xEF	; 239
 42e:	80 93 80 00 	sts	0x0080, r24
}
 432:	0f 90       	pop	r0
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <demo_full_sequence>:
}

//long pulseIn()

void demo_full_sequence(void) {
        shake_sequence(2); // TODO shake twice -- can mod this later for custom shakes
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <shake_sequence>
        demo_centrifuge_stage(); // TODO add control method for customization
 440:	0e 94 af 01 	call	0x35e	; 0x35e <demo_centrifuge_stage>
        find_first_well(); // finds first well 
 444:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <find_first_well>
        putchar('3'); // finds other wells -- see python script
 448:	60 91 28 01 	lds	r22, 0x0128
 44c:	70 91 29 01 	lds	r23, 0x0129
 450:	83 e3       	ldi	r24, 0x33	; 51
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
}
 458:	08 95       	ret

0000045a <set_baud>:
  */
}


void set_baud(void) {
  UBRR0H = (BRC >> 8);
 45a:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = BRC;
 45e:	87 e6       	ldi	r24, 0x67	; 103
 460:	80 93 c4 00 	sts	0x00C4, r24

  //enables rx and tx, page 183 example from documentation
  UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0 ) | (1 << TXCIE0);
 464:	88 ed       	ldi	r24, 0xD8	; 216
 466:	80 93 c1 00 	sts	0x00C1, r24

  //198 of documentation, these two bits make it 8-bit
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	80 93 c2 00 	sts	0x00C2, r24

  //since we don't use 2x
  UCSR0A &= ~(_BV(U2X0));
 470:	e0 ec       	ldi	r30, 0xC0	; 192
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	80 83       	st	Z, r24

  //redirecting standard out and in to UART -- very clever tuupola
  stdout = &uart_output;
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	90 93 29 01 	sts	0x0129, r25
 482:	80 93 28 01 	sts	0x0128, r24
  stdin  = &uart_input;
 486:	83 e1       	ldi	r24, 0x13	; 19
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	90 93 27 01 	sts	0x0127, r25
 48e:	80 93 26 01 	sts	0x0126, r24

}
 492:	08 95       	ret

00000494 <play_ready_beep>:
        int eighth_note = 120;
        int quarter_note = eighth_note*2;
//        int half_note = eighth_note*4;
     //   int whole_note=  eighth_note*8;

        for (spk = 0; spk < eighth_note; spk++) {
 494:	10 92 23 01 	sts	0x0123, r1
 498:	10 92 22 01 	sts	0x0122, r1
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 49c:	31 e0       	ldi	r19, 0x01	; 1
        int eighth_note = 120;
        int quarter_note = eighth_note*2;
//        int half_note = eighth_note*4;
     //   int whole_note=  eighth_note*8;

        for (spk = 0; spk < eighth_note; spk++) {
 49e:	0e c0       	rjmp	.+28     	; 0x4bc <play_ready_beep+0x28>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 4a0:	25 b1       	in	r18, 0x05	; 5
 4a2:	23 27       	eor	r18, r19
 4a4:	25 b9       	out	0x05, r18	; 5
 4a6:	ef e3       	ldi	r30, 0x3F	; 63
 4a8:	ff e1       	ldi	r31, 0x1F	; 31
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <play_ready_beep+0x16>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <play_ready_beep+0x1c>
 4b0:	00 00       	nop
        int eighth_note = 120;
        int quarter_note = eighth_note*2;
//        int half_note = eighth_note*4;
     //   int whole_note=  eighth_note*8;

        for (spk = 0; spk < eighth_note; spk++) {
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	90 93 23 01 	sts	0x0123, r25
 4b8:	80 93 22 01 	sts	0x0122, r24
 4bc:	80 91 22 01 	lds	r24, 0x0122
 4c0:	90 91 23 01 	lds	r25, 0x0123
 4c4:	88 37       	cpi	r24, 0x78	; 120
 4c6:	91 05       	cpc	r25, r1
 4c8:	5c f3       	brlt	.-42     	; 0x4a0 <play_ready_beep+0xc>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(2000); // should give around 400Hz
        }
        for (spk = 0; spk < eighth_note; spk++) {
 4ca:	10 92 23 01 	sts	0x0123, r1
 4ce:	10 92 22 01 	sts	0x0122, r1
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 4d2:	31 e0       	ldi	r19, 0x01	; 1

        for (spk = 0; spk < eighth_note; spk++) {
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(2000); // should give around 400Hz
        }
        for (spk = 0; spk < eighth_note; spk++) {
 4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <play_ready_beep+0x5e>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 4d6:	25 b1       	in	r18, 0x05	; 5
 4d8:	23 27       	eor	r18, r19
 4da:	25 b9       	out	0x05, r18	; 5
 4dc:	ef ef       	ldi	r30, 0xFF	; 255
 4de:	f8 e1       	ldi	r31, 0x18	; 24
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <play_ready_beep+0x4c>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <play_ready_beep+0x52>
 4e6:	00 00       	nop

        for (spk = 0; spk < eighth_note; spk++) {
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(2000); // should give around 400Hz
        }
        for (spk = 0; spk < eighth_note; spk++) {
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	90 93 23 01 	sts	0x0123, r25
 4ee:	80 93 22 01 	sts	0x0122, r24
 4f2:	80 91 22 01 	lds	r24, 0x0122
 4f6:	90 91 23 01 	lds	r25, 0x0123
 4fa:	88 37       	cpi	r24, 0x78	; 120
 4fc:	91 05       	cpc	r25, r1
 4fe:	5c f3       	brlt	.-42     	; 0x4d6 <play_ready_beep+0x42>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1600); // 2000*4/5   = 1600 or perfect third
        }
        for (spk = 0; spk < eighth_note; spk++) {
 500:	10 92 23 01 	sts	0x0123, r1
 504:	10 92 22 01 	sts	0x0122, r1
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 508:	31 e0       	ldi	r19, 0x01	; 1
        }
        for (spk = 0; spk < eighth_note; spk++) {
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1600); // 2000*4/5   = 1600 or perfect third
        }
        for (spk = 0; spk < eighth_note; spk++) {
 50a:	0e c0       	rjmp	.+28     	; 0x528 <play_ready_beep+0x94>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 50c:	25 b1       	in	r18, 0x05	; 5
 50e:	23 27       	eor	r18, r19
 510:	25 b9       	out	0x05, r18	; 5
 512:	e3 ed       	ldi	r30, 0xD3	; 211
 514:	f4 e1       	ldi	r31, 0x14	; 20
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <play_ready_beep+0x82>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <play_ready_beep+0x88>
 51c:	00 00       	nop
        }
        for (spk = 0; spk < eighth_note; spk++) {
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1600); // 2000*4/5   = 1600 or perfect third
        }
        for (spk = 0; spk < eighth_note; spk++) {
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 23 01 	sts	0x0123, r25
 524:	80 93 22 01 	sts	0x0122, r24
 528:	80 91 22 01 	lds	r24, 0x0122
 52c:	90 91 23 01 	lds	r25, 0x0123
 530:	88 37       	cpi	r24, 0x78	; 120
 532:	91 05       	cpc	r25, r1
 534:	5c f3       	brlt	.-42     	; 0x50c <play_ready_beep+0x78>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1333); // 2000*4/5*5/6 = 1333 or perfect fifth
        }
        for (spk = 0; spk < quarter_note; spk++) {
 536:	10 92 23 01 	sts	0x0123, r1
 53a:	10 92 22 01 	sts	0x0122, r1
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 53e:	31 e0       	ldi	r19, 0x01	; 1
        }
        for (spk = 0; spk < eighth_note; spk++) {
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1333); // 2000*4/5*5/6 = 1333 or perfect fifth
        }
        for (spk = 0; spk < quarter_note; spk++) {
 540:	0e c0       	rjmp	.+28     	; 0x55e <play_ready_beep+0xca>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 542:	25 b1       	in	r18, 0x05	; 5
 544:	23 27       	eor	r18, r19
 546:	25 b9       	out	0x05, r18	; 5
 548:	ef e9       	ldi	r30, 0x9F	; 159
 54a:	ff e0       	ldi	r31, 0x0F	; 15
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <play_ready_beep+0xb8>
 550:	00 c0       	rjmp	.+0      	; 0x552 <play_ready_beep+0xbe>
 552:	00 00       	nop
        }
        for (spk = 0; spk < eighth_note; spk++) {
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1333); // 2000*4/5*5/6 = 1333 or perfect fifth
        }
        for (spk = 0; spk < quarter_note; spk++) {
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	90 93 23 01 	sts	0x0123, r25
 55a:	80 93 22 01 	sts	0x0122, r24
 55e:	80 91 22 01 	lds	r24, 0x0122
 562:	90 91 23 01 	lds	r25, 0x0123
 566:	80 3f       	cpi	r24, 0xF0	; 240
 568:	91 05       	cpc	r25, r1
 56a:	5c f3       	brlt	.-42     	; 0x542 <play_ready_beep+0xae>
          PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
          _delay_us(1000); //2000*4/5*5/6*6/8 = 1000  one octave
        }
}
 56c:	08 95       	ret

0000056e <main>:
void demo_centrifuge_stage(void); // TODO add control method for customization
void demo_full_sequence(void); // TODO align sequence in a function
//======================

int main (void) {
  io_init(); //Setup IO pins and defaults
 56e:	0e 94 9a 00 	call	0x134	; 0x134 <io_init>
  set_baud();
 572:	0e 94 2d 02 	call	0x45a	; 0x45a <set_baud>

  char input;

  while (1) {

    input = getchar();
 576:	80 91 26 01 	lds	r24, 0x0126
 57a:	90 91 27 01 	lds	r25, 0x0127
 57e:	0e 94 5f 03 	call	0x6be	; 0x6be <fgetc>

    //first stage will be a simple switch case`


    switch (input) {
 582:	83 33       	cpi	r24, 0x33	; 51
 584:	b9 f1       	breq	.+110    	; 0x5f4 <main+0x86>
 586:	84 33       	cpi	r24, 0x34	; 52
 588:	40 f4       	brcc	.+16     	; 0x59a <main+0x2c>
 58a:	81 33       	cpi	r24, 0x31	; 49
 58c:	e1 f0       	breq	.+56     	; 0x5c6 <main+0x58>
 58e:	82 33       	cpi	r24, 0x32	; 50
 590:	30 f5       	brcc	.+76     	; 0x5de <main+0x70>
 592:	80 33       	cpi	r24, 0x30	; 48
 594:	09 f0       	breq	.+2      	; 0x598 <main+0x2a>
 596:	54 c0       	rjmp	.+168    	; 0x640 <main+0xd2>
 598:	09 c0       	rjmp	.+18     	; 0x5ac <main+0x3e>
 59a:	85 33       	cpi	r24, 0x35	; 53
 59c:	09 f4       	brne	.+2      	; 0x5a0 <main+0x32>
 59e:	40 c0       	rjmp	.+128    	; 0x620 <main+0xb2>
 5a0:	85 33       	cpi	r24, 0x35	; 53
 5a2:	98 f1       	brcs	.+102    	; 0x60a <main+0x9c>
 5a4:	86 33       	cpi	r24, 0x36	; 54
 5a6:	09 f0       	breq	.+2      	; 0x5aa <main+0x3c>
 5a8:	4b c0       	rjmp	.+150    	; 0x640 <main+0xd2>
 5aa:	42 c0       	rjmp	.+132    	; 0x630 <main+0xc2>
      case '0':
        //shake sequence
        spk=0;
 5ac:	10 92 23 01 	sts	0x0123, r1
 5b0:	10 92 22 01 	sts	0x0122, r1
        play_ready_beep();
 5b4:	0e 94 4a 02 	call	0x494	; 0x494 <play_ready_beep>

        putchar('0');
 5b8:	60 91 28 01 	lds	r22, 0x0128
 5bc:	70 91 29 01 	lds	r23, 0x0129
 5c0:	80 e3       	ldi	r24, 0x30	; 48
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	43 c0       	rjmp	.+134    	; 0x64c <main+0xde>
        break;
      case '1':
        //shake sequence
        PORTB |= _BV(ENA); // ON the enable bit
 5c6:	2c 9a       	sbi	0x05, 4	; 5
        shake_sequence(2); // TODO shake twice -- can mod this later for custom shakes
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <shake_sequence>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 5ce:	2c 98       	cbi	0x05, 4	; 5
        putchar('1');
 5d0:	60 91 28 01 	lds	r22, 0x0128
 5d4:	70 91 29 01 	lds	r23, 0x0129
 5d8:	81 e3       	ldi	r24, 0x31	; 49
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	37 c0       	rjmp	.+110    	; 0x64c <main+0xde>
        break;
      case '2':
        //ramp sequence
        PORTB |= _BV(ENA); // ON the enable bit
 5de:	2c 9a       	sbi	0x05, 4	; 5
        demo_centrifuge_stage(); // TODO add control method for customization
 5e0:	0e 94 af 01 	call	0x35e	; 0x35e <demo_centrifuge_stage>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 5e4:	2c 98       	cbi	0x05, 4	; 5
        putchar('2');
 5e6:	60 91 28 01 	lds	r22, 0x0128
 5ea:	70 91 29 01 	lds	r23, 0x0129
 5ee:	82 e3       	ldi	r24, 0x32	; 50
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	2c c0       	rjmp	.+88     	; 0x64c <main+0xde>
        break;
      case '3':
        //recording_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 5f4:	2c 9a       	sbi	0x05, 4	; 5
        find_first_well(); // TODO find the pwm speed for Servo.h 
 5f6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <find_first_well>
        //and emulate to avoid needing to perform trial and error
        PORTB &= ~_BV(ENA);// OFF the enable bit
 5fa:	2c 98       	cbi	0x05, 4	; 5
        putchar('3');
 5fc:	60 91 28 01 	lds	r22, 0x0128
 600:	70 91 29 01 	lds	r23, 0x0129
 604:	83 e3       	ldi	r24, 0x33	; 51
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	21 c0       	rjmp	.+66     	; 0x64c <main+0xde>
        break;
      case '4':
        //full_sequence
        PORTB |= _BV(ENA); // ON the enable bit
 60a:	2c 9a       	sbi	0x05, 4	; 5
        demo_full_sequence();// TODO create full sequence
 60c:	0e 94 1d 02 	call	0x43a	; 0x43a <demo_full_sequence>
        PORTB &= ~_BV(ENA);// OFF the enable bit
 610:	2c 98       	cbi	0x05, 4	; 5
        putchar('4');
 612:	60 91 28 01 	lds	r22, 0x0128
 616:	70 91 29 01 	lds	r23, 0x0129
 61a:	84 e3       	ldi	r24, 0x34	; 52
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	16 c0       	rjmp	.+44     	; 0x64c <main+0xde>
        break;
      case '5':
        //LED ON
        PORTB |= _BV(LED); // TODO Test LED ON
 620:	2d 9a       	sbi	0x05, 5	; 5
        putchar('5');
 622:	60 91 28 01 	lds	r22, 0x0128
 626:	70 91 29 01 	lds	r23, 0x0129
 62a:	85 e3       	ldi	r24, 0x35	; 53
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e c0       	rjmp	.+28     	; 0x64c <main+0xde>
        break;
      case '6':
        //LED OFF
        PORTB &= ~_BV(LED); // TODO Test LED OFF
 630:	2d 98       	cbi	0x05, 5	; 5
        putchar('6');
 632:	60 91 28 01 	lds	r22, 0x0128
 636:	70 91 29 01 	lds	r23, 0x0129
 63a:	86 e3       	ldi	r24, 0x36	; 54
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	06 c0       	rjmp	.+12     	; 0x64c <main+0xde>
        break;
      default:
        putchar('a');
 640:	60 91 28 01 	lds	r22, 0x0128
 644:	70 91 29 01 	lds	r23, 0x0129
 648:	81 e6       	ldi	r24, 0x61	; 97
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 650:	92 cf       	rjmp	.-220    	; 0x576 <main+0x8>

00000652 <set_external_interrupts>:
// refer to page 72 of the atmel datasheet for register information

// NOTES ABOUT THE MAGNETIC SWITCH

void set_external_interrupts () {
  DDRD &= ~_BV(LID_DETECTOR); //turn pin 3  into an input port
 652:	53 98       	cbi	0x0a, 3	; 10
  PORTD |= _BV(LID_DETECTOR); // we will want to detect an edge or something
 654:	5b 9a       	sbi	0x0b, 3	; 11

  EIMSK |= _BV(INT1); //enable INT1 for interrupt 1
 656:	e9 9a       	sbi	0x1d, 1	; 29
  //EICRA |= _BV(ISC11); // will need to create 00 for low level on

  sei(); // literally means set external interrupts
 658:	78 94       	sei
}
 65a:	08 95       	ret

0000065c <__vector_2>:


//external interrupt is programmed to buzz when triggered
ISR(INT1_vect) {
 65c:	1f 92       	push	r1
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	2f 93       	push	r18
 668:	3f 93       	push	r19
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
  for (spk = 0; spk < 50 ; spk++) {
 672:	10 92 23 01 	sts	0x0123, r1
 676:	10 92 22 01 	sts	0x0122, r1
    PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 67a:	31 e0       	ldi	r19, 0x01	; 1
}


//external interrupt is programmed to buzz when triggered
ISR(INT1_vect) {
  for (spk = 0; spk < 50 ; spk++) {
 67c:	0e c0       	rjmp	.+28     	; 0x69a <__vector_2+0x3e>
    PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
 67e:	25 b1       	in	r18, 0x05	; 5
 680:	23 27       	eor	r18, r19
 682:	25 b9       	out	0x05, r18	; 5
 684:	ef e3       	ldi	r30, 0x3F	; 63
 686:	ff e1       	ldi	r31, 0x1F	; 31
 688:	31 97       	sbiw	r30, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <__vector_2+0x2c>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <__vector_2+0x32>
 68e:	00 00       	nop
}


//external interrupt is programmed to buzz when triggered
ISR(INT1_vect) {
  for (spk = 0; spk < 50 ; spk++) {
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	90 93 23 01 	sts	0x0123, r25
 696:	80 93 22 01 	sts	0x0122, r24
 69a:	80 91 22 01 	lds	r24, 0x0122
 69e:	90 91 23 01 	lds	r25, 0x0123
 6a2:	82 33       	cpi	r24, 0x32	; 50
 6a4:	91 05       	cpc	r25, r1
 6a6:	5c f3       	brlt	.-42     	; 0x67e <__vector_2+0x22>
    PORTB ^=  _BV(SPEAKER); //bitwise xor that toggles pins-- this is really useful!!
    _delay_us(2000); // should give around 400Hz
  }
}
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <fgetc>:
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ec 01       	movw	r28, r24
 6c4:	3b 81       	ldd	r19, Y+3	; 0x03
 6c6:	30 ff       	sbrs	r19, 0
 6c8:	36 c0       	rjmp	.+108    	; 0x736 <fgetc+0x78>
 6ca:	36 ff       	sbrs	r19, 6
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <fgetc+0x22>
 6ce:	3f 7b       	andi	r19, 0xBF	; 191
 6d0:	3b 83       	std	Y+3, r19	; 0x03
 6d2:	8e 81       	ldd	r24, Y+6	; 0x06
 6d4:	9f 81       	ldd	r25, Y+7	; 0x07
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	9f 83       	std	Y+7, r25	; 0x07
 6da:	8e 83       	std	Y+6, r24	; 0x06
 6dc:	2a 81       	ldd	r18, Y+2	; 0x02
 6de:	29 c0       	rjmp	.+82     	; 0x732 <fgetc+0x74>
 6e0:	32 ff       	sbrs	r19, 2
 6e2:	0f c0       	rjmp	.+30     	; 0x702 <fgetc+0x44>
 6e4:	e8 81       	ld	r30, Y
 6e6:	f9 81       	ldd	r31, Y+1	; 0x01
 6e8:	80 81       	ld	r24, Z
 6ea:	99 27       	eor	r25, r25
 6ec:	87 fd       	sbrc	r24, 7
 6ee:	90 95       	com	r25
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	19 f4       	brne	.+6      	; 0x6fa <fgetc+0x3c>
 6f4:	30 62       	ori	r19, 0x20	; 32
 6f6:	3b 83       	std	Y+3, r19	; 0x03
 6f8:	1e c0       	rjmp	.+60     	; 0x736 <fgetc+0x78>
 6fa:	31 96       	adiw	r30, 0x01	; 1
 6fc:	f9 83       	std	Y+1, r31	; 0x01
 6fe:	e8 83       	st	Y, r30
 700:	11 c0       	rjmp	.+34     	; 0x724 <fgetc+0x66>
 702:	ea 85       	ldd	r30, Y+10	; 0x0a
 704:	fb 85       	ldd	r31, Y+11	; 0x0b
 706:	ce 01       	movw	r24, r28
 708:	09 95       	icall
 70a:	97 ff       	sbrs	r25, 7
 70c:	0b c0       	rjmp	.+22     	; 0x724 <fgetc+0x66>
 70e:	2b 81       	ldd	r18, Y+3	; 0x03
 710:	3f ef       	ldi	r19, 0xFF	; 255
 712:	8f 3f       	cpi	r24, 0xFF	; 255
 714:	93 07       	cpc	r25, r19
 716:	11 f4       	brne	.+4      	; 0x71c <fgetc+0x5e>
 718:	80 e1       	ldi	r24, 0x10	; 16
 71a:	01 c0       	rjmp	.+2      	; 0x71e <fgetc+0x60>
 71c:	80 e2       	ldi	r24, 0x20	; 32
 71e:	82 2b       	or	r24, r18
 720:	8b 83       	std	Y+3, r24	; 0x03
 722:	09 c0       	rjmp	.+18     	; 0x736 <fgetc+0x78>
 724:	2e 81       	ldd	r18, Y+6	; 0x06
 726:	3f 81       	ldd	r19, Y+7	; 0x07
 728:	2f 5f       	subi	r18, 0xFF	; 255
 72a:	3f 4f       	sbci	r19, 0xFF	; 255
 72c:	3f 83       	std	Y+7, r19	; 0x07
 72e:	2e 83       	std	Y+6, r18	; 0x06
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <fgetc+0x7c>
 736:	2f ef       	ldi	r18, 0xFF	; 255
 738:	3f ef       	ldi	r19, 0xFF	; 255
 73a:	c9 01       	movw	r24, r18
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <fputc>:
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	8c 01       	movw	r16, r24
 74c:	eb 01       	movw	r28, r22
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	81 ff       	sbrs	r24, 1
 752:	1b c0       	rjmp	.+54     	; 0x78a <fputc+0x48>
 754:	82 ff       	sbrs	r24, 2
 756:	0d c0       	rjmp	.+26     	; 0x772 <fputc+0x30>
 758:	2e 81       	ldd	r18, Y+6	; 0x06
 75a:	3f 81       	ldd	r19, Y+7	; 0x07
 75c:	8c 81       	ldd	r24, Y+4	; 0x04
 75e:	9d 81       	ldd	r25, Y+5	; 0x05
 760:	28 17       	cp	r18, r24
 762:	39 07       	cpc	r19, r25
 764:	64 f4       	brge	.+24     	; 0x77e <fputc+0x3c>
 766:	e8 81       	ld	r30, Y
 768:	f9 81       	ldd	r31, Y+1	; 0x01
 76a:	01 93       	st	Z+, r16
 76c:	f9 83       	std	Y+1, r31	; 0x01
 76e:	e8 83       	st	Y, r30
 770:	06 c0       	rjmp	.+12     	; 0x77e <fputc+0x3c>
 772:	e8 85       	ldd	r30, Y+8	; 0x08
 774:	f9 85       	ldd	r31, Y+9	; 0x09
 776:	80 2f       	mov	r24, r16
 778:	09 95       	icall
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	31 f4       	brne	.+12     	; 0x78a <fputc+0x48>
 77e:	8e 81       	ldd	r24, Y+6	; 0x06
 780:	9f 81       	ldd	r25, Y+7	; 0x07
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	9f 83       	std	Y+7, r25	; 0x07
 786:	8e 83       	std	Y+6, r24	; 0x06
 788:	02 c0       	rjmp	.+4      	; 0x78e <fputc+0x4c>
 78a:	0f ef       	ldi	r16, 0xFF	; 255
 78c:	1f ef       	ldi	r17, 0xFF	; 255
 78e:	c8 01       	movw	r24, r16
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	08 95       	ret

0000079a <printf>:
 79a:	a0 e0       	ldi	r26, 0x00	; 0
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e3 ed       	ldi	r30, 0xD3	; 211
 7a0:	f3 e0       	ldi	r31, 0x03	; 3
 7a2:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__prologue_saves__+0x20>
 7a6:	fe 01       	movw	r30, r28
 7a8:	35 96       	adiw	r30, 0x05	; 5
 7aa:	61 91       	ld	r22, Z+
 7ac:	71 91       	ld	r23, Z+
 7ae:	80 91 28 01 	lds	r24, 0x0128
 7b2:	90 91 29 01 	lds	r25, 0x0129
 7b6:	af 01       	movw	r20, r30
 7b8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vfprintf>
 7bc:	20 96       	adiw	r28, 0x00	; 0
 7be:	e2 e0       	ldi	r30, 0x02	; 2
 7c0:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__epilogue_restores__+0x20>

000007c4 <vfprintf>:
 7c4:	ac e0       	ldi	r26, 0x0C	; 12
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e8 ee       	ldi	r30, 0xE8	; 232
 7ca:	f3 e0       	ldi	r31, 0x03	; 3
 7cc:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__prologue_saves__>
 7d0:	6c 01       	movw	r12, r24
 7d2:	1b 01       	movw	r2, r22
 7d4:	8a 01       	movw	r16, r20
 7d6:	fc 01       	movw	r30, r24
 7d8:	17 82       	std	Z+7, r1	; 0x07
 7da:	16 82       	std	Z+6, r1	; 0x06
 7dc:	83 81       	ldd	r24, Z+3	; 0x03
 7de:	81 ff       	sbrs	r24, 1
 7e0:	d1 c1       	rjmp	.+930    	; 0xb84 <__stack+0x285>
 7e2:	2e 01       	movw	r4, r28
 7e4:	08 94       	sec
 7e6:	41 1c       	adc	r4, r1
 7e8:	51 1c       	adc	r5, r1
 7ea:	f6 01       	movw	r30, r12
 7ec:	93 81       	ldd	r25, Z+3	; 0x03
 7ee:	f1 01       	movw	r30, r2
 7f0:	93 fd       	sbrc	r25, 3
 7f2:	85 91       	lpm	r24, Z+
 7f4:	93 ff       	sbrs	r25, 3
 7f6:	81 91       	ld	r24, Z+
 7f8:	1f 01       	movw	r2, r30
 7fa:	88 23       	and	r24, r24
 7fc:	09 f4       	brne	.+2      	; 0x800 <vfprintf+0x3c>
 7fe:	be c1       	rjmp	.+892    	; 0xb7c <__stack+0x27d>
 800:	85 32       	cpi	r24, 0x25	; 37
 802:	39 f4       	brne	.+14     	; 0x812 <vfprintf+0x4e>
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	1f 01       	movw	r2, r30
 80e:	85 32       	cpi	r24, 0x25	; 37
 810:	29 f4       	brne	.+10     	; 0x81c <vfprintf+0x58>
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	b6 01       	movw	r22, r12
 816:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 81a:	e7 cf       	rjmp	.-50     	; 0x7ea <vfprintf+0x26>
 81c:	ee 24       	eor	r14, r14
 81e:	ff 24       	eor	r15, r15
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	20 32       	cpi	r18, 0x20	; 32
 824:	b0 f4       	brcc	.+44     	; 0x852 <vfprintf+0x8e>
 826:	8b 32       	cpi	r24, 0x2B	; 43
 828:	69 f0       	breq	.+26     	; 0x844 <vfprintf+0x80>
 82a:	8c 32       	cpi	r24, 0x2C	; 44
 82c:	28 f4       	brcc	.+10     	; 0x838 <vfprintf+0x74>
 82e:	80 32       	cpi	r24, 0x20	; 32
 830:	51 f0       	breq	.+20     	; 0x846 <vfprintf+0x82>
 832:	83 32       	cpi	r24, 0x23	; 35
 834:	71 f4       	brne	.+28     	; 0x852 <vfprintf+0x8e>
 836:	0b c0       	rjmp	.+22     	; 0x84e <vfprintf+0x8a>
 838:	8d 32       	cpi	r24, 0x2D	; 45
 83a:	39 f0       	breq	.+14     	; 0x84a <vfprintf+0x86>
 83c:	80 33       	cpi	r24, 0x30	; 48
 83e:	49 f4       	brne	.+18     	; 0x852 <vfprintf+0x8e>
 840:	21 60       	ori	r18, 0x01	; 1
 842:	2c c0       	rjmp	.+88     	; 0x89c <vfprintf+0xd8>
 844:	22 60       	ori	r18, 0x02	; 2
 846:	24 60       	ori	r18, 0x04	; 4
 848:	29 c0       	rjmp	.+82     	; 0x89c <vfprintf+0xd8>
 84a:	28 60       	ori	r18, 0x08	; 8
 84c:	27 c0       	rjmp	.+78     	; 0x89c <vfprintf+0xd8>
 84e:	20 61       	ori	r18, 0x10	; 16
 850:	25 c0       	rjmp	.+74     	; 0x89c <vfprintf+0xd8>
 852:	27 fd       	sbrc	r18, 7
 854:	2c c0       	rjmp	.+88     	; 0x8ae <vfprintf+0xea>
 856:	38 2f       	mov	r19, r24
 858:	30 53       	subi	r19, 0x30	; 48
 85a:	3a 30       	cpi	r19, 0x0A	; 10
 85c:	98 f4       	brcc	.+38     	; 0x884 <vfprintf+0xc0>
 85e:	26 ff       	sbrs	r18, 6
 860:	08 c0       	rjmp	.+16     	; 0x872 <vfprintf+0xae>
 862:	8e 2d       	mov	r24, r14
 864:	88 0f       	add	r24, r24
 866:	e8 2e       	mov	r14, r24
 868:	ee 0c       	add	r14, r14
 86a:	ee 0c       	add	r14, r14
 86c:	e8 0e       	add	r14, r24
 86e:	e3 0e       	add	r14, r19
 870:	15 c0       	rjmp	.+42     	; 0x89c <vfprintf+0xd8>
 872:	8f 2d       	mov	r24, r15
 874:	88 0f       	add	r24, r24
 876:	f8 2e       	mov	r15, r24
 878:	ff 0c       	add	r15, r15
 87a:	ff 0c       	add	r15, r15
 87c:	f8 0e       	add	r15, r24
 87e:	f3 0e       	add	r15, r19
 880:	20 62       	ori	r18, 0x20	; 32
 882:	0c c0       	rjmp	.+24     	; 0x89c <vfprintf+0xd8>
 884:	8e 32       	cpi	r24, 0x2E	; 46
 886:	21 f4       	brne	.+8      	; 0x890 <vfprintf+0xcc>
 888:	26 fd       	sbrc	r18, 6
 88a:	78 c1       	rjmp	.+752    	; 0xb7c <__stack+0x27d>
 88c:	20 64       	ori	r18, 0x40	; 64
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0xd8>
 890:	8c 36       	cpi	r24, 0x6C	; 108
 892:	11 f4       	brne	.+4      	; 0x898 <vfprintf+0xd4>
 894:	20 68       	ori	r18, 0x80	; 128
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0xd8>
 898:	88 36       	cpi	r24, 0x68	; 104
 89a:	49 f4       	brne	.+18     	; 0x8ae <vfprintf+0xea>
 89c:	f1 01       	movw	r30, r2
 89e:	93 fd       	sbrc	r25, 3
 8a0:	85 91       	lpm	r24, Z+
 8a2:	93 ff       	sbrs	r25, 3
 8a4:	81 91       	ld	r24, Z+
 8a6:	1f 01       	movw	r2, r30
 8a8:	88 23       	and	r24, r24
 8aa:	09 f0       	breq	.+2      	; 0x8ae <vfprintf+0xea>
 8ac:	ba cf       	rjmp	.-140    	; 0x822 <vfprintf+0x5e>
 8ae:	98 2f       	mov	r25, r24
 8b0:	95 54       	subi	r25, 0x45	; 69
 8b2:	93 30       	cpi	r25, 0x03	; 3
 8b4:	18 f0       	brcs	.+6      	; 0x8bc <vfprintf+0xf8>
 8b6:	90 52       	subi	r25, 0x20	; 32
 8b8:	93 30       	cpi	r25, 0x03	; 3
 8ba:	28 f4       	brcc	.+10     	; 0x8c6 <vfprintf+0x102>
 8bc:	0c 5f       	subi	r16, 0xFC	; 252
 8be:	1f 4f       	sbci	r17, 0xFF	; 255
 8c0:	ff e3       	ldi	r31, 0x3F	; 63
 8c2:	f9 83       	std	Y+1, r31	; 0x01
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <vfprintf+0x11c>
 8c6:	83 36       	cpi	r24, 0x63	; 99
 8c8:	31 f0       	breq	.+12     	; 0x8d6 <vfprintf+0x112>
 8ca:	83 37       	cpi	r24, 0x73	; 115
 8cc:	71 f0       	breq	.+28     	; 0x8ea <vfprintf+0x126>
 8ce:	83 35       	cpi	r24, 0x53	; 83
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <vfprintf+0x110>
 8d2:	60 c0       	rjmp	.+192    	; 0x994 <__stack+0x95>
 8d4:	22 c0       	rjmp	.+68     	; 0x91a <__stack+0x1b>
 8d6:	f8 01       	movw	r30, r16
 8d8:	80 81       	ld	r24, Z
 8da:	89 83       	std	Y+1, r24	; 0x01
 8dc:	0e 5f       	subi	r16, 0xFE	; 254
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	42 01       	movw	r8, r4
 8e2:	71 e0       	ldi	r23, 0x01	; 1
 8e4:	a7 2e       	mov	r10, r23
 8e6:	b1 2c       	mov	r11, r1
 8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	66 2e       	mov	r6, r22
 8ee:	71 2c       	mov	r7, r1
 8f0:	60 0e       	add	r6, r16
 8f2:	71 1e       	adc	r7, r17
 8f4:	f8 01       	movw	r30, r16
 8f6:	80 80       	ld	r8, Z
 8f8:	91 80       	ldd	r9, Z+1	; 0x01
 8fa:	26 ff       	sbrs	r18, 6
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0x5>
 8fe:	6e 2d       	mov	r22, r14
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
 904:	6f ef       	ldi	r22, 0xFF	; 255
 906:	7f ef       	ldi	r23, 0xFF	; 255
 908:	c4 01       	movw	r24, r8
 90a:	2c 87       	std	Y+12, r18	; 0x0c
 90c:	0e 94 d4 05 	call	0xba8	; 0xba8 <strnlen>
 910:	5c 01       	movw	r10, r24
 912:	83 01       	movw	r16, r6
 914:	2c 85       	ldd	r18, Y+12	; 0x0c
 916:	2f 77       	andi	r18, 0x7F	; 127
 918:	17 c0       	rjmp	.+46     	; 0x948 <__stack+0x49>
 91a:	52 e0       	ldi	r21, 0x02	; 2
 91c:	65 2e       	mov	r6, r21
 91e:	71 2c       	mov	r7, r1
 920:	60 0e       	add	r6, r16
 922:	71 1e       	adc	r7, r17
 924:	f8 01       	movw	r30, r16
 926:	80 80       	ld	r8, Z
 928:	91 80       	ldd	r9, Z+1	; 0x01
 92a:	26 ff       	sbrs	r18, 6
 92c:	03 c0       	rjmp	.+6      	; 0x934 <__stack+0x35>
 92e:	6e 2d       	mov	r22, r14
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
 934:	6f ef       	ldi	r22, 0xFF	; 255
 936:	7f ef       	ldi	r23, 0xFF	; 255
 938:	c4 01       	movw	r24, r8
 93a:	2c 87       	std	Y+12, r18	; 0x0c
 93c:	0e 94 c9 05 	call	0xb92	; 0xb92 <strnlen_P>
 940:	5c 01       	movw	r10, r24
 942:	2c 85       	ldd	r18, Y+12	; 0x0c
 944:	20 68       	ori	r18, 0x80	; 128
 946:	83 01       	movw	r16, r6
 948:	23 fd       	sbrc	r18, 3
 94a:	20 c0       	rjmp	.+64     	; 0x98c <__stack+0x8d>
 94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0x5f>
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	b6 01       	movw	r22, r12
 954:	2c 87       	std	Y+12, r18	; 0x0c
 956:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 95a:	fa 94       	dec	r15
 95c:	2c 85       	ldd	r18, Y+12	; 0x0c
 95e:	8f 2d       	mov	r24, r15
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	a8 16       	cp	r10, r24
 964:	b9 06       	cpc	r11, r25
 966:	98 f3       	brcs	.-26     	; 0x94e <__stack+0x4f>
 968:	11 c0       	rjmp	.+34     	; 0x98c <__stack+0x8d>
 96a:	f4 01       	movw	r30, r8
 96c:	27 fd       	sbrc	r18, 7
 96e:	85 91       	lpm	r24, Z+
 970:	27 ff       	sbrs	r18, 7
 972:	81 91       	ld	r24, Z+
 974:	4f 01       	movw	r8, r30
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	b6 01       	movw	r22, r12
 97a:	2c 87       	std	Y+12, r18	; 0x0c
 97c:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 980:	2c 85       	ldd	r18, Y+12	; 0x0c
 982:	f1 10       	cpse	r15, r1
 984:	fa 94       	dec	r15
 986:	08 94       	sec
 988:	a1 08       	sbc	r10, r1
 98a:	b1 08       	sbc	r11, r1
 98c:	a1 14       	cp	r10, r1
 98e:	b1 04       	cpc	r11, r1
 990:	61 f7       	brne	.-40     	; 0x96a <__stack+0x6b>
 992:	f1 c0       	rjmp	.+482    	; 0xb76 <__stack+0x277>
 994:	84 36       	cpi	r24, 0x64	; 100
 996:	11 f0       	breq	.+4      	; 0x99c <__stack+0x9d>
 998:	89 36       	cpi	r24, 0x69	; 105
 99a:	49 f5       	brne	.+82     	; 0x9ee <__stack+0xef>
 99c:	27 ff       	sbrs	r18, 7
 99e:	08 c0       	rjmp	.+16     	; 0x9b0 <__stack+0xb1>
 9a0:	f8 01       	movw	r30, r16
 9a2:	60 81       	ld	r22, Z
 9a4:	71 81       	ldd	r23, Z+1	; 0x01
 9a6:	82 81       	ldd	r24, Z+2	; 0x02
 9a8:	93 81       	ldd	r25, Z+3	; 0x03
 9aa:	0c 5f       	subi	r16, 0xFC	; 252
 9ac:	1f 4f       	sbci	r17, 0xFF	; 255
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__stack+0xc3>
 9b0:	f8 01       	movw	r30, r16
 9b2:	60 81       	ld	r22, Z
 9b4:	71 81       	ldd	r23, Z+1	; 0x01
 9b6:	88 27       	eor	r24, r24
 9b8:	77 fd       	sbrc	r23, 7
 9ba:	80 95       	com	r24
 9bc:	98 2f       	mov	r25, r24
 9be:	0e 5f       	subi	r16, 0xFE	; 254
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	4f e6       	ldi	r20, 0x6F	; 111
 9c4:	b4 2e       	mov	r11, r20
 9c6:	b2 22       	and	r11, r18
 9c8:	97 ff       	sbrs	r25, 7
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <__stack+0xdf>
 9cc:	90 95       	com	r25
 9ce:	80 95       	com	r24
 9d0:	70 95       	com	r23
 9d2:	61 95       	neg	r22
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	f0 e8       	ldi	r31, 0x80	; 128
 9dc:	bf 2a       	or	r11, r31
 9de:	a2 01       	movw	r20, r4
 9e0:	2a e0       	ldi	r18, 0x0A	; 10
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	0e 94 df 05 	call	0xbbe	; 0xbbe <__ultoa_invert>
 9e8:	78 2e       	mov	r7, r24
 9ea:	74 18       	sub	r7, r4
 9ec:	45 c0       	rjmp	.+138    	; 0xa78 <__stack+0x179>
 9ee:	85 37       	cpi	r24, 0x75	; 117
 9f0:	31 f4       	brne	.+12     	; 0x9fe <__stack+0xff>
 9f2:	3f ee       	ldi	r19, 0xEF	; 239
 9f4:	b3 2e       	mov	r11, r19
 9f6:	b2 22       	and	r11, r18
 9f8:	2a e0       	ldi	r18, 0x0A	; 10
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	25 c0       	rjmp	.+74     	; 0xa48 <__stack+0x149>
 9fe:	99 ef       	ldi	r25, 0xF9	; 249
 a00:	b9 2e       	mov	r11, r25
 a02:	b2 22       	and	r11, r18
 a04:	8f 36       	cpi	r24, 0x6F	; 111
 a06:	c1 f0       	breq	.+48     	; 0xa38 <__stack+0x139>
 a08:	80 37       	cpi	r24, 0x70	; 112
 a0a:	20 f4       	brcc	.+8      	; 0xa14 <__stack+0x115>
 a0c:	88 35       	cpi	r24, 0x58	; 88
 a0e:	09 f0       	breq	.+2      	; 0xa12 <__stack+0x113>
 a10:	b5 c0       	rjmp	.+362    	; 0xb7c <__stack+0x27d>
 a12:	0d c0       	rjmp	.+26     	; 0xa2e <__stack+0x12f>
 a14:	80 37       	cpi	r24, 0x70	; 112
 a16:	21 f0       	breq	.+8      	; 0xa20 <__stack+0x121>
 a18:	88 37       	cpi	r24, 0x78	; 120
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__stack+0x11f>
 a1c:	af c0       	rjmp	.+350    	; 0xb7c <__stack+0x27d>
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__stack+0x125>
 a20:	20 e1       	ldi	r18, 0x10	; 16
 a22:	b2 2a       	or	r11, r18
 a24:	b4 fe       	sbrs	r11, 4
 a26:	0b c0       	rjmp	.+22     	; 0xa3e <__stack+0x13f>
 a28:	84 e0       	ldi	r24, 0x04	; 4
 a2a:	b8 2a       	or	r11, r24
 a2c:	08 c0       	rjmp	.+16     	; 0xa3e <__stack+0x13f>
 a2e:	b4 fe       	sbrs	r11, 4
 a30:	09 c0       	rjmp	.+18     	; 0xa44 <__stack+0x145>
 a32:	e6 e0       	ldi	r30, 0x06	; 6
 a34:	be 2a       	or	r11, r30
 a36:	06 c0       	rjmp	.+12     	; 0xa44 <__stack+0x145>
 a38:	28 e0       	ldi	r18, 0x08	; 8
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__stack+0x149>
 a3e:	20 e1       	ldi	r18, 0x10	; 16
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <__stack+0x149>
 a44:	20 e1       	ldi	r18, 0x10	; 16
 a46:	32 e0       	ldi	r19, 0x02	; 2
 a48:	b7 fe       	sbrs	r11, 7
 a4a:	08 c0       	rjmp	.+16     	; 0xa5c <__stack+0x15d>
 a4c:	f8 01       	movw	r30, r16
 a4e:	60 81       	ld	r22, Z
 a50:	71 81       	ldd	r23, Z+1	; 0x01
 a52:	82 81       	ldd	r24, Z+2	; 0x02
 a54:	93 81       	ldd	r25, Z+3	; 0x03
 a56:	0c 5f       	subi	r16, 0xFC	; 252
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
 a5c:	f8 01       	movw	r30, r16
 a5e:	60 81       	ld	r22, Z
 a60:	71 81       	ldd	r23, Z+1	; 0x01
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 5f       	subi	r16, 0xFE	; 254
 a68:	1f 4f       	sbci	r17, 0xFF	; 255
 a6a:	a2 01       	movw	r20, r4
 a6c:	0e 94 df 05 	call	0xbbe	; 0xbbe <__ultoa_invert>
 a70:	78 2e       	mov	r7, r24
 a72:	74 18       	sub	r7, r4
 a74:	ff e7       	ldi	r31, 0x7F	; 127
 a76:	bf 22       	and	r11, r31
 a78:	b6 fe       	sbrs	r11, 6
 a7a:	0b c0       	rjmp	.+22     	; 0xa92 <__stack+0x193>
 a7c:	2e ef       	ldi	r18, 0xFE	; 254
 a7e:	b2 22       	and	r11, r18
 a80:	7e 14       	cp	r7, r14
 a82:	38 f4       	brcc	.+14     	; 0xa92 <__stack+0x193>
 a84:	b4 fe       	sbrs	r11, 4
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <__stack+0x197>
 a88:	b2 fc       	sbrc	r11, 2
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__stack+0x197>
 a8c:	8f ee       	ldi	r24, 0xEF	; 239
 a8e:	b8 22       	and	r11, r24
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <__stack+0x197>
 a92:	a7 2c       	mov	r10, r7
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <__stack+0x199>
 a96:	ae 2c       	mov	r10, r14
 a98:	8b 2d       	mov	r24, r11
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	b4 fe       	sbrs	r11, 4
 a9e:	0d c0       	rjmp	.+26     	; 0xaba <__stack+0x1bb>
 aa0:	fe 01       	movw	r30, r28
 aa2:	e7 0d       	add	r30, r7
 aa4:	f1 1d       	adc	r31, r1
 aa6:	20 81       	ld	r18, Z
 aa8:	20 33       	cpi	r18, 0x30	; 48
 aaa:	19 f4       	brne	.+6      	; 0xab2 <__stack+0x1b3>
 aac:	e9 ee       	ldi	r30, 0xE9	; 233
 aae:	be 22       	and	r11, r30
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__stack+0x1c5>
 ab2:	a3 94       	inc	r10
 ab4:	b2 fe       	sbrs	r11, 2
 ab6:	06 c0       	rjmp	.+12     	; 0xac4 <__stack+0x1c5>
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__stack+0x1c3>
 aba:	86 78       	andi	r24, 0x86	; 134
 abc:	90 70       	andi	r25, 0x00	; 0
 abe:	00 97       	sbiw	r24, 0x00	; 0
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__stack+0x1c5>
 ac2:	a3 94       	inc	r10
 ac4:	8b 2c       	mov	r8, r11
 ac6:	99 24       	eor	r9, r9
 ac8:	b3 fc       	sbrc	r11, 3
 aca:	14 c0       	rjmp	.+40     	; 0xaf4 <__stack+0x1f5>
 acc:	b0 fe       	sbrs	r11, 0
 ace:	0f c0       	rjmp	.+30     	; 0xaee <__stack+0x1ef>
 ad0:	af 14       	cp	r10, r15
 ad2:	28 f4       	brcc	.+10     	; 0xade <__stack+0x1df>
 ad4:	e7 2c       	mov	r14, r7
 ad6:	ef 0c       	add	r14, r15
 ad8:	ea 18       	sub	r14, r10
 ada:	af 2c       	mov	r10, r15
 adc:	08 c0       	rjmp	.+16     	; 0xaee <__stack+0x1ef>
 ade:	e7 2c       	mov	r14, r7
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <__stack+0x1ef>
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	b6 01       	movw	r22, r12
 ae8:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 aec:	a3 94       	inc	r10
 aee:	af 14       	cp	r10, r15
 af0:	c0 f3       	brcs	.-16     	; 0xae2 <__stack+0x1e3>
 af2:	04 c0       	rjmp	.+8      	; 0xafc <__stack+0x1fd>
 af4:	af 14       	cp	r10, r15
 af6:	10 f4       	brcc	.+4      	; 0xafc <__stack+0x1fd>
 af8:	fa 18       	sub	r15, r10
 afa:	01 c0       	rjmp	.+2      	; 0xafe <__stack+0x1ff>
 afc:	ff 24       	eor	r15, r15
 afe:	84 fe       	sbrs	r8, 4
 b00:	0f c0       	rjmp	.+30     	; 0xb20 <__stack+0x221>
 b02:	80 e3       	ldi	r24, 0x30	; 48
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	b6 01       	movw	r22, r12
 b08:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 b0c:	82 fe       	sbrs	r8, 2
 b0e:	1f c0       	rjmp	.+62     	; 0xb4e <__stack+0x24f>
 b10:	81 fe       	sbrs	r8, 1
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <__stack+0x21b>
 b14:	88 e5       	ldi	r24, 0x58	; 88
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	10 c0       	rjmp	.+32     	; 0xb3a <__stack+0x23b>
 b1a:	88 e7       	ldi	r24, 0x78	; 120
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <__stack+0x23b>
 b20:	c4 01       	movw	r24, r8
 b22:	86 78       	andi	r24, 0x86	; 134
 b24:	90 70       	andi	r25, 0x00	; 0
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	91 f0       	breq	.+36     	; 0xb4e <__stack+0x24f>
 b2a:	81 fc       	sbrc	r8, 1
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <__stack+0x233>
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	01 c0       	rjmp	.+2      	; 0xb34 <__stack+0x235>
 b32:	8b e2       	ldi	r24, 0x2B	; 43
 b34:	b7 fc       	sbrc	r11, 7
 b36:	8d e2       	ldi	r24, 0x2D	; 45
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	b6 01       	movw	r22, r12
 b3c:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 b40:	06 c0       	rjmp	.+12     	; 0xb4e <__stack+0x24f>
 b42:	80 e3       	ldi	r24, 0x30	; 48
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	b6 01       	movw	r22, r12
 b48:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 b4c:	ea 94       	dec	r14
 b4e:	7e 14       	cp	r7, r14
 b50:	c0 f3       	brcs	.-16     	; 0xb42 <__stack+0x243>
 b52:	7a 94       	dec	r7
 b54:	f2 01       	movw	r30, r4
 b56:	e7 0d       	add	r30, r7
 b58:	f1 1d       	adc	r31, r1
 b5a:	80 81       	ld	r24, Z
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	b6 01       	movw	r22, r12
 b60:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 b64:	77 20       	and	r7, r7
 b66:	a9 f7       	brne	.-22     	; 0xb52 <__stack+0x253>
 b68:	06 c0       	rjmp	.+12     	; 0xb76 <__stack+0x277>
 b6a:	80 e2       	ldi	r24, 0x20	; 32
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	b6 01       	movw	r22, r12
 b70:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 b74:	fa 94       	dec	r15
 b76:	ff 20       	and	r15, r15
 b78:	c1 f7       	brne	.-16     	; 0xb6a <__stack+0x26b>
 b7a:	37 ce       	rjmp	.-914    	; 0x7ea <vfprintf+0x26>
 b7c:	f6 01       	movw	r30, r12
 b7e:	26 81       	ldd	r18, Z+6	; 0x06
 b80:	37 81       	ldd	r19, Z+7	; 0x07
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <__stack+0x289>
 b84:	2f ef       	ldi	r18, 0xFF	; 255
 b86:	3f ef       	ldi	r19, 0xFF	; 255
 b88:	c9 01       	movw	r24, r18
 b8a:	2c 96       	adiw	r28, 0x0c	; 12
 b8c:	e2 e1       	ldi	r30, 0x12	; 18
 b8e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__epilogue_restores__>

00000b92 <strnlen_P>:
 b92:	fc 01       	movw	r30, r24
 b94:	05 90       	lpm	r0, Z+
 b96:	61 50       	subi	r22, 0x01	; 1
 b98:	70 40       	sbci	r23, 0x00	; 0
 b9a:	01 10       	cpse	r0, r1
 b9c:	d8 f7       	brcc	.-10     	; 0xb94 <strnlen_P+0x2>
 b9e:	80 95       	com	r24
 ba0:	90 95       	com	r25
 ba2:	8e 0f       	add	r24, r30
 ba4:	9f 1f       	adc	r25, r31
 ba6:	08 95       	ret

00000ba8 <strnlen>:
 ba8:	fc 01       	movw	r30, r24
 baa:	61 50       	subi	r22, 0x01	; 1
 bac:	70 40       	sbci	r23, 0x00	; 0
 bae:	01 90       	ld	r0, Z+
 bb0:	01 10       	cpse	r0, r1
 bb2:	d8 f7       	brcc	.-10     	; 0xbaa <strnlen+0x2>
 bb4:	80 95       	com	r24
 bb6:	90 95       	com	r25
 bb8:	8e 0f       	add	r24, r30
 bba:	9f 1f       	adc	r25, r31
 bbc:	08 95       	ret

00000bbe <__ultoa_invert>:
 bbe:	fa 01       	movw	r30, r20
 bc0:	aa 27       	eor	r26, r26
 bc2:	28 30       	cpi	r18, 0x08	; 8
 bc4:	51 f1       	breq	.+84     	; 0xc1a <__ultoa_invert+0x5c>
 bc6:	20 31       	cpi	r18, 0x10	; 16
 bc8:	81 f1       	breq	.+96     	; 0xc2a <__ultoa_invert+0x6c>
 bca:	e8 94       	clt
 bcc:	6f 93       	push	r22
 bce:	6e 7f       	andi	r22, 0xFE	; 254
 bd0:	6e 5f       	subi	r22, 0xFE	; 254
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	af 4f       	sbci	r26, 0xFF	; 255
 bda:	b1 e0       	ldi	r27, 0x01	; 1
 bdc:	3e d0       	rcall	.+124    	; 0xc5a <__ultoa_invert+0x9c>
 bde:	b4 e0       	ldi	r27, 0x04	; 4
 be0:	3c d0       	rcall	.+120    	; 0xc5a <__ultoa_invert+0x9c>
 be2:	67 0f       	add	r22, r23
 be4:	78 1f       	adc	r23, r24
 be6:	89 1f       	adc	r24, r25
 be8:	9a 1f       	adc	r25, r26
 bea:	a1 1d       	adc	r26, r1
 bec:	68 0f       	add	r22, r24
 bee:	79 1f       	adc	r23, r25
 bf0:	8a 1f       	adc	r24, r26
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	6a 0f       	add	r22, r26
 bf8:	71 1d       	adc	r23, r1
 bfa:	81 1d       	adc	r24, r1
 bfc:	91 1d       	adc	r25, r1
 bfe:	a1 1d       	adc	r26, r1
 c00:	20 d0       	rcall	.+64     	; 0xc42 <__ultoa_invert+0x84>
 c02:	09 f4       	brne	.+2      	; 0xc06 <__ultoa_invert+0x48>
 c04:	68 94       	set
 c06:	3f 91       	pop	r19
 c08:	2a e0       	ldi	r18, 0x0A	; 10
 c0a:	26 9f       	mul	r18, r22
 c0c:	11 24       	eor	r1, r1
 c0e:	30 19       	sub	r19, r0
 c10:	30 5d       	subi	r19, 0xD0	; 208
 c12:	31 93       	st	Z+, r19
 c14:	de f6       	brtc	.-74     	; 0xbcc <__ultoa_invert+0xe>
 c16:	cf 01       	movw	r24, r30
 c18:	08 95       	ret
 c1a:	46 2f       	mov	r20, r22
 c1c:	47 70       	andi	r20, 0x07	; 7
 c1e:	40 5d       	subi	r20, 0xD0	; 208
 c20:	41 93       	st	Z+, r20
 c22:	b3 e0       	ldi	r27, 0x03	; 3
 c24:	0f d0       	rcall	.+30     	; 0xc44 <__ultoa_invert+0x86>
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0x5c>
 c28:	f6 cf       	rjmp	.-20     	; 0xc16 <__ultoa_invert+0x58>
 c2a:	46 2f       	mov	r20, r22
 c2c:	4f 70       	andi	r20, 0x0F	; 15
 c2e:	40 5d       	subi	r20, 0xD0	; 208
 c30:	4a 33       	cpi	r20, 0x3A	; 58
 c32:	18 f0       	brcs	.+6      	; 0xc3a <__ultoa_invert+0x7c>
 c34:	49 5d       	subi	r20, 0xD9	; 217
 c36:	31 fd       	sbrc	r19, 1
 c38:	40 52       	subi	r20, 0x20	; 32
 c3a:	41 93       	st	Z+, r20
 c3c:	02 d0       	rcall	.+4      	; 0xc42 <__ultoa_invert+0x84>
 c3e:	a9 f7       	brne	.-22     	; 0xc2a <__ultoa_invert+0x6c>
 c40:	ea cf       	rjmp	.-44     	; 0xc16 <__ultoa_invert+0x58>
 c42:	b4 e0       	ldi	r27, 0x04	; 4
 c44:	a6 95       	lsr	r26
 c46:	97 95       	ror	r25
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	ba 95       	dec	r27
 c50:	c9 f7       	brne	.-14     	; 0xc44 <__ultoa_invert+0x86>
 c52:	00 97       	sbiw	r24, 0x00	; 0
 c54:	61 05       	cpc	r22, r1
 c56:	71 05       	cpc	r23, r1
 c58:	08 95       	ret
 c5a:	9b 01       	movw	r18, r22
 c5c:	ac 01       	movw	r20, r24
 c5e:	0a 2e       	mov	r0, r26
 c60:	06 94       	lsr	r0
 c62:	57 95       	ror	r21
 c64:	47 95       	ror	r20
 c66:	37 95       	ror	r19
 c68:	27 95       	ror	r18
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0xa2>
 c6e:	62 0f       	add	r22, r18
 c70:	73 1f       	adc	r23, r19
 c72:	84 1f       	adc	r24, r20
 c74:	95 1f       	adc	r25, r21
 c76:	a0 1d       	adc	r26, r0
 c78:	08 95       	ret

00000c7a <__prologue_saves__>:
 c7a:	2f 92       	push	r2
 c7c:	3f 92       	push	r3
 c7e:	4f 92       	push	r4
 c80:	5f 92       	push	r5
 c82:	6f 92       	push	r6
 c84:	7f 92       	push	r7
 c86:	8f 92       	push	r8
 c88:	9f 92       	push	r9
 c8a:	af 92       	push	r10
 c8c:	bf 92       	push	r11
 c8e:	cf 92       	push	r12
 c90:	df 92       	push	r13
 c92:	ef 92       	push	r14
 c94:	ff 92       	push	r15
 c96:	0f 93       	push	r16
 c98:	1f 93       	push	r17
 c9a:	cf 93       	push	r28
 c9c:	df 93       	push	r29
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	ca 1b       	sub	r28, r26
 ca4:	db 0b       	sbc	r29, r27
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	f8 94       	cli
 caa:	de bf       	out	0x3e, r29	; 62
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	cd bf       	out	0x3d, r28	; 61
 cb0:	09 94       	ijmp

00000cb2 <__epilogue_restores__>:
 cb2:	2a 88       	ldd	r2, Y+18	; 0x12
 cb4:	39 88       	ldd	r3, Y+17	; 0x11
 cb6:	48 88       	ldd	r4, Y+16	; 0x10
 cb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cba:	6e 84       	ldd	r6, Y+14	; 0x0e
 cbc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cbe:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc0:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc2:	aa 84       	ldd	r10, Y+10	; 0x0a
 cc4:	b9 84       	ldd	r11, Y+9	; 0x09
 cc6:	c8 84       	ldd	r12, Y+8	; 0x08
 cc8:	df 80       	ldd	r13, Y+7	; 0x07
 cca:	ee 80       	ldd	r14, Y+6	; 0x06
 ccc:	fd 80       	ldd	r15, Y+5	; 0x05
 cce:	0c 81       	ldd	r16, Y+4	; 0x04
 cd0:	1b 81       	ldd	r17, Y+3	; 0x03
 cd2:	aa 81       	ldd	r26, Y+2	; 0x02
 cd4:	b9 81       	ldd	r27, Y+1	; 0x01
 cd6:	ce 0f       	add	r28, r30
 cd8:	d1 1d       	adc	r29, r1
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	ed 01       	movw	r28, r26
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
